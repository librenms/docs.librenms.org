{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"Installing Install LibreNMS Now Install Using Docker Setup Applications Auto Discovery Oxidized RRDCached Alerting Rules Templates Transports More... API Using the API API Endpoints Support FAQ Install validation Performance tweaks More... Developing Getting Started Support for a new OS"},{"location":"API/","title":"Using the API","text":""},{"location":"API/#versioning","title":"Versioning","text":"<p>Versioning an API is a minefield which saw us looking at numerous options on how to do this.</p> <p>We have currently settled on using versioning within the API end point itself <code>/api/v0</code>. As the API itself is new and still in active development we also decided that v0 would be the best starting point to indicate it's in development.</p>"},{"location":"API/#tokens","title":"Tokens","text":"<p>To access any of the token end points you will be required to authenticate using a token. Tokens can be created directly from within the LibreNMS web interface by going to <code>/api-access/</code>.</p> <ul> <li>Click on 'Create API access token'.</li> <li>Select the user you would like to generate the token for.</li> <li>Enter an optional description.</li> <li>Click Create API Token.</li> </ul>"},{"location":"API/#endpoints","title":"Endpoints","text":"<p>Whilst this documentation will describe and show examples of the end points, we've designed the API so you should be able to traverse through it without knowing any of the available API routes.</p> <p>You can do this by first calling <code>/api/v0</code>:</p> <pre><code>curl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0\n</code></pre> <p>Output:</p> <pre><code>{\n \"list_bgp\": \"https://librenms.org/api/v0/bgp\",\n  ...\n \"edit_rule\": \"https://librenms.org/api/v0/rules\"\n}\n</code></pre>"},{"location":"API/#input","title":"Input","text":"<p>Input to the API is done in three different ways, sometimes a combination of two or three of these.</p> <ul> <li>Passing parameters via the api route. For example when obtaining a   devices details you will pass the hostname of the device in the route: <code>/api/v0/devices/:hostname</code>.</li> <li>Passing parameters via the query string. For example you can list   all devices on your install but limit the output to devices that are   currently down: <code>/api/v0/devices?type=down</code></li> <li>Passing data in via JSON, this will mainly be used when adding or   updating information via the API, for instance adding a new device:</li> </ul> <pre><code>curl -X POST -d '{\"hostname\":\"localhost.localdomain\",\"version\":\"v1\",\"community\":\"public\"}' -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/devices\n</code></pre>"},{"location":"API/#output","title":"Output","text":"<p>Output from the API currently is via two output types:</p> <ul> <li>JSON: Most API responses will output json. As shown in the example for   calling the API endpoint.</li> <li>PNG: This is for when the request is for an image such as a graph for a switch port.</li> </ul>"},{"location":"API/#endpoint-categories","title":"Endpoint Categories","text":"<ul> <li>Devices</li> <li>DeviceGroups</li> <li>Ports</li> <li>Port_Groups</li> <li>PortGroups</li> <li>Alerts</li> <li>Routing</li> <li>Switching</li> <li>Inventory</li> <li>Bills</li> <li>ARP</li> <li>Services</li> <li>Logs</li> <li>System</li> <li>Locations</li> </ul>"},{"location":"API/ARP/","title":"ARP","text":""},{"location":"API/ARP/#list_arp","title":"<code>list_arp</code>","text":"<p>Retrieve a specific ARP entry or all ARP entries for a device</p> <p>Route: <code>/api/v0/resources/ip/arp/:query</code></p> <p>Query can be: - An IP address - A MAC address - A CIDR network (192.168.1.0/24) - <code>all</code> and set ?device=hostname (or device id)</p> <p>Input:</p> <ul> <li>device if you specify all for the query then you need to populate this   with the hostname or id of the device.</li> </ul> <p>Example:</p> <pre><code>curl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/resources/ip/arp/1.1.1.1\ncurl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/resources/ip/arp/192.168.1.0/24\ncurl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/resources/ip/arp/all?device=localhost\n</code></pre> <p>Output:</p> <pre><code>{\n    \"status\": \"ok\",\n    \"message\": \"\",\n    \"count\": 1,\n    \"arp\": [\n        {\n            \"port_id\": \"229\",\n            \"mac_address\": \"da160e5c2002\",\n            \"ipv4_address\": \"1.1.1.1\",\n            \"context_name\": \"\"\n        }\n    ]\n}\n</code></pre>"},{"location":"API/Alerts/","title":"Alerts","text":""},{"location":"API/Alerts/#get_alert","title":"<code>get_alert</code>","text":"<p>Get details of an alert</p> <p>Route: <code>/api/v0/alerts/:id</code></p> <ul> <li>id is the alert id, you can obtain a list of alert ids from <code>list_alerts</code>.</li> </ul> <p>Input:</p> <p>-</p> <p>Example:</p> <pre><code>curl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/alerts/1\n</code></pre> <p>Output:</p> <pre><code>{\n \"status\": \"ok\",\n \"message\": \"\",\n \"count\": 7,\n \"alerts\": [\n  {\n   \"hostname\": \"localhost\",\n   \"id\": \"1\",\n   \"device_id\": \"1\",\n   \"rule_id\": \"1\",\n   \"state\": \"1\",\n   \"alerted\": \"1\",\n   \"open\": \"1\",\n   \"timestamp\": \"2014-12-11 14:40:02\"\n  }]\n}\n</code></pre>"},{"location":"API/Alerts/#ack_alert","title":"<code>ack_alert</code>","text":"<p>Acknowledge an alert</p> <p>Route: <code>/api/v0/alerts/:id</code></p> <ul> <li>id is the alert id, you can obtain a list of alert ids from <code>list_alerts</code>.</li> <li>note is the note to add to the alert</li> <li>until_clear is a boolean and if set to false, the alert will re-alert if it gets worse/better or changes.</li> </ul> <p>Input:</p> <p>-</p> <p>Example:</p> <pre><code>curl -X PUT -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/alerts/1\n</code></pre> <p>Output:</p> <pre><code>{\n \"status\": \"ok\",\n \"message\": \"\",\n \"message\": \"Alert has been acknowledged\"\n}\n</code></pre>"},{"location":"API/Alerts/#unmute_alert","title":"<code>unmute_alert</code>","text":"<p>Unmute an alert</p> <p>Route: <code>/api/v0/alerts/unmute/:id</code></p> <ul> <li>id is the alert id, you can obtain a list of alert ids from <code>list_alerts</code>.</li> </ul> <p>Input:</p> <p>-</p> <p>Example:</p> <pre><code>curl -X PUT -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/alerts/unmute/1\n</code></pre> <p>Output:</p> <pre><code>{\n \"status\": \"ok\",\n \"message\": \"Alert has been unmuted\"\n}\n</code></pre>"},{"location":"API/Alerts/#list_alerts","title":"<code>list_alerts</code>","text":"<p>List all alerts</p> <p>Route: <code>/api/v0/alerts</code></p> <p>Input:</p> <ul> <li>state: Filter the alerts by state, 0 = ok, 1 = alert, 2 = ack</li> <li>severity: Filter the alerts by severity. Valid values are <code>ok</code>, <code>warning</code>, <code>critical</code>.</li> <li>alert_rule: Filter alerts by alert rule ID.</li> <li>order: How to order the output, default is by timestamp   (descending). Can be appended by DESC or ASC to change the order.</li> </ul> <p>Examples:</p> <pre><code>curl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/alerts?state=1\n</code></pre> <pre><code>curl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/alerts?severity=critical\n</code></pre> <pre><code>curl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/alerts?order=timestamp%20ASC\n</code></pre> <pre><code>curl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/alerts?alert_rule=49\n</code></pre> <p>Output:</p> <pre><code>{\n \"status\": \"ok\",\n \"message\": \"\",\n \"count\": 1,\n \"alerts\": [\n  {\n   \"id\": \"1\",\n   \"device_id\": \"1\",\n   \"rule_id\": \"1\",\n   \"state\": \"1\",\n   \"alerted\": \"1\",\n   \"open\": \"1\",\n   \"timestamp\": \"2014-12-11 14:40:02\"\n  }]\n}\n</code></pre>"},{"location":"API/Alerts/#rules","title":"Rules","text":""},{"location":"API/Alerts/#get_alert_rule","title":"<code>get_alert_rule</code>","text":"<p>Get the alert rule details.</p> <p>Route: <code>/api/v0/rules/:id</code></p> <ul> <li>id is the rule id.</li> </ul> <p>Input:</p> <p>-</p> <p>Example:</p> <pre><code>curl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/rules/1\n</code></pre> <p>Output:</p> <pre><code>{\n \"status\": \"ok\",\n \"message\": \"\",\n \"count\": 1,\n \"rules\": [\n  {\n   \"id\": \"1\",\n   \"device_id\": \"1\",\n   \"rule\": \"%devices.os != \\\"Juniper\\\"\",\n   \"severity\": \"warning\",\n   \"extra\": \"{\\\"mute\\\":true,\\\"count\\\":\\\"15\\\",\\\"delay\\\":null,\\\"invert\\\":false}\",\n   \"disabled\": \"0\",\n   \"name\": \"A test rule\"\n  }\n ]\n}\n</code></pre>"},{"location":"API/Alerts/#delete_rule","title":"<code>delete_rule</code>","text":"<p>Delete an alert rule by id</p> <p>Route: <code>/api/v0/rules/:id</code></p> <ul> <li>id is the rule id.</li> </ul> <p>Input:</p> <p>-</p> <p>Example:</p> <pre><code>curl -X DELETE -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/rules/1\n</code></pre> <p>Output:</p> <pre><code>{\n \"status\": \"ok\",\n \"message\": \"\",\n \"message\": \"Alert rule has been removed\"\n}\n</code></pre>"},{"location":"API/Alerts/#list_alert_rules","title":"<code>list_alert_rules</code>","text":"<p>List the alert rules.</p> <p>Route: <code>/api/v0/rules</code></p> <p>-</p> <p>Input:</p> <p>-</p> <p>Example:</p> <pre><code>curl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/rules\n</code></pre> <p>Output:</p> <pre><code>{\n \"status\": \"ok\",\n \"message\": \"\",\n \"count\": 1,\n \"rules\": [\n  {\n   \"id\": \"1\",\n   \"device_id\": \"-1\",\n   \"rule\": \"%devices.os != \\\"Juniper\\\"\",\n   \"severity\": \"critical\",\n   \"extra\": \"{\\\"mute\\\":false,\\\"count\\\":\\\"15\\\",\\\"delay\\\":\\\"300\\\",\\\"invert\\\":false}\",\n   \"disabled\": \"0\",\n   \"name\": \"A test rule\"\n  }]\n}\n</code></pre>"},{"location":"API/Alerts/#add_rule","title":"<code>add_rule</code>","text":"<p>Add a new alert rule.</p> <p>Route: <code>/api/v0/rules</code></p> <p>-</p> <p>Input (JSON):</p> <ul> <li>devices: This is either an array of device ids or -1 for a global rule</li> <li>builder: The rule which should be in the format entity.condition   value (i.e devices.status != 0 for devices marked as down). It must   be json encoded in the format rules are currently stored.</li> <li>severity: The severity level the alert will be raised against, Ok, Warning, Critical.</li> <li>disabled: Whether the rule will be disabled or not, 0 = enabled, 1 = disabled</li> <li>count: This is how many polling runs before an alert will trigger and the frequency.</li> <li>delay: Delay is when to start alerting and how frequently. The value   is stored in seconds but you can specify minutes, hours or days by   doing 5 m, 5 h, 5 d for each one.</li> <li>interval: How often to re-issue notifications while this alert is active,0 means notify once.The value   is stored in seconds but you can specify minutes, hours or days by   doing 5 m, 5 h, 5 d for each one.</li> <li>mute: If mute is enabled then an alert will never be sent but will   show up in the Web UI (true or false).</li> <li>invert: This would invert the rules check.</li> <li>name: This is the name of the rule and is mandatory.</li> <li>notes: Some informal notes for this rule</li> </ul> <p>Example:</p> <pre><code>curl -X POST -d '{\"devices\":[1,2,3], \"name\": \"testrule\", \"builder\":{\"condition\":\"AND\",\"rules\":[{\"id\":\"devices.hostname\",\"field\":\"devices.hostname\",\"type\":\"string\",\"input\":\"text\",\"operator\":\"equal\",\"value\":\"localhost\"}],\"valid\":true},\"severity\": \"critical\",\"count\":15,\"delay\":\"5 m\",\"interval\":\"5 m\",\"mute\":false,\"notes\":\"This a note from the API\"}' -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/rules\n</code></pre> <p>Output:</p> <pre><code>{\n \"status\": \"ok\"\n}\n</code></pre>"},{"location":"API/Alerts/#edit_rule","title":"<code>edit_rule</code>","text":"<p>Edit an existing alert rule</p> <p>Route: <code>/api/v0/rules</code></p> <p>-</p> <p>Input (JSON):</p> <ul> <li>rule_id: You must specify the rule_id to edit an existing rule, if   this is absent then a new rule will be created.</li> <li>devices: This is either an array of device ids or -1 for a global rule</li> <li>builder: The rule which should be in the format entity.condition   value (i.e devices.status != 0 for devices marked as down). It must   be json encoded in the format rules are currently stored.</li> <li>severity: The severity level the alert will be raised against, Ok, Warning, Critical.</li> <li>disabled: Whether the rule will be disabled or not, 0 = enabled, 1 = disabled</li> <li>count: This is how many polling runs before an alert will trigger and the frequency.</li> <li>delay: Delay is when to start alerting and how frequently. The value   is stored in seconds but you can specify minutes, hours or days by   doing 5 m, 5 h, 5 d for each one.</li> <li>interval: How often to re-issue notifications while this alert is active,0 means notify once.The value   is stored in seconds but you can specify minutes, hours or days by   doing 5 m, 5 h, 5 d for each one.</li> <li>mute: If mute is enabled then an alert will never be sent but will   show up in the Web UI (true or false).</li> <li>invert: This would invert the rules check.</li> <li>name: This is the name of the rule and is mandatory.</li> <li>notes: Some informal notes for this rule</li> </ul> <p>Example:</p> <pre><code>curl -X PUT -d '{\"rule_id\":1,\"device_id\":\"-1\", \"name\": \"testrule\", \"builder\":{\"condition\":\"AND\",\"rules\":[{\"id\":\"devices.hostname\",\"field\":\"devices.hostname\",\"type\":\"string\",\"input\":\"text\",\"operator\":\"equal\",\"value\":\"localhost\"}],\"valid\":true},\"severity\": \"critical\",\"count\":15,\"delay\":\"5 m\",\"interval\":\"5 m\",\"mute\":false,\"notes\":\"This a note from the API\"}' -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/rules\n</code></pre> <p>Output:</p> <pre><code>{\n \"status\": \"ok\"\n}\n</code></pre>"},{"location":"API/Bills/","title":"Bills","text":""},{"location":"API/Bills/#list_bills","title":"<code>list_bills</code>","text":"<p>Retrieve the list of bills currently in the system.</p> <p>Route: <code>/api/v0/bills</code> <code>/api/v0/bills?period=previous</code></p> <p>Input:</p> <p>Example:</p> <pre><code>curl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/bills\ncurl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/bills?period=previous\n</code></pre> <p>Output:</p> <pre><code>{\n \"status\": \"ok\",\n \"message\": \"\",\n \"count\": 1,\n \"bills\": [\n  {\n   \"bill_id\": \"1\",\n   \"bill_name\": \"Router bills\",\n   \"bill_type\": \"cdr\",\n   \"bill_cdr\": \"10000000\",\n   \"bill_day\": \"1\",\n   \"bill_quota\": \"0\",\n   \"rate_95th_in\": \"0\",\n   \"rate_95th_out\": \"0\",\n   \"rate_95th\": \"0\",\n   \"dir_95th\": \"in\",\n   \"total_data\": \"0\",\n   \"total_data_in\": \"0\",\n   \"total_data_out\": \"0\",\n   \"rate_average_in\": \"0\",\n   \"rate_average_out\": \"0\",\n   \"rate_average\": \"0\",\n   \"bill_last_calc\": \"2015-07-02 17:01:26\",\n   \"bill_custid\": \"Router\",\n   \"bill_ref\": \"Router\",\n   \"bill_notes\": \"Bill me\",\n   \"bill_autoadded\": \"0\",\n   \"ports_total\": \"0\",\n   \"allowed\": \"10Mbps\",\n   \"used\": \"0bps\",\n   \"percent\": 0,\n   \"overuse\": \"-\",\n   \"ports\": [\n       {\n           \"device_id\": \"168\",\n           \"port_id\": \"35146\",\n           \"ifName\": \"eth0\"\n       }\n   ]\n  }\n ]\n}\n</code></pre>"},{"location":"API/Bills/#get_bill","title":"<code>get_bill</code>","text":"<p>Retrieve a specific bill</p> <p>Route: <code>/api/v0/bills/:id</code> <code>/api/v0/bills/:id?period=previous</code> <code>/api/v0/bills?ref=:ref</code> <code>/api/v0/bills?ref=:ref&amp;period=previous</code> <code>/api/v0/bills?custid=:custid</code> <code>/api/v0/bills?custid=:custid&amp;period=previous</code></p> <ul> <li>id is the specific bill id</li> <li>ref is the billing reference</li> <li>custid is the customer reference</li> <li>period=previous indicates you would like the data for the last   complete period rather than the current period</li> </ul> <p>Input:</p> <p>Example:</p> <pre><code>curl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/bills/1\ncurl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/bills?ref=:customerref\ncurl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/bills?custid=:custid\n</code></pre> <p>Output:</p> <pre><code>{\n \"status\": \"ok\",\n \"message\": \"\",\n \"count\": 1,\n \"bills\": [\n  {\n   \"bill_id\": \"1\",\n   \"bill_name\": \"Router bills\",\n   \"bill_type\": \"cdr\",\n   \"bill_cdr\": \"10000000\",\n   \"bill_day\": \"1\",\n   \"bill_quota\": \"0\",\n   \"rate_95th_in\": \"0\",\n   \"rate_95th_out\": \"0\",\n   \"rate_95th\": \"0\",\n   \"dir_95th\": \"in\",\n   \"total_data\": \"0\",\n   \"total_data_in\": \"0\",\n   \"total_data_out\": \"0\",\n   \"rate_average_in\": \"0\",\n   \"rate_average_out\": \"0\",\n   \"rate_average\": \"0\",\n   \"bill_last_calc\": \"2015-07-02 17:01:26\",\n   \"bill_custid\": \"Router\",\n   \"bill_ref\": \"Router\",\n   \"bill_notes\": \"Bill me\",\n   \"bill_autoadded\": \"0\",\n   \"ports_total\": \"0\",\n   \"allowed\": \"10Mbps\",\n   \"used\": \"0bps\",\n   \"percent\": 0,\n   \"overuse\": \"-\",\n   \"ports\": [\n       {\n           \"device_id\": \"168\",\n           \"port_id\": \"35146\",\n           \"ifName\": \"eth0\"\n       }\n   ]\n  }\n ]\n}\n</code></pre>"},{"location":"API/Bills/#get_bill_graph","title":"<code>get_bill_graph</code>","text":"<p>Retrieve a graph image associated with a bill.</p> <p>NB: The graphs returned from this will always be png as they do not come from rrdtool, even if you have SVG set.</p> <p>Route: `/api/v0/bills/:id/graphs/:graph_type</p> <p>Example:</p> <pre><code>curl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/bills/1/graphs/bits\ncurl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/bills/1/graphs/bits?from=1517443200\ncurl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/bills/1/graphs/bits?from=1517443200&amp;to=1517788800\ncurl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/bills/1/graphs/monthly\n</code></pre> <p>Output:</p> <p>Graph Image</p>"},{"location":"API/Bills/#get_bill_graphdata","title":"<code>get_bill_graphdata</code>","text":"<p>Retrieve the data used to draw a graph so it can be rendered in an external system</p> <p>Route: <code>/api/v0/bills/:id/graphdata/:graph_type</code></p> <p>Input:</p> <p>The <code>reducefactor</code> parameter is used to reduce the number of data points. Billing data has 5 minute granularity, so requesting a graph for a long time period will result in many data points.  If not supplied, it will be automatically calculated.  A reducefactor of 1 means return all items, 2 means half of the items etc.</p> <p>Example:</p> <pre><code>curl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/bills/1/graphdata/bits\ncurl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/bills/1/graphdata/bits?from=1517443200\ncurl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/bills/1/graphdata/bits?from=1517443200&amp;to=1517788800\ncurl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/bills/1/graphdata/bits?from=1517443200&amp;to=1517788800&amp;reducefactor=5\n</code></pre> <p>Output:</p> <p>{     \"status\": \"ok\",     \"graph_data\": {         \"from\": \"1517443200\",         \"to\": 1518196161,         \"last\": \"1518195901\",         \"in_data\": [             103190525.20999999,             104949255.81         ],         \"out_data\": [             1102059.1299999999,             1079216.46         ],         \"tot_data\": [             104292584.33999999,             106028472.27         ],         \"ticks\": [             \"1517750401\",             \"1517756101\"         ],         \"rate_95th\": \"251880417\",         \"rate_average\": \"146575554\",         \"bill_type\": \"cdr\",         \"max_in\": 9888289942,         \"max_out\": 75848756,         \"ave_in\": 18029660.242105871,         \"ave_out\": 196447.38060137472,         \"last_in\": 3790227.9500000002,         \"last_out\": 122731.63333333333     } }</p>"},{"location":"API/Bills/#get_bill_history","title":"<code>get_bill_history</code>","text":"<p>Retrieve the history of specific bill</p> <p>Route: <code>/api/v0/bills/:id/history</code></p> <p>Input:</p> <p>Example:</p> <pre><code>curl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/bills/1/history\n</code></pre> <p>Output:</p> <pre><code>{\n \"status\": \"ok\",\n \"bill_history\": [\n    {\n        \"bill_hist_id\": \"1\",\n        \"bill_id\": \"1\",\n        \"updated\": \"2018-02-06 17:01:01\",\n        \"bill_datefrom\": \"2018-02-01 00:00:00\",\n        \"bill_dateto\": \"2018-02-28 23:59:59\",\n        \"bill_type\": \"CDR\",\n        \"bill_allowed\": \"100000000\",\n        \"bill_used\": \"229963765\",\n        \"bill_overuse\": \"129963765\",\n        \"bill_percent\": \"229.96\",\n        \"rate_95th_in\": \"229963765\",\n        \"rate_95th_out\": \"1891344\",\n        \"rate_95th\": \"229963765\",\n        \"dir_95th\": \"in\",\n        \"rate_average\": \"136527101\",\n        \"rate_average_in\": \"135123359\",\n        \"rate_average_out\": \"1403743\",\n        \"traf_in\": \"3235123452544\",\n        \"traf_out\": \"33608406566\",\n        \"traf_total\": \"3268731859110\",\n        \"bill_peak_out\": \"2782349290\",\n        \"bill_peak_in\": \"10161119\",\n        \"pdf\": null\n    }\n ],\n \"count\": 1,\n}\n</code></pre>"},{"location":"API/Bills/#get_bill_history_graph","title":"<code>get_bill_history_graph</code>","text":"<p>Retrieve a graph of a previous period of a bill</p> <p>NB: The graphs returned from this will always be png as they do not come from rrdtool, even if you have SVG set.</p> <p>Route: <code>/api/v0/bills/:id/history/:bill_hist_id/graphs/:graph_type</code></p> <p>Input:</p> <p>Example:</p> <pre><code>curl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/bills/1/history/1/graphs/bits\ncurl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/bills/1/history/1/graphs/hour\ncurl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/bills/1/history/1/graphs/day\n</code></pre> <p>Output:</p> <p>(image)</p>"},{"location":"API/Bills/#get_bill_history_graphdata","title":"<code>get_bill_history_graphdata</code>","text":"<p>Retrieve the data for a graph of a previous period of a bill, to be rendered in an external system</p> <p>Route: <code>/api/v0/bills/:id/history/:bill_hist_id/graphdata/:graph_type</code></p> <p>Input:</p> <p>Example:</p> <pre><code>curl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/bills/1/history/1/graphdata/bits\ncurl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/bills/1/history/1/graphdata/hour\ncurl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/bills/1/history/1/graphdata/day\n</code></pre> <p>Output:</p>"},{"location":"API/Bills/#delete_bill","title":"<code>delete_bill</code>","text":"<p>Delete a specific bill and all dependent data</p> <p>Route: <code>/api/v0/bills/:id</code></p> <ul> <li>id is the specific bill id</li> </ul> <p>Input:</p> <p>Example:</p> <pre><code>curl -X DELETE -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/bills/1\n</code></pre> <p>Output:</p> <pre><code>{\n    \"status\": \"ok\",\n    \"message\": \"Bill has been removed\"\n}\n</code></pre>"},{"location":"API/Bills/#create_edit_bill","title":"<code>create_edit_bill</code>","text":"<p>Creates a new bill or updates an existing one</p> <p>Route: <code>/api/v0/bills</code></p> <p>Method: <code>POST</code></p> <ul> <li>If you send an existing bill_id the call replaces all values it   receives. For example if you send 2 ports it will delete the   existing ports and add the the 2 new ports. So to add ports you have   to get the current ports first and add them to your update call.</li> </ul> <p>Input:</p> <p>Example (create):</p> <pre><code>curl -X POST -d '{\"ports\":[ 1021 ],\"bill_name\":\"NEWBILL\",\"bill_day\":\"1\",\"bill_type\":\"quota\",\"bill_quota\":\"2000000000000\",\"bill_custid\":\"1337\",\"bill_ref\":\"reference1\",\"bill_notes\":\"mynote\"}' -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/bills\n</code></pre> <p>Example (set):</p> <pre><code>curl -X POST -d '{\"bill_id\":\"32\",\"ports\":[ 1021 ],\"bill_name\":\"NEWNAME\",\"bill_quota\":\"1000000000000\"}' -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/bills\n</code></pre> <p>Output:</p> <pre><code>{\n    \"status\": \"ok\",\n    \"bill_id\": 32\n}\n</code></pre>"},{"location":"API/DeviceGroups/","title":"DeviceGroups","text":""},{"location":"API/DeviceGroups/#get_devicegroups","title":"<code>get_devicegroups</code>","text":"<p>List all device groups.</p> <p>Route: <code>/api/v0/devicegroups</code></p> <p>Input (JSON):</p> <p>-</p> <p>Examples:</p> <pre><code>curl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/devicegroups\n</code></pre> <p>Output:</p> <pre><code>[\n    {\n        \"status\": \"ok\",\n        \"message\": \"Found 1 device groups\",\n        \"count\": 1,\n        \"groups\": [\n        {\n            \"id\": \"1\",\n            \"name\": \"Testing\",\n            \"desc\": \"Testing\",\n            \"pattern\": \"%devices.status = \\\"1\\\" &amp;&amp;\"\n        }\n        ]\n    }\n]\n</code></pre>"},{"location":"API/DeviceGroups/#add_devicegroup","title":"<code>add_devicegroup</code>","text":"<p>Add a new device group. Upon success, the ID of the new device group is returned and the HTTP response code is <code>201</code>.</p> <p>Route: <code>/api/v0/devicegroups</code></p> <p>Input (JSON):</p> <ul> <li><code>name</code>: required - The name of the device group</li> <li><code>type</code>: required - should be <code>static</code> or <code>dynamic</code>. Setting this to static   requires that the devices input be provided</li> <li><code>desc</code>: optional - Description of the device group</li> <li><code>rules</code>: required if type == dynamic - A set of rules to determine which   devices should be included in this device group</li> <li><code>devices</code>: required if type == static - A list of devices that should be   included in this group. This is a static list of devices</li> </ul> <p>Examples:</p> <p>Dynamic Example:</p> <pre><code>curl -H 'X-Auth-Token: YOURAPITOKENHERE' \\\n  -X POST https://librenms.org/api/v0/devicegroups \\\n  --data-raw '\n{\n \"name\": \"New Device Group\", \n \"desc\": \"A very fancy dynamic group\",\n \"type\": \"dynamic\", \n \"rules\": \"{\\\"condition\\\":\\\"AND\\\",\\\"rules\\\":[{\\\"id\\\":\\\"access_points.name\\\",\\\"field\\\":\\\"access_points.name\\\",\\\"type\\\":\\\"string\\\",\\\"input\\\":\\\"text\\\",\\\"operator\\\":\\\"equal\\\",\\\"value\\\":\\\"accesspoint1\\\"}],\\\"valid\\\":true}\"\n}\n'\n</code></pre> <p>Output:</p> <pre><code>{\n    \"status\": \"ok\",\n    \"id\": 86,\n    \"message\": \"Device group New Device Group created\"\n}\n</code></pre> <p>Static Example:</p> <pre><code>curl -H 'X-Auth-Token: YOURAPITOKENHERE' \\\n  -X POST https://librenms.org/api/v0/devicegroups \\\n  -d '{\"name\":\"New Device Group\",\"type\":\"static\",\"devices\":[261,271]}'\n</code></pre> <p>Output:</p> <pre><code>{\n    \"status\": \"ok\",\n    \"id\": 86,\n    \"message\": \"Device group New Device Group created\"\n}\n</code></pre>"},{"location":"API/DeviceGroups/#update_devicegroup","title":"<code>update_devicegroup</code>","text":"<p>Updates a device group.</p> <p>Route: <code>/api/v0/devicegroups/:name</code></p> <ul> <li>name Is the name of the device group which can be obtained using   <code>get_devicegroups</code>. Please ensure that   the name is urlencoded if it needs to be (i.e Linux Servers would   need to be urlencoded.</li> </ul> <p>Input (JSON):</p> <ul> <li><code>name</code>: optional - The name of the device group</li> <li><code>type</code>: optional - should be <code>static</code> or <code>dynamic</code>. Setting this to static   requires that the devices input be provided</li> <li><code>desc</code>: optional - Description of the device group</li> <li><code>rules</code>: required if type == dynamic - A set of rules to determine which   devices should be included in this device group</li> <li><code>devices</code>: required if type == static - A list of devices that should be   included in this group. This is a static list of devices</li> </ul> <p>Examples:</p> <pre><code>curl -X PATCH -d '{\"name\": \"NewLinuxServers\"}' -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/devices/LinuxServers\n</code></pre> <p>Output:</p> <pre><code>{\n    \"status\": \"ok\",\n    \"message\": \"Device group LinuxServers updated\"\n}\n</code></pre>"},{"location":"API/DeviceGroups/#delete_devicegroup","title":"<code>delete_devicegroup</code>","text":"<p>Deletes a device group.</p> <p>Route: <code>/api/v0/devicegroups/:name</code></p> <ul> <li>name Is the name of the device group which can be obtained using   <code>get_devicegroups</code>. Please ensure that   the name is urlencoded if it needs to be (i.e Linux Servers would   need to be urlencoded.</li> </ul> <p>Input:</p> <p>-</p> <p>Examples:</p> <pre><code>curl -X DELETE -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/devices/LinuxServers\n</code></pre> <p>Output:</p> <pre><code>{\n    \"status\": \"ok\",\n    \"message\": \"Device group LinuxServers deleted\"\n}\n</code></pre>"},{"location":"API/DeviceGroups/#get_devices_by_group","title":"<code>get_devices_by_group</code>","text":"<p>List all devices matching the group provided.</p> <p>Route: <code>/api/v0/devicegroups/:name</code></p> <ul> <li>name Is the name of the device group which can be obtained using   <code>get_devicegroups</code>. Please ensure that   the name is urlencoded if it needs to be (i.e Linux Servers would   need to be urlencoded.</li> </ul> <p>Input (JSON):</p> <ul> <li>full: set to any value to return all data for the devices in a given group</li> </ul> <p>Examples:</p> <pre><code>curl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/devicegroups/LinuxServers\n</code></pre> <p>Output:</p> <pre><code>[\n     {\n         \"status\": \"ok\",\n         \"message\": \"Found 3 in group LinuxServers\",\n         \"count\": 3,\n         \"devices\": [\n            {\n                \"device_id\": \"15\"\n            },\n            {\n                \"device_id\": \"18\"\n            },\n            {\n                \"device_id\": \"20\"\n            }\n         ]\n     }\n]\n</code></pre>"},{"location":"API/DeviceGroups/#maintenance_devicegroup","title":"<code>maintenance_devicegroup</code>","text":"<p>Set a device group into maintenance mode.</p> <p>Route: <code>/api/v0/devicegroups/:name/maintenance</code></p> <p>Input (JSON):</p> <ul> <li><code>title</code>: optional - Some title for the Maintenance   Will be replaced with device group name if omitted</li> <li><code>notes</code>: optional - Some description for the Maintenance</li> <li><code>start</code>: optional - start time of Maintenance in full format <code>Y-m-d H:i:00</code>   eg: 2022-08-01 22:45:00   Current system time <code>now()</code> will be used if omitted</li> <li><code>duration</code>: required - Duration of Maintenance in format <code>H:i</code> / <code>Hrs:Mins</code>   eg: 02:00</li> </ul> <p>Example with start time:</p> <pre><code>curl -H 'X-Auth-Token: YOURAPITOKENHERE' \\\n  -X POST https://librenms.org/api/v0/devicegroups/Cisco%20switches/maintenance/ \\\n  --data-raw '\n{\n \"title\":\"Device group Maintenance\",\n  \"notes\":\"A 2 hour Maintenance triggered via API with start time\",\n  \"start\":\"2022-08-01 08:00:00\",\n  \"duration\":\"2:00\"\n}\n'\n</code></pre> <p>Output:</p> <pre><code>{\n    \"status\": \"ok\",\n    \"message\": \"Device group Cisco switches (2) will begin maintenance mode at 2022-08-01 22:45:00 for 2:00h\"\n}\n</code></pre> <p>Example with no start time:</p> <pre><code>curl -H 'X-Auth-Token: YOURAPITOKENHERE' \\\n  -X POST https://librenms.org/api/v0/devicegroups/Cisco%20switches/maintenance/ \\\n  --data-raw '\n{\n \"title\":\"Device group Maintenance\",\n  \"notes\":\"A 2 hour Maintenance triggered via API with no start time\",\n  \"duration\":\"2:00\"\n}\n'\n</code></pre> <p>Output:</p> <pre><code>{\n    \"status\": \"ok\",\n    \"message\": \"Device group Cisco switches (2) moved into maintenance mode for 2:00h\"\n}\n</code></pre>"},{"location":"API/DeviceGroups/#add-devices-to-group","title":"Add devices to group","text":"<p>Add devices to a device group.</p> <p>Route: <code>/api/v0/devicegroups/:name/devices</code></p> <ul> <li>name Is the name of the device group which can be obtained using   <code>get_devicegroups</code>. Please ensure that   the name is urlencoded if it needs to be (i.e Linux Servers would   need to be urlencoded.</li> </ul> <p>Input (JSON):</p> <ul> <li><code>devices</code>: required - A list of devices to be added to the group.</li> </ul> <p>Example:</p> <pre><code>curl -H 'X-Auth-Token: YOURAPITOKENHERE' \\\n  -X POST https://librenms.org/api/v0/devicegroups/devices \\\n  --data-raw '{\"devices\":[261,271]}'\n</code></pre> <p>Output:</p> <pre><code>{\n    \"status\": \"ok\",\n    \"message\": \"Devices added\"\n}\n</code></pre>"},{"location":"API/DeviceGroups/#remove-devices-from-group","title":"Remove devices from group","text":"<p>Removes devices from a device group.</p> <p>Route: <code>/api/v0/devicegroups/:name/devices</code></p> <ul> <li>name Is the name of the device group which can be obtained using   <code>get_devicegroups</code>. Please ensure that   the name is urlencoded if it needs to be (i.e Linux Servers would   need to be urlencoded.</li> </ul> <p>Input (JSON):</p> <ul> <li><code>devices</code>: required - A list of devices to be removed from the group.</li> </ul> <p>Example:</p> <pre><code>curl -H 'X-Auth-Token: YOURAPITOKENHERE' \\\n  -X DELETE https://librenms.org/api/v0/devicegroups/devices \\\n  --data-raw '{\"devices\":[261,271]}'\n</code></pre> <p>Output:</p> <pre><code>{\n    \"status\": \"ok\",\n    \"message\": \"Devices removed\"\n}\n</code></pre>"},{"location":"API/Devices/","title":"Devices","text":""},{"location":"API/Devices/#del_device","title":"<code>del_device</code>","text":"<p>Delete a given device.</p> <p>Route: <code>/api/v0/devices/:hostname</code></p> <ul> <li>hostname can be either the device hostname or id</li> </ul> <p>Input:</p> <p>-</p> <p>Example:</p> <pre><code>curl -X DELETE -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/devices/localhost\n</code></pre> <p>Output:</p> <pre><code>{\n    \"status\": \"ok\",\n    \"message\": \"Removed device localhost\",\n    \"devices\": [\n        {\n            \"device_id\": \"1\",\n            \"hostname\": \"localhost\",\n            ...\n            \"serial\": null,\n            \"icon\": null\n        }\n    ]\n}\n</code></pre>"},{"location":"API/Devices/#get_device","title":"<code>get_device</code>","text":"<p>Get details of a given device.</p> <p>Route: <code>/api/v0/devices/:hostname</code></p> <ul> <li>hostname can be either the device hostname or id</li> </ul> <p>Input:</p> <p>-</p> <p>Example:</p> <pre><code>curl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/devices/localhost\n</code></pre> <p>Output:</p> <pre><code>{\n    \"status\": \"ok\",\n    \"devices\": [\n        {\n            \"device_id\": \"1\",\n            \"hostname\": \"localhost\",\n            ...\n            \"serial\": null,\n            \"icon\": null\n        }\n    ]\n}\n</code></pre>"},{"location":"API/Devices/#discover_device","title":"<code>discover_device</code>","text":"<p>Trigger a discovery of given device.</p> <p>Route: <code>/api/v0/devices/:hostname/discover</code></p> <ul> <li>hostname can be either the device hostname or id</li> </ul> <p>Input:</p> <p>-</p> <p>Example:</p> <pre><code>curl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/devices/localhost/discover\n</code></pre> <p>Output:</p> <pre><code>{\n    \"status\": \"ok\",\n    \"result\": {\n        \"status\": 0,\n        \"message\": \"Device will be rediscovered\"\n    },\n    \"count\": 2\n}\n</code></pre>"},{"location":"API/Devices/#availability","title":"<code>availability</code>","text":"<p>Get calculated availabilities of given device.</p> <p>Route: <code>/api/v0/devices/:hostname/availability</code></p> <ul> <li>hostname can be either the device hostname or id</li> </ul> <p>Input:</p> <p>-</p> <p>Example:</p> <pre><code>curl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/devices/localhost/availability\n</code></pre> <p>Output:</p> <pre><code>{\n    \"status\": \"ok\",\n    \"availability\": [\n        {\n            \"duration\": 86400,\n            \"availability_perc\": \"100.000000\"\n        },\n        {\n            \"duration\": 604800,\n            \"availability_perc\": \"100.000000\"\n        },\n        {\n            \"duration\": 2592000,\n            \"availability_perc\": \"99.946000\"\n        },\n        {\n            \"duration\": 31536000,\n            \"availability_perc\": \"99.994000\"\n        }\n    ],\n    \"count\": 4\n}\n</code></pre>"},{"location":"API/Devices/#outages","title":"<code>outages</code>","text":"<p>Get detected outages of given device.</p> <p>Route: <code>/api/v0/devices/:hostname/outages</code></p> <ul> <li>hostname can be either the device hostname or id</li> </ul> <p>Input:</p> <p>-</p> <p>Example:</p> <pre><code>curl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/devices/localhost/outages\n</code></pre> <p>Output:</p> <pre><code>{\n    \"status\": \"ok\",\n    \"outages\": [\n        {\n            \"going_down\": 1593194031,\n            \"up_again\": 1593194388\n        },\n        {\n            \"going_down\": 1593946507,\n            \"up_again\": 1593946863\n        },\n        {\n            \"going_down\": 1594628616,\n            \"up_again\": 1594628968\n        },\n        {\n            \"going_down\": 1594628974,\n            \"up_again\": 1594629339\n        },\n        {\n            \"going_down\": 1594638668,\n            \"up_again\": 1594638992\n        }\n    ],\n    \"count\": 5\n}\n</code></pre>"},{"location":"API/Devices/#get_graphs","title":"<code>get_graphs</code>","text":"<p>Get a list of available graphs for a device, this does not include ports.</p> <p>Route: <code>/api/v0/devices/:hostname/graphs</code></p> <ul> <li>hostname can be either the device hostname or id</li> </ul> <p>Input:</p> <p>-</p> <p>Example:</p> <pre><code>curl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/devices/localhost/graphs\n</code></pre> <p>Output:</p> <pre><code>{\n    \"status\": \"ok\",\n    \"message\": \"\",\n    \"count\": 3,\n    \"graphs\": [\n        {\n            \"desc\": \"Poller Time\",\n            \"name\": \"device_poller_perf\"\n        },\n        {\n            \"desc\": \"Ping Response\",\n            \"name\": \"device_ping_perf\"\n        },\n        {\n            \"desc\": \"System Uptime\",\n            \"name\": \"uptime\"\n        }\n    ]\n}\n</code></pre>"},{"location":"API/Devices/#list_available_health_graphs","title":"<code>list_available_health_graphs</code>","text":"<p>This function allows to do three things:</p> <ul> <li>Get a list of overall health graphs available.</li> <li>Get a list of health graphs based on provided class.</li> <li>Get the health sensors information based on ID.</li> </ul> <p>Route: <code>/api/v0/devices/:hostname/health(/:type)(/:sensor_id)</code></p> <ul> <li>hostname can be either the device hostname or id</li> <li>type (optional) is health type / sensor class</li> <li>sensor_id (optional) is the sensor id to retrieve specific information.</li> </ul> <p>Input:</p> <p>-</p> <p>Example:</p> <pre><code>curl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/devices/localhost/health\n</code></pre> <p>Output:</p> <pre><code>{\n    \"status\": \"ok\",\n    \"message\": \"\",\n    \"count\": 2,\n    \"graphs\": [\n        {\n            \"desc\": \"Airflow\",\n            \"name\": \"device_airflow\"\n        },\n        {\n            \"desc\": \"Voltage\",\n            \"name\": \"device_voltage\"\n        }\n    ]\n}\n</code></pre> <p>Example:</p> <pre><code>curl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/devices/localhost/health/device_voltage\n</code></pre> <p>Output:</p> <pre><code>{\n    \"status\": \"ok\",\n    \"message\": \"\",\n    \"count\": 2,\n    \"graphs\": [\n        {\n            \"sensor_id\": \"1\",\n            \"desc\": \"Input Feed A\"\n        },\n        {\n            \"sensor_id\": \"2\",\n            \"desc\": \"Output Feed\"\n        }\n    ]\n}\n</code></pre> <p>Example:</p> <pre><code>curl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/devices/localhost/health/device_voltage/1\n</code></pre> <p>Output:</p> <pre><code>{\n    \"status\": \"ok\",\n    \"message\": \"\",\n    \"count\": 1,\n    \"graphs\": [\n        {\n            \"sensor_id\": \"1\",\n            \"sensor_deleted\": \"0\",\n            \"sensor_class\": \"voltage\",\n            \"device_id\": \"1\",\n            \"poller_type\": \"snmp\",\n            \"sensor_oid\": \".1.3.6.1.4.1.318.1.1.27.1.1.0\",\n            \"sensor_index\": \"1\",\n            \"sensor_type\": \"apc\",\n            \"sensor_descr\": \"Input\",\n            \"sensor_divisor\": \"1\",\n            \"sensor_multiplier\": \"1\",\n            \"sensor_current\": \"1\",\n            \"sensor_limit\": \"1.15\",\n            \"sensor_limit_warn\": null,\n            \"sensor_limit_low\": \"0.85\",\n            \"sensor_limit_low_warn\": null,\n            \"sensor_alert\": \"1\",\n            \"sensor_custom\": \"No\",\n            \"entPhysicalIndex\": null,\n            \"entPhysicalIndex_measured\": null,\n            \"lastupdate\": \"2017-01-13 13:50:26\",\n            \"sensor_prev\": \"1\"\n        }\n    ]\n}\n</code></pre>"},{"location":"API/Devices/#list_available_wireless_graphs","title":"<code>list_available_wireless_graphs</code>","text":"<p>This function allows to do three things:</p> <ul> <li>Get a list of overall wireless graphs available.</li> <li>Get a list of wireless graphs based on provided class.</li> <li>Get the wireless sensors information based on ID.</li> </ul> <p>Route: <code>/api/v0/devices/:hostname/wireless(/:type)(/:sensor_id)</code></p> <ul> <li>hostname can be either the device hostname or id</li> <li>type (optional) is wireless type / wireless class</li> <li>sensor_id (optional) is the sensor id to retrieve specific information.</li> </ul> <p>Input:</p> <p>-</p> <p>Example:</p> <pre><code>curl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/devices/localhost/wireless\n</code></pre> <p>Output:</p> <pre><code>{\n    \"status\": \"ok\",\n    \"graphs\": [\n        {\n            \"desc\": \"Ccq\",\n            \"name\": \"device_wireless_ccq\"\n        },\n        {\n            \"desc\": \"Clients\",\n            \"name\": \"device_wireless_clients\"\n        }\n    ],\n    \"count\": 2\n}\n</code></pre> <p>Example:</p> <pre><code>curl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/devices/localhost/wireless/device_wireless_ccq\n</code></pre> <p>Output:</p> <pre><code>{\n    \"status\": \"ok\",\n    \"graphs\": [\n        {\n            \"sensor_id\": \"791\",\n            \"desc\": \"SSID: bast (ng)\"\n        },\n        {\n            \"sensor_id\": \"792\",\n            \"desc\": \"SSID: bast (na)\"\n        }\n    ],\n    \"count\": 2\n}\n</code></pre> <p>Example:</p> <pre><code>curl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/devices/localhost/health/device_wireless_ccq/1\n</code></pre> <p>Output:</p> <pre><code>{\n    \"status\": \"ok\",\n    \"graphs\": [\n        {\n            \"sensor_id\": \"791\",\n            \"sensor_deleted\": \"0\",\n            \"sensor_class\": \"ccq\",\n            \"device_id\": \"381\",\n            \"sensor_index\": \"0\",\n            \"sensor_type\": \"unifi\",\n            \"sensor_descr\": \"SSID: bast (ng)\",\n            \"sensor_divisor\": \"10\",\n            \"sensor_multiplier\": \"1\",\n            \"sensor_aggregator\": \"sum\",\n            \"sensor_current\": \"100\",\n            \"sensor_prev\": \"100\",\n            \"sensor_limit\": null,\n            \"sensor_limit_warn\": null,\n            \"sensor_limit_low\": null,\n            \"sensor_limit_low_warn\": null,\n            \"sensor_alert\": \"1\",\n            \"sensor_custom\": \"No\",\n            \"entPhysicalIndex\": null,\n            \"entPhysicalIndex_measured\": null,\n            \"lastupdate\": \"2017-12-06 21:26:29\",\n            \"sensor_oids\": \"[\\\".1.3.6.1.4.1.41112.1.6.1.2.1.3.0\\\"]\",\n            \"access_point_id\": null\n        }\n    ],\n    \"count\": 1\n}\n</code></pre>"},{"location":"API/Devices/#get_health_graph","title":"<code>get_health_graph</code>","text":"<p>Get a particular health class graph for a device, if you provide a sensor_id as well then a single sensor graph will be provided. If no sensor_id value is provided then you will be sent a stacked sensor graph.</p> <p>Route: <code>/api/v0/devices/:hostname/graphs/health/:type(/:sensor_id)</code></p> <ul> <li>hostname can be either the device hostname or id</li> <li>type is the name of the health graph as returned by <code>list_available_health_graphs</code></li> <li>sensor_id (optional) restricts the graph to return a particular health sensor graph.</li> </ul> <p>Input:</p> <p>-</p> <p>Example:</p> <pre><code>curl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/devices/localhost/graphs/health/device_voltage\n</code></pre> <p>Output:</p> <p>Output is a stacked graph for the health type provided.</p> <p>Example:</p> <pre><code>curl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/devices/localhost/graphs/health/device_voltage/1\n</code></pre> <p>Output:</p> <p>Output is the graph of the particular health type sensor provided.</p>"},{"location":"API/Devices/#get_wireless_graph","title":"<code>get_wireless_graph</code>","text":"<p>Get a particular wireless class graph for a device, if you provide a sensor_id as well then a single sensor graph will be provided. If no sensor_id value is provided then you will be sent a stacked wireless graph.</p> <p>Route: <code>/api/v0/devices/:hostname/graphs/wireless/:type(/:sensor_id)</code></p> <ul> <li>hostname can be either the device hostname or id</li> <li>type is the name of the wireless graph as returned by <code>list_available_wireless_graphs</code></li> <li>sensor_id (optional) restricts the graph to return a particular   wireless sensor graph.</li> </ul> <p>Input:</p> <p>-</p> <p>Example:</p> <pre><code>curl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/devices/localhost/graphs/wireless/device_wireless_ccq\n</code></pre> <p>Output:</p> <p>Output is a stacked graph for the wireless type provided.</p> <p>Example:</p> <pre><code>curl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/devices/localhost/graphs/wireless/device_wireless_ccq/1\n</code></pre> <p>Output:</p> <p>Output is the graph of the particular wireless type sensor provided.</p>"},{"location":"API/Devices/#get_graph_generic_by_hostname","title":"<code>get_graph_generic_by_hostname</code>","text":"<p>Get a specific graph for a device, this does not include ports.</p> <p>Route: <code>/api/v0/devices/:hostname/:type</code></p> <ul> <li>hostname can be either the device hostname or id</li> <li>type is the type of graph you want, use   [<code>get_graphs</code>](#get_graphs to see the graphs   available. Defaults to device uptime.</li> </ul> <p>Input:</p> <ul> <li>from: This is the date you would like the graph to start - See   http://oss.oetiker.ch/rrdtool/doc/rrdgraph.en.html   for more information.</li> <li>to: This is the date you would like the graph to end - See   http://oss.oetiker.ch/rrdtool/doc/rrdgraph.en.html   for more information.</li> <li>width: The graph width, defaults to 1075.</li> <li>height: The graph height, defaults to 300.</li> <li>output: Set how the graph should be outputted (base64, display), defaults to display.</li> </ul> <p>Example:</p> <pre><code>curl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/devices/localhost/device_poller_perf\n</code></pre> <p>Output:</p> <p>Output is an image.</p>"},{"location":"API/Devices/#get_graph_by_service","title":"<code>get_graph_by_service</code>","text":"<p>Get the graph for a service</p> <p>Route: <code>/api/v0/devices/:hostname/services/:service_id/graphs/:datasource</code></p> <ul> <li>hostname can be either the device hostname or id</li> <li>service id</li> <li>datasource is the name of the service datasource</li> </ul> <p>Input:</p> <ul> <li>from: This is the date you would like the graph to start - See   http://oss.oetiker.ch/rrdtool/doc/rrdgraph.en.html   for more information.</li> <li>to: This is the date you would like the graph to end - See   http://oss.oetiker.ch/rrdtool/doc/rrdgraph.en.html   for more information.</li> <li>width: The graph width, defaults to 1075.</li> <li>height: The graph height, defaults to 300.</li> </ul> <p>Example:</p> <pre><code>curl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/services/localhost/35/graphs/loss\n</code></pre> <p>Output:</p> <p>Output is an image.</p>"},{"location":"API/Devices/#get_port_graphs","title":"<code>get_port_graphs</code>","text":"<p>Get a list of ports for a particular device.</p> <p>Route: <code>/api/v0/devices/:hostname/ports</code></p> <ul> <li>hostname can be either the device hostname or id</li> </ul> <p>Input:</p> <ul> <li>columns: Comma separated list of columns you want returned.</li> </ul> <p>Example:</p> <pre><code>curl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/devices/localhost/ports\n</code></pre> <p>Output:</p> <pre><code>{\n    \"status\": \"ok\",\n    \"message\": \"\",\n    \"count\": 3,\n    \"ports\": [\n        {\n            \"ifName\": \"lo\"\n        },\n        {\n            \"ifName\": \"eth0\"\n        },\n        {\n            \"ifName\": \"eth1\"\n        }\n    ]\n}\n</code></pre>"},{"location":"API/Devices/#get_device_fdb","title":"<code>get_device_fdb</code>","text":"<p>Get a list of FDB entries associated with a device.</p> <p>Route: <code>/api/v0/devices/:hostname/fdb</code></p> <ul> <li>hostname can be either the device hostname or id</li> </ul> <p>Example:</p> <pre><code>curl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/devices/localhost/fdb\n</code></pre> <p>Output:</p> <pre><code>{\n    \"status\": \"ok\",\n    \"ports_fdb\": {\n        \"ports_fdb_id\": 10,\n        \"port_id\": 10000,\n        \"mac_address\": \"1aaa2bbb3ccc\",\n        \"vlan_id\": 20000,\n        \"device_id\": 1,\n        \"created_at\": \"2019-01-1 01:01:01\",\n        \"updated_at\": \"2019-01-1 01:01:01\"\n    }\n}\n</code></pre>"},{"location":"API/Devices/#get_device_nac","title":"<code>get_device_nac</code>","text":"<p>Get a list of NAC entries associated with a device.</p> <p>Route: <code>/api/v0/devices/:hostname/nac</code></p> <ul> <li>hostname can be either the device hostname or id</li> </ul> <p>Example:</p> <pre><code>curl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/devices/localhost/nac\n</code></pre> <p>Output:</p> <pre><code>{\n    \"status\": \"ok\",\n    \"ports_nac\": [\n        {\n            \"ports_nac_id\": 1,\n            \"auth_id\": \"0000000000000AAAABBBB8CC\",\n            \"device_id\": 3,\n            \"port_id\": 6,\n            \"domain\": \"data\",\n            \"username\": \"hostname.librenms.org\",\n            \"mac_address\": \"1aaa2bbb3ccc\",\n            \"ip_address\": \"192.0.2.2\",\n            \"host_mode\": \"singleHost\",\n            \"authz_status\": \"authorizationSuccess\",\n            \"authz_by\": \"Authentication Server\",\n            \"authc_status\": \"authcSuccess\",\n            \"method\": \"dot1x\",\n            \"timeout\": \"0\",\n            \"time_left\": \"0\",\n            \"vlan\": 0,\n            \"time_elapsed\": null,\n            \"created_at\": \"2025-05-08T08:55:06.000000Z\",\n            \"updated_at\": \"2025-05-08T08:55:06.000000Z\",\n            \"historical\": 0\n        }\n    ]\n}\n</code></pre>"},{"location":"API/Devices/#get_device_ip_addresses","title":"<code>get_device_ip_addresses</code>","text":"<p>Get a list of IP addresses (v4 and v6) associated with a device.</p> <p>Route: <code>/api/v0/devices/:hostname/ip</code></p> <ul> <li>hostname can be either the device hostname or id</li> </ul> <p>Example:</p> <pre><code>curl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/devices/localhost/ip\n</code></pre> <p>Output:</p> <pre><code>{\n    \"status\": \"ok\",\n    \"message\": \"\",\n    \"addresses\": [\n        {\n          \"ipv4_address_id\": \"290\",\n          \"ipv4_address\": \"192.168.99.292\",\n          \"ipv4_prefixlen\": \"30\",\n          \"ipv4_network_id\": \"247\",\n          \"port_id\": \"323\",\n          \"context_name\": \"\"\n        }\n    ]\n}\n</code></pre>"},{"location":"API/Devices/#get_port_stack","title":"<code>get_port_stack</code>","text":"<p>Get a list of port mappings for a device.  This is useful for showing physical ports that are in a virtual port-channel.</p> <p>Route: <code>/api/v0/devices/:hostname/port_stack</code></p> <ul> <li>hostname can be either the device hostname or id</li> </ul> <p>Input:</p> <ul> <li>valid_mappings: Filter the result by only showing valid mappings   (\"0\" values not shown).</li> </ul> <p>Example:</p> <pre><code>curl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/devices/localhost/port_stack?valid_mappings\n</code></pre> <p>Output:</p> <pre><code>{\n  \"status\": \"ok\",\n  \"message\": \"\",\n  \"count\": 2,\n  \"mappings\": [\n    {\n      \"device_id\": \"3742\",\n      \"port_id_high\": \"1001000\",\n      \"port_id_low\": \"51001\",\n      \"ifStackStatus\": \"active\"\n    },\n    {\n      \"device_id\": \"3742\",\n      \"port_id_high\": \"1001000\",\n      \"port_id_low\": \"52001\",\n      \"ifStackStatus\": \"active\"\n    }\n  ]\n}\n</code></pre>"},{"location":"API/Devices/#get_device_transceivers","title":"<code>get_device_transceivers</code>","text":"<p>Get a list of FDB entries associated with a device.</p> <p>Route: <code>/api/v0/devices/:hostname/transceivers</code></p> <ul> <li>hostname can be either the device hostname or id</li> </ul> <p>Example:</p> <pre><code>curl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/devices/localhost/transceivers\n</code></pre> <p>Output:</p> <pre><code>{\n    \"status\": \"ok\",\n    \"transceivers\": [\n        {\n            \"id\": 12,\n            \"created_at\": \"2024-06-26T23:46:06.000000Z\",\n            \"updated_at\": \"2024-06-26T23:46:57.000000Z\",\n            \"device_id\": 3138,\n            \"port_id\": 50735,\n            \"index\": \"50\",\n            \"type\": \"10G_BASE_LR_SFP\",\n            \"vendor\": \"FS\",\n            \"oui\": \"00 00 00\",\n            \"model\": null,\n            \"revision\": \"\",\n            \"serial\": \"G000999AA\",\n            \"date\": null,\n            \"ddm\": true,\n            \"encoding\": null,\n            \"cable\": \"SM\",\n            \"distance\": 20000,\n            \"wavelength\": 1330,\n            \"connector\": \"LC\",\n            \"channels\": 1\n        },\n        {\n            \"id\": 13,\n            \"created_at\": \"2024-06-26T23:46:06.000000Z\",\n            \"updated_at\": \"2024-06-27T00:00:07.000000Z\",\n            \"device_id\": 3138,\n            \"port_id\": 50736,\n            \"index\": \"51\",\n            \"type\": \"10G_BASE_SR_SFP\",\n            \"vendor\": \"HPE\",\n            \"oui\": \"64 9D 99\",\n            \"model\": null,\n            \"revision\": \"1\",\n            \"serial\": \"AAAA0000AAA\",\n            \"date\": null,\n            \"ddm\": true,\n            \"encoding\": null,\n            \"cable\": \"SM\",\n            \"distance\": 300,\n            \"wavelength\": 850,\n            \"connector\": \"LC\",\n            \"channels\": 1\n        }\n    ]\n}\n</code></pre>"},{"location":"API/Devices/#get_components","title":"<code>get_components</code>","text":"<p>Get a list of components for a particular device.</p> <p>Route: <code>/api/v0/devices/:hostname/components</code></p> <ul> <li>hostname can be either the device hostname or id</li> </ul> <p>Input:</p> <ul> <li>type: Filter the result by type (Equals).</li> <li>id: Filter the result by id (Equals).</li> <li>label: Filter the result by label (Contains).</li> <li>status: Filter the result by status (Equals).</li> <li>disabled: Filter the result by disabled (Equals).</li> <li>ignore: Filter the result by ignore (Equals).</li> </ul> <p>Example:</p> <pre><code>curl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/devices/localhost/components\n</code></pre> <p>Output:</p> <pre><code>{\n    \"status\": \"ok\",\n    \"message\": \"\",\n    \"count\": 3,\n    \"components\": {\n        \"2\": {\n            \"TestAttribute-1\": \"Value1\",\n            \"TestAttribute-2\": \"Value2\",\n            \"TestAttribute-3\": \"Value3\",\n            \"type\": \"TestComponent-1\",\n            \"label\": \"This is a really cool blue component\",\n            \"status\": \"1\",\n            \"ignore\": \"0\",\n            \"disabled\": \"0\"\n        },\n        \"20\": {\n            \"TestAttribute-1\": \"Value4\",\n            \"TestAttribute-2\": \"Value5\",\n            \"TestAttribute-3\": \"Value6\",\n            \"type\": \"TestComponent-1\",\n            \"label\": \"This is a really cool red component\",\n            \"status\": \"1\",\n            \"ignore\": \"0\",\n            \"disabled\": \"0\"\n        },\n        \"27\": {\n            \"TestAttribute-1\": \"Value7\",\n            \"TestAttribute-2\": \"Value8\",\n            \"TestAttribute-3\": \"Value9\",\n            \"type\": \"TestComponent-2\",\n            \"label\": \"This is a really cool yellow widget\",\n            \"status\": \"1\",\n            \"ignore\": \"0\",\n            \"disabled\": \"0\"\n        }\n    }\n}\n</code></pre>"},{"location":"API/Devices/#add_components","title":"<code>add_components</code>","text":"<p>Create a new component of a type on a particular device.</p> <p>Route: <code>/api/v0/devices/:hostname/components/:type</code></p> <ul> <li>hostname can be either the device hostname or id</li> <li>type is the type of component to add</li> </ul> <p>Example:</p> <pre><code>curl -X POST -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/devices/localhost/components/APITEST\n</code></pre> <p>Output:</p> <pre><code>{\n    \"status\": \"ok\",\n    \"message\": \"\",\n    \"count\": 1,\n    \"components\": {\n        \"4459\": {\n            \"type\": \"APITEST\",\n            \"label\": \"\",\n            \"status\": 1,\n            \"ignore\": 0,\n            \"disabled\": 0,\n            \"error\": \"\"\n        }\n    }\n}\n</code></pre>"},{"location":"API/Devices/#edit_components","title":"<code>edit_components</code>","text":"<p>Edit an existing component on a particular device.</p> <p>Route: <code>/api/v0/devices/:hostname/components</code></p> <ul> <li>hostname can be either the device hostname or id</li> </ul> <p>In this example we set the label and add a new field: TestField:</p> <pre><code>curl -X PUT -d '{\"4459\": {\"type\": \"APITEST\",\"label\": \"This is a test label\",\"status\": 1,\"ignore\": 0,\"disabled\": 0,\"error\": \"\",\"TestField\": \"TestData\"}}' -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/devices/localhost/components\n</code></pre> <p>Output:</p> <pre><code>{\n    \"status\": \"ok\",\n    \"message\": \"\",\n    \"count\": 1\n}\n</code></pre> <p>Just take the JSON array from add_components or edit_components, edit as you wish and submit it back to edit components.</p>"},{"location":"API/Devices/#delete_components","title":"<code>delete_components</code>","text":"<p>Delete an existing component on a particular device.</p> <p>Route: <code>/api/v0/devices/:hostname/components/:component</code></p> <ul> <li>hostname can be either the device hostname or id</li> <li>component is the component ID to be deleted.</li> </ul> <p>Example:</p> <pre><code>curl -X DELETE -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/devices/localhost/components/4459\n</code></pre> <p>Output:</p> <pre><code>{\n    \"status\": \"ok\",\n    \"message\": \"\"\n}\n</code></pre>"},{"location":"API/Devices/#get_port_stats_by_port_hostname","title":"<code>get_port_stats_by_port_hostname</code>","text":"<p>Get information about a particular port for a device.</p> <p>Route: <code>/api/v0/devices/:hostname/ports/:ifname</code></p> <ul> <li>hostname can be either the device hostname or id</li> <li>ifname can be any of the interface names for the device which can be   obtained using   <code>get_port_graphs</code>. Please ensure that   the ifname is urlencoded if it needs to be (i.e Gi0/1/0 would need to be urlencoded.</li> </ul> <p>Input:</p> <ul> <li>columns: Comma separated list of columns you want returned.</li> </ul> <p>Example:</p> <pre><code>curl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/devices/localhost/ports/eth0\n</code></pre> <p>Output:</p> <pre><code>{\n \"status\": \"ok\",\n \"port\": {\n  \"port_id\": \"2\",\n  \"device_id\": \"1\",\n  ...\n  \"poll_prev\": \"1418412902\",\n  \"poll_period\": \"300\"\n }\n}\n</code></pre>"},{"location":"API/Devices/#get_graph_by_port_hostname","title":"<code>get_graph_by_port_hostname</code>","text":"<p>Get a graph of a port for a particular device.</p> <p>Route: <code>/api/v0/devices/:hostname/ports/:ifname/:type</code></p> <ul> <li>hostname can be either the device hostname or id</li> <li>ifname can be any of the interface names for the device which can be   obtained using   <code>get_port_graphs</code>. Please ensure that   the ifname is urlencoded if it needs to be (i.e Gi0/1/0 would need   to be urlencoded.</li> <li>type is the port type you want the graph for, you can request a list   of ports for a device with <code>get_port_graphs</code>.</li> </ul> <p>Input:</p> <ul> <li>from: This is the date you would like the graph to start - See   http://oss.oetiker.ch/rrdtool/doc/rrdgraph.en.html   for more information.</li> <li>to: This is the date you would like the graph to end - See   http://oss.oetiker.ch/rrdtool/doc/rrdgraph.en.html   for more information.</li> <li>width: The graph width, defaults to 1075.</li> <li>height: The graph height, defaults to 300.</li> <li>ifDescr: If this is set to true then we will use ifDescr to lookup   the port instead of ifName. Pass the ifDescr value you want to   search as you would ifName.</li> </ul> <p>Example:</p> <pre><code>curl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/devices/localhost/ports/eth0/port_bits\n</code></pre> <p>Output:</p> <p>Output is an image.</p>"},{"location":"API/Devices/#list_sensors","title":"<code>list_sensors</code>","text":"<p>Get a list of all Sensors.</p> <p>Route: <code>/api/v0/resources/sensors</code></p> <p>Input:</p> <p>-</p> <p>Example:</p> <pre><code>curl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/resources/sensors\n</code></pre> <p>Output:</p> <pre><code>{\n    \"status\": \"ok\",\n    \"sensors\": [\n        {\n            \"sensor_id\": 218810,\n            \"sensor_deleted\": 0,\n            \"sensor_class\": \"dbm\",\n            \"device_id\": 136,\n            \"poller_type\": \"snmp\",\n            \"sensor_oid\": \".1.3.6.1.4.1.2636.3.60.1.1.1.1.7.919\",\n            \"sensor_index\": \"tx-919\",\n            \"sensor_type\": \"junos\",\n            \"sensor_descr\": \"xe-2/1/4 Tx Power\",\n            \"group\": null,\n            \"sensor_divisor\": 100,\n            \"sensor_multiplier\": 1,\n            \"sensor_current\": -1.81,\n            \"sensor_limit\": 2,\n            \"sensor_limit_warn\": 0.5,\n            \"sensor_limit_low\": -9.7,\n            \"sensor_limit_low_warn\": -8.21,\n            \"sensor_alert\": 1,\n            \"sensor_custom\": \"No\",\n            \"entPhysicalIndex\": \"919\",\n            \"entPhysicalIndex_measured\": \"ports\",\n            \"lastupdate\": \"2019-02-18 02:47:09\",\n            \"sensor_prev\": -1.77,\n            \"user_func\": null\n        },\n        ...\n    ],\n    \"count\": 100\n}\n</code></pre>"},{"location":"API/Devices/#list_devices","title":"<code>list_devices</code>","text":"<p>Return a list of devices.</p> <p>Route: <code>/api/v0/devices</code></p> <p>Input:</p> <ul> <li>order: How to order the output, default is by hostname. Can be   prepended by DESC or ASC to change the order.</li> <li>type: can be one of the following to filter or search by:<ul> <li>all: All devices</li> <li>active: Only not ignored and not disabled devices</li> <li>ignored: Only ignored devices</li> <li>up: Only devices that are up</li> <li>down: Only devices that are down</li> <li>disabled: Disabled devices</li> <li>os: search by os type</li> <li>mac: search by mac address</li> <li>ipv4: search by IPv4 address</li> <li>ipv6: search by IPv6 address (compressed or uncompressed)</li> <li>location: search by location</li> <li>location_id: search by location_id</li> <li>hostname: search by hostname</li> <li>sysName: search by sysName</li> <li>display: search by display name</li> <li>device_id: exact match by device-id</li> <li>type: search by device type</li> <li>serial: Serial number of the device (wildcard)</li> <li>version: Software version of the device (wildcard)</li> <li>hardware: The model of the device (wildcard)</li> <li>features: Software license features (wildcard)</li> </ul> </li> <li>query: If searching by, then this will be used as the input.</li> </ul> <p>Example:</p> <pre><code>curl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/devices?order=hostname%20DESC&amp;type=down\n</code></pre> <p>Output:</p> <pre><code>{\n \"status\": \"ok\",\n \"count\": 1,\n \"devices\": [\n  {\n   \"device_id\": \"1\",\n   \"hostname\": \"localhost\",\n   ...\n   \"serial\": null,\n   \"icon\": null\n  }\n ]\n}\n</code></pre> <p>Example:</p> <pre><code>curl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/devices?type=mac&amp;query=00000c9ff013\n</code></pre> <p>Output:</p> <pre><code>{\n \"status\": \"ok\",\n \"count\": 1,\n \"devices\": [\n  {\n   \"device_id\": \"1\",\n   \"hostname\": \"localhost\",\n   ...\n   \"serial\": null,\n   \"icon\": null\n  }\n ]\n}\n</code></pre>"},{"location":"API/Devices/#device_under_maintenance","title":"<code>device_under_maintenance</code>","text":"<p>Get the current maintenance status of a device.</p> <p>Route: <code>/api/v0/devices/:hostname/maintenance</code></p> <p>Input:</p> <p>-</p> <p>Example:</p> <pre><code>curl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/devices/localhost/maintenance\n</code></pre> <p>Output:</p> <pre><code>{\n    \"status\": \"ok\",\n    \"is_under_maintenance\": true\n}\n</code></pre>"},{"location":"API/Devices/#maintenance_device","title":"<code>maintenance_device</code>","text":"<p>Set a device into maintenance mode.</p> <p>Route: <code>/api/v0/devices/:hostname/maintenance</code></p> <p>Input (JSON):</p> <ul> <li><code>title</code>: optional -  Some title for the Maintenance   Will be replaced with hostname if omitted</li> <li><code>notes</code>: optional -  Some description for the Maintenance   Will also be added to device notes if user prefs \"Add schedule notes to devices notes\" is set</li> <li><code>start</code>: optional - start time of Maintenance in full format <code>Y-m-d H:i:00</code>   eg: 2022-08-01 22:45:00   Current system time <code>now()</code> will be used if omitted</li> <li><code>duration</code>: required - Duration of Maintenance in format <code>H:i</code> / <code>Hrs:Mins</code>   eg: 02:00</li> </ul> <p>Example with start time:</p> <pre><code>curl -H 'X-Auth-Token: YOURAPITOKENHERE' \\\n  -X POST https://librenms.org/api/v0/devices/localhost/maintenance/ \\\n  --data-raw '\n \"title\":\"Device Maintenance\",\n  \"notes\":\"A 2 hour Maintenance triggered via API with start time\",\n  \"start\":\"2022-08-01 08:00:00\",\n  \"duration\":\"2:00\"\n}\n'\n</code></pre> <p>Output:</p> <pre><code>{\n    \"status\": \"ok\",\n    \"message\": \"Device localhost (1) will begin maintenance mode at 2022-08-01 22:45:00 for 2:00h\"\n}\n</code></pre> <p>Example with no start time:</p> <pre><code>curl -H 'X-Auth-Token: YOURAPITOKENHERE' \\\n  -X POST https://librenms.org/api/v0/devices/localhost/maintenance/ \\\n  --data-raw '\n \"title\":\"Device Maintenance\",\n  \"notes\":\"A 2 hour Maintenance triggered via API with no start time\",\n  \"duration\":\"2:00\"\n}\n'\n</code></pre> <p>Output:</p> <pre><code>{\n    \"status\": \"ok\",\n    \"message\": \"Device localhost (1) moved into maintenance mode for 2:00h\"\n}\n</code></pre>"},{"location":"API/Devices/#add_device","title":"<code>add_device</code>","text":"<p>Add a new device.  Most fields are optional. You may omit snmp credentials to attempt each system credential in order. See snmp.version, snmp.community, and snmp.v3</p> <p>To guarantee device is added, use force_add. This will skip checks  for duplicate device and snmp reachability, but not duplicate hostname.</p> <p>Route: <code>/api/v0/devices</code></p> <p>Input (JSON):</p> <p>Fields:</p> <ul> <li>hostname (required): device hostname or IP</li> <li>display: A string to display as the name of this device, defaults to    hostname (or device_display_default setting). May be a simple   template using replacements: {{ $hostname }}, {{ $sysName }},   {{ $sysName_fallback }}, {{ $ip }}</li> <li>snmpver: SNMP version to use, v1, v2c or v3. During checks detection order is v2c,v3,v1</li> <li>port: SNMP port (defaults to port defined in config).</li> <li>transport: SNMP protocol (udp,tcp,udp6,tcp6) Defaults to transport defined in config.</li> <li>port_association_mode: method to identify ports: ifIndex (default), ifName, ifDescr, ifAlias</li> <li>poller_group: This is the poller_group id used for distributed poller setup. Defaults to 0.</li> <li>location or location_id: set the location by text or location id</li> <li>override_sysLocation: force use of the location/location_id: and not the value returned by sysLocation</li> </ul> <p>Options:</p> <ul> <li>force_add: Skip all checks, credentials are required. Add the device as given directly to the database.</li> <li>ping_fallback: if snmp checks fail, add the device as ping only instead of failing</li> </ul> <p>SNMP v1 or v2c credentials:</p> <ul> <li>community: Required for SNMP v1 or v2c.</li> </ul> <p>SNMP v3 credentials:</p> <ul> <li>authlevel: SNMP authlevel (noAuthNoPriv, authNoPriv, authPriv).</li> <li>authname: SNMP Auth username</li> <li>authpass: SNMP Auth password</li> <li>authalgo: SNMP Auth algorithm (MD5, SHA) (SHA-224, SHA-256, SHA-384, SHA-512 if supported by your server)</li> <li>cryptopass: SNMP Crypto Password</li> <li>cryptoalgo: SNMP Crypto algorithm (AES, DES)</li> </ul> <p>For ICMP only:</p> <ul> <li>snmp_disable: set to true for ICMP only. Disables SNMP checks and polling.</li> <li>os: OS short name for the device (defaults to ping).</li> <li>sysName: sysName for the device.</li> <li>hardware: Device hardware.</li> </ul> <p>Example:</p> <pre><code>curl -X POST -d '{\"hostname\":\"localhost.localdomain\",\"version\":\"v1\",\"community\":\"public\"}' -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/devices\n</code></pre> <p>Output:</p> <pre><code>{\n    \"status\": \"ok\",\n    \"message\": \"Device localhost.localdomain (57) has been added successfully\",\n    \"devices\": [\n        {\n            \"device_id\": \"57\",\n            \"hostname\": \"localhost\",\n            ...\n            \"serial\": null,\n            \"icon\": null\n        }\n}\n</code></pre>"},{"location":"API/Devices/#list_oxidized","title":"<code>list_oxidized</code>","text":"<p>List devices for use with Oxidized. If you have group support enabled then a group will also be returned based on your config.</p> <p>LibreNMS will automatically map the OS to the Oxidized model name if they don't match.</p> <p>Route: <code>/api/v0/oxidized(/:hostname)</code></p> <p>Input (JSON):</p> <p>-</p> <p>Examples:</p> <pre><code>curl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/oxidized\n</code></pre> <p>Output:</p> <pre><code>[\n    {\n        \"hostname\": \"localhost\",\n        \"os\": \"linux\"\n    },\n    {\n        \"hostname\": \"otherserver\",\n        \"os\": \"linux\"\n    }\n]\n</code></pre>"},{"location":"API/Devices/#update_device_field","title":"<code>update_device_field</code>","text":"<p>Update devices field in the database.</p> <p>Route: <code>/api/v0/devices/:hostname</code></p> <ul> <li>hostname can be either the device hostname or id</li> </ul> <p>Input (JSON):</p> <ul> <li>field: The column name within the database (can be an array of fields)</li> <li>data: The data to update the column with (can be an array of data))</li> </ul> <p>Examples:</p> <pre><code>curl -X PATCH -d '{\"field\": \"notes\", \"data\": \"This server should be kept online\"}' -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/devices/localhost\n</code></pre> <p>Output:</p> <pre><code>[\n    {\n        \"status\": \"ok\",\n        \"message\": \"Device notes has been updated\"\n    }\n]\n</code></pre>"},{"location":"API/Devices/#update_device_port_notes","title":"<code>update_device_port_notes</code>","text":"<p>Update a device port notes field in the devices_attrs database.</p> <p>Route: <code>/api/v0/devices/:hostname/port/:portid</code></p> <ul> <li>hostname can be either the device hostname or id</li> <li>portid needs to be the port unique id (int).</li> </ul> <p>Input (JSON): - notes: The string data to populate on the port notes field.</p> <p>Examples:</p> <pre><code>curl -X PATCH -d '{\"notes\": \"This port is in a scheduled maintenance with the provider.\"}' -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/devices/localhost/port/5\n</code></pre> <p>Output:</p> <pre><code>[\n    {\n        \"status\": \"ok\",\n        \"message\": \"Port notes field has been updated\"\n    }\n]\n</code></pre> <pre><code>curl -X PATCH -d '{\"field\": [\"notes\",\"purpose\"], \"data\": [\"This server should be kept online\", \"For serving web traffic\"]}' -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/devices/localhost\n</code></pre> <p>Output:</p> <pre><code>[\n    {\n        \"status\": \"ok\",\n        \"message\": \"Device fields have been updated\"\n    }\n]\n</code></pre>"},{"location":"API/Devices/#rename_device","title":"<code>rename_device</code>","text":"<p>Rename device.</p> <p>Route: <code>/api/v0/devices/:hostname/rename/:new_hostname</code></p> <ul> <li>hostname can be either the device hostname or id</li> </ul> <p>Input:</p> <p>-</p> <p>Examples:</p> <pre><code>curl -X PATCH  -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/devices/localhost/rename/localhost2\n</code></pre> <p>Output:</p> <pre><code>[\n    {\n        \"status\": \"ok\",\n        \"message\": \"Device has been renamed\"\n    }\n]\n</code></pre>"},{"location":"API/Devices/#get_device_groups","title":"<code>get_device_groups</code>","text":"<p>List the device groups that a device is matched on.</p> <p>Route: <code>/api/v0/devices/:hostname/groups</code></p> <ul> <li>hostname can be either the device hostname or id</li> </ul> <p>Input (JSON):</p> <p>-</p> <p>Examples:</p> <pre><code>curl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/devices/localhost/groups\n</code></pre> <p>Output:</p> <pre><code>[\n    {\n        \"status\": \"ok\",\n        \"message\": \"Found 1 device groups\",\n        \"count\": 1,\n        \"groups\": [\n        {\n            \"id\": \"1\",\n            \"name\": \"Testing\",\n            \"desc\": \"Testing\",\n            \"pattern\": \"%devices.status = \\\"1\\\" &amp;&amp;\"\n        }\n        ]\n    }\n]\n</code></pre>"},{"location":"API/Devices/#search_oxidized","title":"<code>search_oxidized</code>","text":"<p>search all oxidized device configs for a string.</p> <p>Route: <code>api/v0/oxidized/config/search/:searchstring</code></p> <ul> <li>searchstring is the specific string you would like to search for.</li> </ul> <p>Input:</p> <p>-</p> <p>Example: <pre><code>curl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/oxidized/config/search/vlan10\n</code></pre></p> <p>Output: <pre><code>{\n    \"status\": \"ok\",\n    \"nodes\": [\n        {\n            \"node\": \"asr9k.librenms.org\",\n            \"full_name\": \"cisco\\/ASR9K.Librenms.org\"\n        },\n        {\n            \"node\": \"ios.Librenms.org\",\n            \"full_name\": \"cisco\\/ios.Librenms.org\"\n        }\n    ],\n    \"count\": 2\n}\n</code></pre></p>"},{"location":"API/Devices/#get_oxidized_config","title":"<code>get_oxidized_config</code>","text":"<p>Returns a specific device's config from oxidized.</p> <p>Route: <code>api/v0/oxidized/config/:hostname</code></p> <ul> <li>hostname is the Hostname or IP of the device used when adding the device to librenms.</li> </ul> <p>Input:</p> <p>-</p> <p>Example: <pre><code>curl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/oxidized/config/router.corp.com\n</code></pre></p> <p>Output: <pre><code>{\n    \"status\": \"ok\",\n    \"config\": \"DEVICE CONFIG HERE\"\n}\n</code></pre></p>"},{"location":"API/Devices/#add_parents_to_host","title":"<code>add_parents_to_host</code>","text":"<p>Add one or more parents to a host.</p> <p>Route: <code>/api/v0/devices/:device/parents</code></p> <p>Input (JSON):</p> <ul> <li>parent_ids: one or more parent ids or hostnames</li> </ul> <p>Example: <pre><code>curl -X POST -d '{\"parent_ids\":\"15,16,17\"}' -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/devices/1/parents\n</code></pre></p> <p>Output: <pre><code>{\n    \"status\": \"ok\",\n    \"message\": \"Device dependencies have been saved\"\n}\n</code></pre></p>"},{"location":"API/Devices/#delete_parents_from_host","title":"<code>delete_parents_from_host</code>","text":"<p>Deletes some or all the parents from a host.</p> <p>Route: <code>/api/v0/devices/:device/parents</code></p> <p>Input (JSON):</p> <ul> <li>parent_ids: One or more parent ids or hostnames, if not specified deletes all parents from host.</li> </ul> <p>Example: <pre><code>curl -X DELETE -d '{\"parent_ids\":\"15,16,17\"}' -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/devices/1/parents\n</code></pre></p> <p>Output: <pre><code>{\n    \"status\": \"ok\",\n    \"message\": \"All device dependencies have been removed\"\n}\n</code></pre></p>"},{"location":"API/Devices/#list_parents_of_host","title":"<code>list_parents_of_host</code>","text":"<p>This is not a seperate API call.  Instead, you obtain the list of parents from <code>list_devices</code>.  See that entry point for more detailed information.</p> <p>Example:</p> <pre><code>curl -H 'X-Auth-Token: YOURAPITOKENHERE' 'http://librenms.org/api/v0/devices?type=device_id&amp;query=34'\n</code></pre> <p>Output:</p> <pre><code>{\n    \"status\": \"ok\",\n    \"devices\": [\n        {\n            ...\n            \"dependency_parent_id\": \"98,99\",\n            \"dependency_parent_hostname\": \"HOSTNAME1,HOSTNAME2\",\n            ...\n        }\n    ],\n    \"count\": 1\n}\n</code></pre>"},{"location":"API/Inventory/","title":"Inventory","text":""},{"location":"API/Inventory/#get_inventory","title":"<code>get_inventory</code>","text":"<p>Retrieve the inventory for a device. If you call this without any parameters then you will only get part of the inventory. This is because a lot of devices nest each component, for instance you may initially have the chassis, within this the ports - 1 being an sfp cage, then the sfp itself. The way this API call is designed is to enable a recursive lookup. The first call will retrieve the root entry, included within this response will be entPhysicalIndex, you can then call for entPhysicalContainedIn which will then return the next layer of results.  To retrieve all items together, see get_inventory_for_device.</p> <p>Route: <code>/api/v0/inventory/:hostname</code></p> <ul> <li>hostname can be either the device hostname or the device id</li> </ul> <p>Input:</p> <ul> <li>entPhysicalClass: This is used to restrict the class of the   inventory, for example you can specify chassis to only return items   in the inventory that are labelled as chassis.</li> <li>entPhysicalContainedIn: This is used to retrieve items within the   inventory assigned to a previous component, for example specifying   the chassis (entPhysicalIndex) will retrieve all items where the   chassis is the parent.</li> </ul> <p>Example:</p> <pre><code>curl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/inventory/localhost?entPhysicalContainedIn=65536\n</code></pre> <p>Output:</p> <pre><code>{\n    \"status\": \"ok\",\n    \"message\": \"\",\n    \"count\": 1,\n    \"inventory\": [\n        {\n            \"entPhysical_id\": \"2\",\n            \"device_id\": \"32\",\n            \"entPhysicalIndex\": \"262145\",\n            \"entPhysicalDescr\": \"Linux 3.3.5 ehci_hcd RB400 EHCI\",\n            \"entPhysicalClass\": \"unknown\",\n            \"entPhysicalName\": \"1:1\",\n            \"entPhysicalHardwareRev\": \"\",\n            \"entPhysicalFirmwareRev\": \"\",\n            \"entPhysicalSoftwareRev\": \"\",\n            \"entPhysicalAlias\": \"\",\n            \"entPhysicalAssetID\": \"\",\n            \"entPhysicalIsFRU\": \"false\",\n            \"entPhysicalModelName\": \"0x0002\",\n            \"entPhysicalVendorType\": \"zeroDotZero\",\n            \"entPhysicalSerialNum\": \"rb400_usb\",\n            \"entPhysicalContainedIn\": \"65536\",\n            \"entPhysicalParentRelPos\": \"-1\",\n            \"entPhysicalMfgName\": \"0x1d6b\",\n            \"ifIndex\": \"0\"\n        }\n    ]\n}\n</code></pre>"},{"location":"API/Inventory/#get_inventory_for_device","title":"<code>get_inventory_for_device</code>","text":"<p>Retrieve the flattened inventory for a device.  This retrieves all inventory items for a device regardless of their structure, and may be more useful for devices with with nested components.</p> <p>Route: <code>/api/v0/inventory/:hostname/all</code></p> <ul> <li>hostname can be either the device hostname or the device id</li> </ul> <p>Example:</p> <pre><code>curl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/inventory/localhost?entPhysicalContainedIn=65536\n</code></pre> <p>Output:</p> <pre><code>{\n    \"status\": \"ok\",\n    \"message\": \"\",\n    \"count\": 1,\n    \"inventory\": [\n        {\n            \"entPhysical_id\": \"2\",\n            \"device_id\": \"32\",\n            \"entPhysicalIndex\": \"262145\",\n            \"entPhysicalDescr\": \"Linux 3.3.5 ehci_hcd RB400 EHCI\",\n            \"entPhysicalClass\": \"unknown\",\n            \"entPhysicalName\": \"1:1\",\n            \"entPhysicalHardwareRev\": \"\",\n            \"entPhysicalFirmwareRev\": \"\",\n            \"entPhysicalSoftwareRev\": \"\",\n            \"entPhysicalAlias\": \"\",\n            \"entPhysicalAssetID\": \"\",\n            \"entPhysicalIsFRU\": \"false\",\n            \"entPhysicalModelName\": \"0x0002\",\n            \"entPhysicalVendorType\": \"zeroDotZero\",\n            \"entPhysicalSerialNum\": \"rb400_usb\",\n            \"entPhysicalContainedIn\": \"65536\",\n            \"entPhysicalParentRelPos\": \"-1\",\n            \"entPhysicalMfgName\": \"0x1d6b\",\n            \"ifIndex\": \"0\"\n        }\n    ]\n}\n</code></pre>"},{"location":"API/Locations/","title":"Locations","text":""},{"location":"API/Locations/#list_locations","title":"<code>list_locations</code>","text":"<p>Return a list of locations.</p> <p>Route: <code>/api/v0/resources/locations</code></p> <p>Input:</p> <p>-</p> <p>Example:</p> <pre><code>curl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/resources/locations\n</code></pre> <p>Output:</p> <pre><code>{\n    \"status\": \"ok\",\n    \"locations\": [\n        {\n            \"id\": \"1\",\n            \"location\": \"Example location, Example city, Example Country\",\n            \"lat\": \"-18.911436\",\n            \"lng\": \"47.517446\",\n            \"timestamp\": \"2017-04-01 02:40:05\"\n        },\n        ...\n    ],\n    \"count\": 100\n}\n</code></pre>"},{"location":"API/Locations/#add_location","title":"<code>add_location</code>","text":"<p>Add a new location</p> <p>Route: <code>/api/v0/locations/</code></p> <p>Input:</p> <ul> <li>location: name of the new location</li> <li>lat: latitude</li> <li>lng: longitude</li> <li>fixed_coordinates: 0 if updated from the device or 1 if the coordinate is fixed (default is fixed if lat and lng are valid)</li> </ul> <p>Example:</p> <pre><code>curl -X POST -d '{\"location\":\"Google\", \"lat\":\"37.4220041\",\"lng\":\"-122.0862462\"}' -H 'X-Auth-Token:YOUR-API-TOKEN' https://librenms.org/api/v0/locations\n</code></pre> <p>Output:</p> <pre><code>{\n    \"status\": \"ok\",\n    \"message\": \"Location added with id #45\"\n}\n</code></pre>"},{"location":"API/Locations/#delete_location","title":"<code>delete_location</code>","text":"<p>Deletes an existing location</p> <p>Route: <code>/api/v0/locations/:location</code></p> <ul> <li>location: name or id of the location to delete</li> </ul> <p>Example:</p> <pre><code>curl -X DELETE -H 'X-Auth-Token:YOUR-API-TOKEN' https://librenms.org/api/v0/locations/Google\n</code></pre> <p>Output:</p> <pre><code>{\n    \"status\": \"ok\",\n    \"message\": \"Location Google has been deleted successfully\"\n\n}\n</code></pre>"},{"location":"API/Locations/#edit_location","title":"<code>edit_location</code>","text":"<p>Edits a location</p> <p>Route: <code>/api/v0/locations/:location</code></p> <ul> <li>location: name or id of the location to edit</li> </ul> <p>Input:</p> <ul> <li>lat: latitude</li> <li>lng: longitude</li> </ul> <p>Example:</p> <pre><code>curl -X PATCH -d '{\"lng\":\"100.0862462\"}' -H 'X-Auth-Token:YOUR-API-TOKEN' https://librenms.org/api/v0/locations/Google\n</code></pre> <p>Output:</p> <pre><code>{\n    \"status\": \"ok\",\n    \"message\": \"Location updated successfully\"\n}\n</code></pre>"},{"location":"API/Locations/#get_location","title":"<code>get_location</code>","text":"<p>Gets a specific location</p> <p>Route: <code>/api/v0/location/:location</code></p> <ul> <li>location: name or id of the location to get</li> </ul> <p>Output:</p> <pre><code>{\n    \"status\": \"ok\",\n    \"get_location\": [\n        {\n            \"id\": 1,\n            \"location\": \"TEST\",\n            \"lat\": 00.000000,\n            \"lng\": 00.000000,\n            \"timestamp\": \"2023-01-01 00:00:00\",\n            \"fixed_coordinates\": 1\n        }\n    ],\n    \"count\": 1\n}\n</code></pre>"},{"location":"API/Logs/","title":"Logs","text":"<p>All the <code>list_*logs</code> calls are aliased to <code>list_logs</code>.</p> <p>Retrieve all logs or logs for a specific device.</p> <ul> <li>id or hostname is the specific device</li> </ul> <p>Input:</p> <ul> <li>start: The page number to request.</li> <li>limit: The limit of results to be returned.</li> <li>from: The date and time or the event id to search from.</li> <li>to: The data and time or the event id to search to.</li> </ul>"},{"location":"API/Logs/#list_eventlog","title":"<code>list_eventlog</code>","text":"<p>Route: <code>/api/v0/logs/eventlog/:hostname</code></p>"},{"location":"API/Logs/#list_syslog","title":"<code>list_syslog</code>","text":"<p>Route: <code>/api/v0/logs/syslog/:hostname</code></p>"},{"location":"API/Logs/#list_alertlog","title":"<code>list_alertlog</code>","text":"<p>Route: <code>/api/v0/logs/alertlog/:hostname</code></p>"},{"location":"API/Logs/#list_authlog","title":"<code>list_authlog</code>","text":"<p>Route: <code>/api/v0/logs/authlog/:hostname</code></p> <p>Example:</p> <pre><code>curl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/logs/eventlog/:hostname\ncurl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/logs/syslog/:hostname?limit=20\ncurl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/logs/eventlog/:hostname?limit=20&amp;start=5&amp;from=2017-07-22%2023:00:00\ncurl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/logs/eventlog/:hostname?sortorder=DESC\n</code></pre> <p>Output:</p> <pre><code>{\n    \"status\": \"ok\",\n    \"message\": \"\",\n    \"count\": 5,\n    \"total\": \"15\",\n    \"logs\": [\n        {\n            \"hostname\": \"localhost\",\n            \"sysName\": \"web01.1.novalocal\",\n            \"event_id\": \"10050349\",\n            \"host\": \"279\",\n            \"device_id\": \"279\",\n            \"datetime\": \"2017-07-22 19:57:47\",\n            \"message\": \"ifAlias:  -&gt;  &lt;pptp-something-something-tunnel-something&gt;\",\n            \"type\": \"interface\",\n            \"reference\": \"NULL\",\n            \"username\": \"\",\n            \"severity\": \"3\"\n        },\n        ....\n        {\n            \"hostname\": \"localhost\",\n            \"sysName\": \"web01.1.novalocal\",\n            \"event_id\": \"10050353\",\n            \"host\": \"279\",\n            \"device_id\": \"279\",\n            \"datetime\": \"2017-07-22 19:57:47\",\n            \"message\": \"ifHighSpeed:  -&gt;  0\",\n            \"type\": \"interface\",\n            \"reference\": \"NULL\",\n            \"username\": \"\",\n            \"severity\": \"3\"\n        }\n    ]\n}\n</code></pre>"},{"location":"API/Logs/#syslogsink","title":"<code>syslogsink</code>","text":"<p>Route: <code>/api/v0/logs/syslogsink</code></p> <p>Accept any json messages and passes to further syslog processing. single messages or an array of multiple messages is accepted. see Syslog for more details and logstash integration</p> <p>Example <pre><code>curl -L -X POST 'https://sink.librenms.org/api/v0/syslogsink/' -H 'X-Auth-Token: xxxxxxxLibreNMSApiToken' --data-raw '[   \n    {\n        \"msg\": \"kernel: minimum Message\",\n        \"host\": \"mydevice.fqdn.com\"\n    },\n    {\n        \"msg\": \"Line protocol on Interface GigabitEthernet1/0/41, changed state to up\",\n        \"facility\": 23,\n        \"priority\": \"189\",\n        \"program\": \"LINEPROTO-5-UPDOWN\",\n        \"host\": \"172.29.10.24\",\n        \"@timestamp\": \"2022-12-01T20:14:28.257Z\",\n        \"severity\": 5,\n        \"level\": \"ERROR\"\n    },\n    {\n        \"msg\": \"kernel: a unknown host\",\n        \"host\": \"unknown.fqdn.com\"\n    }\n]'\n</code></pre></p>"},{"location":"API/PollerGroups/","title":"PollerGroups","text":""},{"location":"API/PollerGroups/#get_poller_group","title":"<code>get_poller_group</code>","text":"<p>Gets a specific poller group or all if none is specified</p> <p>Route: <code>/api/v0/poller_group/:poller_group</code></p> <ul> <li>poller_group: optional name or id of the poller group to get</li> </ul> <p>Output:</p> <pre><code>{\n    \"status\": \"ok\",\n    \"get_poller_group\": [\n        {\n            \"id\": 1,\n            \"group_name\": \"test\",\n            \"descr\": \"test group\"\n        }\n    ],\n    \"count\": 1\n}\n</code></pre>"},{"location":"API/PortGroups/","title":"PortGroups","text":""},{"location":"API/PortGroups/#get_graph_by_portgroup","title":"<code>get_graph_by_portgroup</code>","text":"<p>Get the graph based on the group type.</p> <p>Route: <code>/api/v0/portgroups/:group</code></p> <ul> <li>group is the type of port group graph you want, I.e Transit,   Peering, etc. You can specify multiple types comma separated.</li> </ul> <p>Input:</p> <ul> <li>from: This is the date you would like the graph to start - See   http://oss.oetiker.ch/rrdtool/doc/rrdgraph.en.html for more information.</li> <li>to: This is the date you would like the graph to end - See   http://oss.oetiker.ch/rrdtool/doc/rrdgraph.en.html for more information.</li> <li>width: The graph width, defaults to 1075.</li> <li>height: The graph height, defaults to 300.</li> </ul> <p>Example:</p> <pre><code>curl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/portgroups/transit,peering\n</code></pre> <p>Output:</p> <p>Output is an image.</p>"},{"location":"API/PortGroups/#get_graph_by_portgroup_multiport_bits","title":"<code>get_graph_by_portgroup_multiport_bits</code>","text":"<p>Get the graph based on the multiple port id separated by commas <code>,</code>.</p> <p>Route: <code>/api/v0/portgroups/multiport/bits/:id</code></p> <ul> <li>id is a comma separated list of port ids you want, I.e 1,2,3,4,   etc. You can specify multiple IDs comma separated.</li> </ul> <p>Input:</p> <ul> <li>from: This is the date you would like the graph to start - See   http://oss.oetiker.ch/rrdtool/doc/rrdgraph.en.html for more information.</li> <li>to: This is the date you would like the graph to end - See   http://oss.oetiker.ch/rrdtool/doc/rrdgraph.en.html for more information.</li> <li>width: The graph width, defaults to 1075.</li> <li>height: The graph height, defaults to 300.</li> </ul> <p>Example:</p> <pre><code>curl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/portgroups/multiport/bits/1,2,3\n</code></pre> <p>Output:</p> <p>Output is an image.</p>"},{"location":"API/Port_Groups/","title":"Port_Groups","text":""},{"location":"API/Port_Groups/#get_port_groups","title":"<code>get_port_groups</code>","text":"<p>List all port groups.</p> <p>Route: <code>/api/v0/port_groups</code></p> <p>Examples:</p> <pre><code>curl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/port_groups\n</code></pre> <p>Output:</p> <pre><code>[\n    {\n        \"status\": \"ok\",\n        \"message\": \"Found 1 port groups\",\n        \"count\": 1,\n        \"groups\": [\n        {\n            \"id\": \"1\",\n            \"name\": \"Testing\",\n            \"desc\": \"Testing\"\n        }\n        ]\n    }\n]\n</code></pre>"},{"location":"API/Port_Groups/#get_ports_by_group","title":"<code>get_ports_by_group</code>","text":"<p>List all ports matching the group provided.</p> <p>Route: <code>/api/v0/port_groups/:name</code></p> <ul> <li>name Is the name of the port group which can be obtained using   <code>get_port_groups</code>. Please ensure that   the name is urlencoded if it needs to be (i.e Linux Servers would   need to be urlencoded.</li> </ul> <p>Params:</p> <ul> <li>full: set to any value to return all data for the devices in a given group</li> </ul> <p>Examples:</p> <pre><code>curl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/port_groups/Billable\n</code></pre> <p>Output:</p> <pre><code>{\n    \"status\": \"ok\",\n    \"ports\": [\n        {\n            \"port_id\": 1376\n        },\n        {\n            \"port_id\": 2376\n        }\n    ],\n    \"count\": 2\n}\n</code></pre>"},{"location":"API/Port_Groups/#add_port_group","title":"<code>add_port_group</code>","text":"<p>Add a new port group. Upon success, the ID of the new port group is returned and the HTTP response code is <code>201</code>.</p> <p>Route: <code>/api/v0/port_groups</code></p> <p>Input (JSON):</p> <ul> <li><code>name</code>: required - The name of the port group</li> <li><code>desc</code>: optional - Description of the port group</li> </ul> <p>Examples:</p> <p>Dynamic Example:</p> <pre><code>curl -H 'X-Auth-Token: YOURAPITOKENHERE' \\\n  -X POST \\\n  -d '{\"name\": \"New Port Group\", \\\n       \"desc\": \"A very fancy port group\"}' \\\n  https://librenms.org/api/v0/port_groups\n</code></pre> <p>Output:</p> <pre><code>{\n    \"status\": \"ok\",\n    \"id\": 86,\n    \"message\": \"Port group New Port Group created\"\n}\n</code></pre>"},{"location":"API/Port_Groups/#assign_port_group","title":"<code>assign_port_group</code>","text":"<p>Assign a Port Group to a list of Ports</p> <p>Route: <code>/api/v0/port_groups/:port_group_id/assign</code></p> <p>Input (JSON):</p> <ul> <li><code>port_ids</code>: required - List of Port Ids</li> </ul> <p>Examples:</p> <p>Dynamic Example:</p> <pre><code>curl -H 'X-Auth-Token: YOURAPITOKENHERE' -X POST -d '{\"port_ids\": [\"4\",\"34\",\"25,\"983\"]}' https://librenms.org/api/v0/port_groups/3/assign\n</code></pre> <p>Output:</p> <pre><code>{\n    \"status\": \"ok\",\n    \"Port Ids 4, 34, 25, 983 have been added to Port Group Id 3\": 200\n}\n</code></pre>"},{"location":"API/Port_Groups/#remove_port_group","title":"<code>remove_port_group</code>","text":"<p>Remove a Port Group from a list of Ports</p> <p>Route: <code>/api/v0/port_groups/:port_group_id/remove</code></p> <p>Input (JSON):</p> <ul> <li><code>port_ids</code>: required - List of Port Ids</li> </ul> <p>Examples:</p> <p>Dynamic Example:</p> <pre><code>curl -H 'X-Auth-Token: YOURAPITOKENHERE' -X POST -d '{\"port_ids\": [\"4\",\"34\",\"25,\"983\"]}' https://librenms.org/api/v0/port_groups/3/remove\n</code></pre> <p>Output:</p> <pre><code>{\n    \"status\": \"ok\",\n    \"Port Ids 4, 34, 25, 983 have been removed from Port Group Id 3\": 200\n}\n</code></pre>"},{"location":"API/Ports/","title":"Ports","text":""},{"location":"API/Ports/#get_all_ports","title":"<code>get_all_ports</code>","text":"<p>Get info for all ports on all devices. Strongly recommend that you use the <code>columns</code> parameter to avoid pulling too much data.</p> <p>Route: <code>/api/v0/ports</code></p> <p>-</p> <p>Input:</p> <ul> <li>columns: Comma separated list of columns you want returned.</li> </ul> <p>Example:</p> <pre><code>curl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/ports?columns=ifName%2Cport_id\n</code></pre> <p>Output:</p> <pre><code>{\n  \"status\": \"ok\",\n  \"message\": \"\",\n  \"ports\": [\n        {\n          \"ifName\": \"Gi0/0/0\",\n          \"port_id\": \"1\"\n        },\n        {\n          \"ifName\": \"Gi0/0/1\",\n          \"port_id\": \"2\"\n        },\n        ...\n        {\n          \"ifName\": \"Vlan 3615\",\n          \"port_id\": \"5488\"\n        }\n    ]\n}\n</code></pre>"},{"location":"API/Ports/#search_ports","title":"<code>search_ports</code>","text":"<p>Search for ports matching the query.</p> <p>Route: <code>/api/v0/ports/search/:search</code></p> <ul> <li>search string to search in fields: ifAlias, ifDescr, and ifName</li> </ul> <p>Input:</p> <ul> <li>columns: Comma separated list of columns you want returned.</li> </ul> <p>Example:</p> <pre><code>curl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/ports/search/lo\n</code></pre> <p>Output:</p> <pre><code>{\n    \"status\": \"ok\",\n    \"ports\": [\n        {\n            \"device_id\": 1,\n            \"port_id\": 1,\n            \"ifIndex\": 1,\n            \"ifName\": \"lo\"\n        },\n        {\n            \"device_id\": 2,\n            \"port_id\": 3,\n            \"ifIndex\": 1,\n            \"ifName\": \"lo\"\n        },\n        {\n            \"device_id\": 3,\n            \"port_id\": 5,\n            \"ifIndex\": 1,\n            \"ifName\": \"lo\"\n        }\n    ]\n}\n</code></pre>"},{"location":"API/Ports/#search_ports-in-specific-fields","title":"<code>search_ports in specific field(s)</code>","text":"<p>Specific search for ports matching the query.</p> <p>Route: <code>/api/v0/ports/search/:field/:search</code></p> <ul> <li>field: comma separated list of field(s) to search</li> <li>search: string to search in fields</li> </ul> <p>Input:</p> <ul> <li>columns: Comma separated list of columns you want returned.</li> </ul> <p>Example:</p> <pre><code>curl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/ports/search/ifName/lo\n</code></pre> <p>Output:</p> <pre><code>{\n    \"status\": \"ok\",\n    \"ports\": [\n        {\n            \"device_id\": 1,\n            \"port_id\": 1,\n            \"ifIndex\": 1,\n            \"ifName\": \"lo\"\n        },\n        {\n            \"device_id\": 2,\n            \"port_id\": 3,\n            \"ifIndex\": 1,\n            \"ifName\": \"lo\"\n        },\n        {\n            \"device_id\": 3,\n            \"port_id\": 5,\n            \"ifIndex\": 1,\n            \"ifName\": \"lo\"\n        }\n    ]\n}\n</code></pre>"},{"location":"API/Ports/#ports_with_associated_mac","title":"<code>ports_with_associated_mac</code>","text":"<p>Search for ports matching the search mac.</p> <p>Route: <code>/api/v0/ports/mac/:search?filter=first</code></p> <ul> <li>search a mac address in fdb and print the ports ordered by the mac count of the associated port.</li> </ul> <p>Input:</p> <p>-</p> <p>Example:</p> <pre><code>curl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/ports/mac/00:11:22:33:44:55\ncurl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/ports/mac/001122.334455?filter=first\ncurl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/ports/mac/001122334455?filter=first\n</code></pre> <p>Output:</p> <pre><code>{\n  \"status\": \"ok\",\n  \"message\": \"\",\n  \"port\": [\n    {\n      \"port_id\": \"323\",\n      \"device_id\": \"55\",\n      \"port_descr_type\": null,\n      \"port_descr_descr\": null,\n      \"port_descr_circuit\": null,\n      \"port_descr_speed\": null,\n      \"port_descr_notes\": null,\n      \"ifDescr\": \"GigabitEthernet0/0/0\",\n      \"ifName\": \"Gi0/0/0\",\n      \"portName\": null,\n      \"ifIndex\": \"1\",\n      \"ifSpeed\": \"1000000000\",\n      \"ifConnectorPresent\": \"true\",\n      \"ifPromiscuousMode\": \"false\",\n      \"ifHighSpeed\": \"1000\",\n      \"ifOperStatus\": \"up\",\n      \"ifOperStatus_prev\": null,\n      \"ifAdminStatus\": \"up\",\n      \"ifAdminStatus_prev\": null,\n      \"ifDuplex\": \"fullDuplex\",\n      \"ifMtu\": \"1560\",\n      \"ifType\": \"ethernetCsmacd\",\n      \"ifAlias\": \"ASR Interconnect Trunk\",\n      \"ifPhysAddress\": \"84bf20853e00\",\n      \"ifHardType\": null,\n      \"ifLastChange\": \"42407358\",\n      \"ifVlan\": \"\",\n      \"ifTrunk\": \"\",\n      \"ifVrf\": \"0\",\n      \"counter_in\": null,\n      \"counter_out\": null,\n      \"ignore\": \"0\",\n      \"disabled\": \"0\",\n      \"detailed\": \"0\",\n      \"deleted\": \"0\",\n      \"pagpOperationMode\": null,\n      \"pagpPortState\": null,\n      \"pagpPartnerDeviceId\": null,\n      \"pagpPartnerLearnMethod\": null,\n      \"pagpPartnerIfIndex\": null,\n      \"pagpPartnerGroupIfIndex\": null,\n      \"pagpPartnerDeviceName\": null,\n      \"pagpEthcOperationMode\": null,\n      \"pagpDeviceId\": null,\n      \"pagpGroupIfIndex\": null,\n      \"ifInUcastPkts\": \"128518576\",\n      \"ifInUcastPkts_prev\": \"128517284\",\n      \"ifInUcastPkts_delta\": \"1292\",\n      \"ifInUcastPkts_rate\": \"4\",\n      \"ifOutUcastPkts\": \"128510560\",\n      \"ifOutUcastPkts_prev\": \"128509268\",\n      \"ifOutUcastPkts_delta\": \"1292\",\n      \"ifOutUcastPkts_rate\": \"4\",\n      \"ifInErrors\": \"0\",\n      \"ifInErrors_prev\": \"0\",\n      \"ifInErrors_delta\": \"0\",\n      \"ifInErrors_rate\": \"0\",\n      \"ifOutErrors\": \"0\",\n      \"ifOutErrors_prev\": \"0\",\n      \"ifOutErrors_delta\": \"0\",\n      \"ifOutErrors_rate\": \"0\",\n      \"ifInOctets\": \"12827393730\",\n      \"ifInOctets_prev\": \"12827276736\",\n      \"ifInOctets_delta\": \"116994\",\n      \"ifInOctets_rate\": \"387\",\n      \"ifOutOctets\": \"14957481766\",\n      \"ifOutOctets_prev\": \"14957301765\",\n      \"ifOutOctets_delta\": \"180001\",\n      \"ifOutOctets_rate\": \"596\",\n      \"poll_time\": \"1483779150\",\n      \"poll_prev\": \"1483778848\",\n      \"poll_period\": \"302\"\n    }\n  ]\n}\n</code></pre>"},{"location":"API/Ports/#get_port_info","title":"<code>get_port_info</code>","text":"<p>Get all info for a particular port.</p> <p>Route: <code>/api/v0/ports/:portid?with=vlans</code></p> <ul> <li>portid must be an integer</li> <li>it's possible to add allowed associated relations to the port using the <code>with</code> option. Allowed: <code>vlans</code>,<code>device</code></li> </ul> <p>Input:</p> <p>-</p> <p>Example:</p> <pre><code>curl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/ports/323\n</code></pre> <p>Output:</p> <pre><code>{\n  \"status\": \"ok\",\n  \"message\": \"\",\n  \"port\": [\n    {\n      \"port_id\": \"323\",\n      \"device_id\": \"55\",\n      \"port_descr_type\": null,\n      \"port_descr_descr\": null,\n      \"port_descr_circuit\": null,\n      \"port_descr_speed\": null,\n      \"port_descr_notes\": null,\n      \"ifDescr\": \"GigabitEthernet0/0/0\",\n      \"ifName\": \"Gi0/0/0\",\n      \"portName\": null,\n      \"ifIndex\": \"1\",\n      \"ifSpeed\": \"1000000000\",\n      \"ifConnectorPresent\": \"true\",\n      \"ifPromiscuousMode\": \"false\",\n      \"ifHighSpeed\": \"1000\",\n      \"ifOperStatus\": \"up\",\n      \"ifOperStatus_prev\": null,\n      \"ifAdminStatus\": \"up\",\n      \"ifAdminStatus_prev\": null,\n      \"ifDuplex\": \"fullDuplex\",\n      \"ifMtu\": \"1560\",\n      \"ifType\": \"ethernetCsmacd\",\n      \"ifAlias\": \"ASR Interconnect Trunk\",\n      \"ifPhysAddress\": \"84bf20853e00\",\n      \"ifHardType\": null,\n      \"ifLastChange\": \"42407358\",\n      \"ifVlan\": \"\",\n      \"ifTrunk\": \"\",\n      \"ifVrf\": \"0\",\n      \"counter_in\": null,\n      \"counter_out\": null,\n      \"ignore\": \"0\",\n      \"disabled\": \"0\",\n      \"detailed\": \"0\",\n      \"deleted\": \"0\",\n      \"pagpOperationMode\": null,\n      \"pagpPortState\": null,\n      \"pagpPartnerDeviceId\": null,\n      \"pagpPartnerLearnMethod\": null,\n      \"pagpPartnerIfIndex\": null,\n      \"pagpPartnerGroupIfIndex\": null,\n      \"pagpPartnerDeviceName\": null,\n      \"pagpEthcOperationMode\": null,\n      \"pagpDeviceId\": null,\n      \"pagpGroupIfIndex\": null,\n      \"ifInUcastPkts\": \"128518576\",\n      \"ifInUcastPkts_prev\": \"128517284\",\n      \"ifInUcastPkts_delta\": \"1292\",\n      \"ifInUcastPkts_rate\": \"4\",\n      \"ifOutUcastPkts\": \"128510560\",\n      \"ifOutUcastPkts_prev\": \"128509268\",\n      \"ifOutUcastPkts_delta\": \"1292\",\n      \"ifOutUcastPkts_rate\": \"4\",\n      \"ifInErrors\": \"0\",\n      \"ifInErrors_prev\": \"0\",\n      \"ifInErrors_delta\": \"0\",\n      \"ifInErrors_rate\": \"0\",\n      \"ifOutErrors\": \"0\",\n      \"ifOutErrors_prev\": \"0\",\n      \"ifOutErrors_delta\": \"0\",\n      \"ifOutErrors_rate\": \"0\",\n      \"ifInOctets\": \"12827393730\",\n      \"ifInOctets_prev\": \"12827276736\",\n      \"ifInOctets_delta\": \"116994\",\n      \"ifInOctets_rate\": \"387\",\n      \"ifOutOctets\": \"14957481766\",\n      \"ifOutOctets_prev\": \"14957301765\",\n      \"ifOutOctets_delta\": \"180001\",\n      \"ifOutOctets_rate\": \"596\",\n      \"poll_time\": \"1483779150\",\n      \"poll_prev\": \"1483778848\",\n      \"poll_period\": \"302\"\n    }\n  ]\n}\n</code></pre>"},{"location":"API/Ports/#get_port_ip_info","title":"<code>get_port_ip_info</code>","text":"<p>Get all IP info (v4 and v6) for a given port id.</p> <p>Route: <code>/api/v0/ports/:portid/ip</code></p> <ul> <li>portid must be an integer</li> </ul> <p>Input:</p> <p>-</p> <p>Example:</p> <pre><code>curl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/ports/323/ip\n</code></pre> <p>Output:</p> <pre><code>{\n  \"status\": \"ok\",\n  \"message\": \"\",\n  \"addresses\": [\n    {\n      \"ipv4_address_id\": \"290\",\n      \"ipv4_address\": \"192.168.99.292\",\n      \"ipv4_prefixlen\": \"30\",\n      \"ipv4_network_id\": \"247\",\n      \"port_id\": \"323\",\n      \"context_name\": \"\"\n    }\n  ]\n}\n</code></pre>"},{"location":"API/Ports/#get_port_transceiver","title":"<code>get_port_transceiver</code>","text":"<p>Get transceiver info with metrics</p> <p>Route: <code>/api/v0/ports/:portid/transceiver</code></p> <ul> <li>portid must be an integer</li> </ul> <p>Example:</p> <pre><code>curl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/ports/50736/transceiver\n</code></pre> <p>Output:</p> <pre><code>{\n    \"status\": \"ok\",\n    \"transceivers\": [\n        {\n            \"id\": 13,\n            \"created_at\": \"2024-06-26T23:46:06.000000Z\",\n            \"updated_at\": \"2024-06-27T00:00:07.000000Z\",\n            \"device_id\": 3138,\n            \"port_id\": 50736,\n            \"index\": \"51\",\n            \"type\": \"10G_BASE_SR_SFP\",\n            \"vendor\": \"HPE\",\n            \"oui\": \"64 9D 99\",\n            \"model\": null,\n            \"revision\": \"1\",\n            \"serial\": \"AAA0000AAA00\",\n            \"date\": null,\n            \"ddm\": true,\n            \"encoding\": null,\n            \"cable\": \"MM\",\n            \"distance\": 300,\n            \"wavelength\": 850,\n            \"connector\": \"LC\",\n            \"channels\": 1\n        }\n    ]\n}\n</code></pre>"},{"location":"API/Ports/#get_port_description","title":"<code>get_port_description</code>","text":"<p>Get the description (<code>ifAlias</code>) for a given port id.</p> <p>Route: <code>/api/v0/ports/:portid/description</code></p> <p>Example:</p> <pre><code>curl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/ports/323/description\n</code></pre> <p>Output:</p> <pre><code>{\n    \"status\": \"ok\",\n    \"port_description\": \"GigabitEthernet14\"\n}\n</code></pre>"},{"location":"API/Ports/#update_port_description","title":"<code>update_port_description</code>","text":"<p>Change the description (<code>ifAlias</code>) for a given port id.</p> <p>Route: <code>/api/v0/ports/:portid/description</code></p> <p>Input (JSON):</p> <ul> <li>description: The string data to use as the new port description. Sending an empty string will reset the description to default.</li> </ul> <p>Example:</p> <pre><code>curl -X PATCH -d '{\"description\": \"Out-of-Band Management Link\"}' -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/ports/323/description\n</code></pre> <p>Output: <pre><code>{\n    \"status\": \"ok\",\n    \"message\": \"Port description updated.\"\n}\n</code></pre></p>"},{"location":"API/Routing/","title":"Routing","text":""},{"location":"API/Routing/#list_bgp","title":"<code>list_bgp</code>","text":"<p>List the current BGP sessions.</p> <p>Route: <code>/api/v0/bgp</code></p> <p>Input:</p> <ul> <li>hostname = Either the devices hostname or id.</li> <li>asn = The local ASN you would like to filter by</li> <li>remote_asn = Filter by remote peer ASN</li> <li>remote_address = Filter by remote peer address</li> <li>local_address = Filter by local address</li> <li>bgp_descr = Filter by BGP neighbor description</li> <li>bgp_state = Filter by BGP session state (like established,idle...)</li> <li>bgp_state = Filter by BGP admin state (start,stop,running...)</li> <li>bgp_family = Filter by BGP address Family (4,6)</li> </ul> <p>Example:</p> <pre><code>curl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/bgp\ncurl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/bgp?hostname=host.example.com\ncurl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/bgp?asn=1234\ncurl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/bgp?remote_asn=1234\ncurl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/bgp?local_address=1.1.1.1&amp;remote_address=2.2.2.2\ncurl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/bgp?bgp_descr=UPSTREAM\ncurl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/bgp?bgp_state=established\ncurl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/bgp?bgp_adminstate=start\ncurl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/bgp?bgp_family=6\ncurl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/bgp?bgp_state=idle&amp;bgp_descr=CORE&amp;bgp_family=4\n</code></pre> <p>Output:</p> <pre><code>{\n \"status\": \"ok\",\n \"message\": \"\",\n \"bgp_sessions\": [\n        {\n            \"bgpPeer_id\": 1260,\n            \"device_id\": 7,\n            \"vrf_id\": null,\n            \"astext\": \"Acme Ltd\",\n            \"bgpPeerIdentifier\": \"2001:0DB8:0000:24cb:0000:0000:0000:0001\",\n            \"bgpPeerRemoteAs\": 65432,\n            \"bgpPeerState\": \"established\",\n            \"bgpPeerAdminStatus\": \"start\",\n            \"bgpPeerLastErrorCode\": 6,\n            \"bgpPeerLastErrorSubCode\": 2,\n            \"bgpPeerLastErrorText\": \"administrative shutdown\",\n            \"bgpPeerIface\": 268,\n            \"bgpLocalAddr\": \"2001:0DB8:0000:24cb:0000:0000:0000:0002\",\n            \"bgpPeerRemoteAddr\": \"0.0.0.0\",\n            \"bgpPeerDescr\": \"Another one #CORE\",\n            \"bgpPeerInUpdates\": 283882969,\n            \"bgpPeerOutUpdates\": 7008,\n            \"bgpPeerInTotalMessages\": 283883031,\n            \"bgpPeerOutTotalMessages\": 1386692,\n            \"bgpPeerFsmEstablishedTime\": 1628487,\n            \"bgpPeerInUpdateElapsedTime\": 0,\n            \"context_name\": \"\"\n        },\n    ...\n    ],\n    \"count\": 100\n}\n</code></pre>"},{"location":"API/Routing/#get_bgp","title":"<code>get_bgp</code>","text":"<p>Retrieves a BGP session by ID</p> <p>Route: <code>/api/v0/bgp/:id</code></p> <p>Input:</p> <p>-</p> <p>Example:</p> <pre><code>curl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/bgp/4\n</code></pre> <p>Output:</p> <pre><code>{\n    \"status\": \"ok\",\n    \"bgp_session\": [\n        {\n            \"bgpPeer_id\": \"4\",\n            \"device_id\": \"2\",\n            \"astext\": \"\",\n            \"bgpPeerIdentifier\": \"1234:1b80:1:12::2\",\n            \"bgpPeerRemoteAs\": \"54321\",\n            \"bgpPeerState\": \"established\",\n            \"bgpPeerAdminStatus\": \"running\",\n            \"bgpLocalAddr\": \"1234:1b80:1:12::1\",\n            \"bgpPeerRemoteAddr\": \"0.0.0.0\",\n            \"bgpPeerInUpdates\": \"3\",\n            \"bgpPeerOutUpdates\": \"1\",\n            \"bgpPeerInTotalMessages\": \"0\",\n            \"bgpPeerOutTotalMessages\": \"0\",\n            \"bgpPeerFsmEstablishedTime\": \"0\",\n            \"bgpPeerInUpdateElapsedTime\": \"0\",\n            \"context_name\": \"\"\n        }\n    ],\n    \"count\": 1\n}\n</code></pre>"},{"location":"API/Routing/#edit_bgp_descr","title":"<code>edit_bgp_descr</code>","text":"<p>This is a POST type request Set the BGP session description by ID</p> <p>Route: <code>/api/v0/bgp/:id</code></p> <p>Input:</p> <ul> <li>id = The id of the BGP Peer Session.</li> <li>bgp_descr = The description for the bgpPeerDescr field on the BGP Session.</li> </ul> <p>Example:</p> <pre><code>curl -v -H 'X-Auth-Token: YOURAPITOKENHERE' --data '{\"bgp_descr\": \"Your description here\"}' https://librenms.org/api/v0/bgp/4\n</code></pre> <p>Output:</p> <pre><code>{\n    \"status\": \"ok\",\n    \"message\": \"BGP description for peer X.X.X.X on device 1 updated to Your description here\"\n}\n</code></pre>"},{"location":"API/Routing/#list_cbgp","title":"<code>list_cbgp</code>","text":"<p>List the current BGP sessions counters.</p> <p>Route: <code>/api/v0/routing/bgp/cbgp</code></p> <p>Input:</p> <ul> <li>hostname = Either the devices hostname or id</li> </ul> <p>Example:</p> <pre><code>curl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/routing/bgp/cbgp\ncurl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/routing/bgp/cbgp?hostname=host.example.com\n</code></pre> <p>Output:</p> <pre><code>{\n    \"status\": \"ok\",\n    \"bgp_counters\": [\n        {\n            \"device_id\": \"9\",\n            \"bgpPeerIdentifier\": \"192.168.99.31\",\n            \"afi\": \"ipv4\",\n            \"safi\": \"multicast\",\n            \"AcceptedPrefixes\": \"2\",\n            \"DeniedPrefixes\": \"0\",\n            \"PrefixAdminLimit\": \"0\",\n            \"PrefixThreshold\": \"0\",\n            \"PrefixClearThreshold\": \"0\",\n            \"AdvertisedPrefixes\": \"11487\",\n            \"SuppressedPrefixes\": \"0\",\n            \"WithdrawnPrefixes\": \"10918\",\n            \"AcceptedPrefixes_delta\": \"-2\",\n            \"AcceptedPrefixes_prev\": \"2\",\n            \"DeniedPrefixes_delta\": \"0\",\n            \"DeniedPrefixes_prev\": \"0\",\n            \"AdvertisedPrefixes_delta\": \"-11487\",\n            \"AdvertisedPrefixes_prev\": \"11487\",\n            \"SuppressedPrefixes_delta\": \"0\",\n            \"SuppressedPrefixes_prev\": \"0\",\n            \"WithdrawnPrefixes_delta\": \"-10918\",\n            \"WithdrawnPrefixes_prev\": \"10918\",\n            \"context_name\": \"\"\n        },\n        ...\n    ],\n    \"count\": 100\n}\n</code></pre>"},{"location":"API/Routing/#list_ip_addresses","title":"<code>list_ip_addresses</code>","text":"<p>List all IPv4 and IPv6 or only version specific addresses.</p> <p>Route: <code>/api/v0/resources/ip/addresses/:address_family</code></p> <p>Input:</p> <ul> <li>address_family: optional ipv4 or ipv6 for ip version specific list.</li> </ul> <p>Example:</p> <pre><code>curl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/resources/ip/addresses\ncurl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/resources/ip/addresses/ipv4\ncurl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/resources/ip/addresses/ipv6\n</code></pre> <p>Output:</p> <pre><code>{\n    \"status\": \"ok\",\n    \"ip_addresses\": [\n        {\n            \"ipv4_address_id\": \"69\",\n            \"ipv4_address\": \"127.0.0.1\",\n            \"ipv4_prefixlen\": \"8\",\n            \"ipv4_network_id\": \"55\",\n            \"port_id\": \"135\",\n            \"context_name\": \"\"\n        },\n        ...\n    ],\n    \"count\": 55\n}\n</code></pre>"},{"location":"API/Routing/#get_network_ip_addresses","title":"<code>get_network_ip_addresses</code>","text":"<p>Get all IPv4 and IPv6 addresses for particular network.</p> <p>Route: <code>/api/v0/resources/ip/networks/:id/ip</code></p> <ul> <li>id must be integer</li> </ul> <p>Input:</p> <p>-</p> <p>Example:</p> <pre><code>curl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/resources/ip/networks/55/ip\n</code></pre> <p>Output:</p> <pre><code>{\n    \"status\": \"ok\",\n    \"addresses\": [\n        {\n            \"ipv4_address_id\": \"69\",\n            \"ipv4_address\": \"127.0.0.1\",\n            \"ipv4_prefixlen\": \"8\",\n            \"ipv4_network_id\": \"55\",\n            \"port_id\": \"135\",\n            \"context_name\": \"\"\n        }\n    ],\n    \"count\": 1\n}\n</code></pre>"},{"location":"API/Routing/#list_ip_networks","title":"<code>list_ip_networks</code>","text":"<p>List all IPv4 and IPv6 or only version specific networks.</p> <p>Route: <code>/api/v0/resources/ip/networks/:address_family</code></p> <p>Input:</p> <ul> <li>address_family: optional ipv4 or ipv6 for ip version specific list.</li> </ul> <p>Example:</p> <pre><code>curl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/resources/ip/networks\ncurl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/resources/ip/networks/ipv4\ncurl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/resources/ip/networks/ipv6\n</code></pre> <p>Output:</p> <pre><code>{\n    \"status\": \"ok\",\n    \"ip_networks\": [\n        {\n            \"ipv4_network_id\": \"1\",\n            \"ipv4_network\": \"127.0.0.0/8\",\n            \"context_name\": \"\"\n        },\n        ...\n    ],\n    \"count\": 100\n}\n</code></pre>"},{"location":"API/Routing/#list_ipsec","title":"<code>list_ipsec</code>","text":"<p>List the current IPSec tunnels which are active.</p> <p>Route: <code>/api/v0/routing/ipsec/data/:hostname</code></p> <ul> <li>hostname can be either the device hostname or id</li> </ul> <p>Input:</p> <p>-</p> <p>Example:</p> <pre><code>curl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/routing/ipsec/data/localhost\n</code></pre> <p>Output:</p> <pre><code>{\n    \"status\": \"ok\",\n    \"message\": \"\",\n    \"count\": 0,\n    \"ipsec\": [\n        \"tunnel_id\": \"1\",\n        \"device_id\": \"1\",\n        \"peer_port\": \"0\",\n        \"peer_addr\": \"127.0.0.1\",\n        \"local_addr\": \"127.0.0.2\",\n        \"local_port\": \"0\",\n        \"tunnel_name\": \"\",\n        \"tunnel_status\": \"active\"\n    ]\n}\n</code></pre> <p>Please note, this will only show active VPN sessions not all configured.</p>"},{"location":"API/Routing/#list_ospf","title":"<code>list_ospf</code>","text":"<p>List the current OSPF neighbours.</p> <p>Route: <code>/api/v0/ospf</code></p> <p>Input:</p> <ul> <li>hostname = Either the devices hostname or id.</li> </ul> <p>Example:</p> <pre><code>curl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/ospf\ncurl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/ospf?hostname=host.example.com\n</code></pre> <p>Output:</p> <pre><code>{\n \"status\": \"ok\",\n \"ospf_neighbours\": [\n        {\n            \"device_id\": \"1\",\n            \"port_id\": \"0\",\n            \"ospf_nbr_id\": \"172.16.1.145.0\",\n            \"ospfNbrIpAddr\": \"172.16.1.145\",\n            \"ospfNbrAddressLessIndex\": \"0\",\n            \"ospfNbrRtrId\": \"172.16.0.140\",\n            \"ospfNbrOptions\": \"82\",\n            \"ospfNbrPriority\": \"1\",\n            \"ospfNbrState\": \"full\",\n            \"ospfNbrEvents\": \"5\",\n            \"ospfNbrLsRetransQLen\": \"0\",\n            \"ospfNbmaNbrStatus\": \"active\",\n            \"ospfNbmaNbrPermanence\": \"dynamic\",\n            \"ospfNbrHelloSuppressed\": \"false\",\n            \"context_name\": \"\"\n        }\n    ],\n    \"count\": 1\n}\n</code></pre>"},{"location":"API/Routing/#list_ospf_ports","title":"<code>list_ospf_ports</code>","text":"<p>List the current OSPF ports.</p> <p>Route: <code>/api/v0/ospf_ports</code></p> <p>Example:</p> <pre><code>curl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/ospf_ports\n</code></pre> <p>Output:</p> <pre><code>{\n \"status\": \"ok\",\n \"ospf_ports\": [\n        {\n          \"id\": 189086,\n          \"device_id\": 43,\n          \"port_id\": 2838,\n          \"ospf_port_id\": \"10.10.2.86.0\",\n          \"ospfIfIpAddress\": \"10.10.2.86\",\n          \"ospfAddressLessIf\": 0,\n          \"ospfIfAreaId\": \"0.0.0.0\",\n          \"ospfIfType\": \"pointToPoint\",\n          \"ospfIfAdminStat\": \"enabled\",\n          \"ospfIfRtrPriority\": 128,\n          \"ospfIfTransitDelay\": 1,\n          \"ospfIfRetransInterval\": 5,\n          \"ospfIfHelloInterval\": 10,\n          \"ospfIfRtrDeadInterval\": 40,\n          \"ospfIfPollInterval\": 90,\n          \"ospfIfState\": \"pointToPoint\",\n          \"ospfIfDesignatedRouter\": \"0.0.0.0\",\n          \"ospfIfBackupDesignatedRouter\": \"0.0.0.0\",\n          \"ospfIfEvents\": 33,\n          \"ospfIfAuthKey\": \"\",\n          \"ospfIfStatus\": \"active\",\n          \"ospfIfMulticastForwarding\": \"unicast\",\n          \"ospfIfDemand\": \"false\",\n          \"ospfIfAuthType\": \"0\",\n          \"ospfIfMetricIpAddress\": \"10.10.2.86\",\n          \"ospfIfMetricAddressLessIf\": 0,\n          \"ospfIfMetricTOS\": 0,\n          \"ospfIfMetricValue\": 10,\n          \"ospfIfMetricStatus\": \"active\",\n          \"context_name\": null\n        }\n    ],\n    \"count\": 1\n}\n</code></pre>"},{"location":"API/Routing/#list_ospfv3","title":"<code>list_ospfv3</code>","text":"<p>List the current OSPFv3 neighbours.</p> <p>Route: <code>/api/v0/ospfv3</code></p> <p>Input:</p> <ul> <li>hostname = Either the devices hostname or id.</li> </ul> <p>Example:</p> <pre><code>curl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/ospfv3\ncurl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/ospfv3?hostname=host.example.com\n</code></pre> <p>Output:</p> <pre><code>{\n    \"status\": \"ok\",\n    \"ospfv3_neighbours\": [\n        {\n            \"id\": 7,\n            \"device_id\": 14,\n            \"ospfv3_instance_id\": 7,\n            \"port_id\": 2345,\n            \"router_id\": \"10.0.43.11\",\n            \"ospfv3NbrIfIndex\": 2,\n            \"ospfv3NbrIfInstId\": 0,\n            \"ospfv3NbrRtrId\": 167797515,\n            \"ospfv3NbrAddressType\": \"ipv6\",\n            \"ospfv3NbrAddress\": \"fe80::1d7:101:98cf:af80\",\n            \"ospfv3NbrOptions\": 19,\n            \"ospfv3NbrPriority\": 50,\n            \"ospfv3NbrState\": \"full\",\n            \"ospfv3NbrEvents\": 6,\n            \"ospfv3NbrLsRetransQLen\": 0,\n            \"ospfv3NbrHelloSuppressed\": \"false\",\n            \"ospfv3NbrIfId\": 14,\n            \"ospfv3NbrRestartHelperStatus\": \"notHelping\",\n            \"ospfv3NbrRestartHelperAge\": 0,\n            \"ospfv3NbrRestartHelperExitReason\": \"none\",\n            \"context_name\": \"\"\n        }\n    ],\n    \"count\": 1\n}\n</code></pre>"},{"location":"API/Routing/#list_ospfv3_ports","title":"<code>list_ospfv3_ports</code>","text":"<p>List the current OSPFv3 ports.</p> <p>Route: <code>/api/v0/ospfv3_ports</code></p> <p>Example:</p> <pre><code>curl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/ospfv3_ports\ncurl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/ospfv3_ports?hostname=host.example.com\n</code></pre> <p>Output:</p> <pre><code>{\n    \"status\": \"ok\",\n    \"ospfv3_ports\": [\n        {\n            \"id\": 13,\n            \"device_id\": 14,\n            \"ospfv3_instance_id\": 7,\n            \"ospfv3_area_id\": 43,\n            \"port_id\": 2390,\n            \"ospfv3IfIndex\": 2,\n            \"ospfv3IfInstId\": 0,\n            \"ospfv3IfAreaId\": 0,\n            \"ospfv3IfType\": \"broadcast\",\n            \"ospfv3IfAdminStatus\": \"enabled\",\n            \"ospfv3IfRtrPriority\": 1,\n            \"ospfv3IfTransitDelay\": 1,\n            \"ospfv3IfRetransInterval\": 5,\n            \"ospfv3IfHelloInterval\": 10,\n            \"ospfv3IfRtrDeadInterval\": 40,\n            \"ospfv3IfPollInterval\": 10,\n            \"ospfv3IfState\": \"backupDesignatedRouter\",\n            \"ospfv3IfDesignatedRouter\": \"10.0.43.11\",\n            \"ospfv3IfBackupDesignatedRouter\": \"10.7.9.254\",\n            \"ospfv3IfEvents\": 7,\n            \"ospfv3IfDemand\": \"false\",\n            \"ospfv3IfMetricValue\": 10,\n            \"ospfv3IfLinkScopeLsaCount\": 2,\n            \"ospfv3IfLinkLsaCksumSum\": 64455,\n            \"ospfv3IfDemandNbrProbe\": \"false\",\n            \"ospfv3IfDemandNbrProbeRetransLimit\": 0,\n            \"ospfv3IfDemandNbrProbeInterval\": 0,\n            \"ospfv3IfTEDisabled\": \"true\",\n            \"ospfv3IfLinkLSASuppression\": \"false\",\n            \"context_name\": \"\"\n        }\n    ],\n    \"count\": 1\n}\n</code></pre>"},{"location":"API/Routing/#list_vrf","title":"<code>list_vrf</code>","text":"<p>List the current VRFs.</p> <p>Route: <code>/api/v0/routing/vrf</code></p> <p>Input:</p> <ul> <li>hostname = Either the devices hostname or id</li> </ul> <p>OR</p> <ul> <li>vrfname = The VRF name you would like to filter by</li> </ul> <p>Example:</p> <pre><code>curl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/routing/vrf\ncurl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/routing/vrf?hostname=host.example.com\ncurl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/routing/vrf?vrfname=Mgmt-vrf\n</code></pre> <p>Output:</p> <pre><code>{\n    \"status\": \"ok\",\n    \"vrfs\": [\n        {\n            \"vrf_id\": \"2\",\n            \"vrf_oid\": \"8.77.103.109.116.45.118.114.102\",\n            \"vrf_name\": \"Mgmt-vrf\",\n            \"mplsVpnVrfRouteDistinguisher\": \"\",\n            \"mplsVpnVrfDescription\": \"\",\n            \"device_id\": \"8\"\n        },\n        ...\n    ],\n    \"count\": 100\n}\n</code></pre>"},{"location":"API/Routing/#get_vrf","title":"<code>get_vrf</code>","text":"<p>Retrieves VRF by ID</p> <p>Route: <code>/api/v0/routing/vrf/:id</code></p> <p>Input:</p> <p>-</p> <p>Example:</p> <pre><code>curl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/routing/vrf/2\n</code></pre> <p>Output:</p> <pre><code>{\n    \"status\": \"ok\",\n    \"vrf\": [\n        {\n            \"vrf_id\": \"2\",\n            \"vrf_oid\": \"8.77.103.109.116.45.118.114.102\",\n            \"vrf_name\": \"Mgmt-vrf\",\n            \"mplsVpnVrfRouteDistinguisher\": \"\",\n            \"mplsVpnVrfDescription\": \"\",\n            \"device_id\": \"8\"\n        }\n    ],\n    \"count\": 1\n}\n</code></pre>"},{"location":"API/Routing/#list_mpls_services","title":"<code>list_mpls_services</code>","text":"<p>List MPLS services</p> <p>Route: <code>/api/v0/routing/mpls/services</code></p> <p>Input:</p> <ul> <li>hostname = Either the devices hostname or id</li> </ul> <p>Example:</p> <pre><code>curl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/routing/mpls/services\ncurl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/routing/mpls/services?hostname=host.example.com\n</code></pre> <p>Output:</p> <pre><code>{\n    \"status\": \"ok\",\n    \"mpls_services\": [\n        {\n            \"svc_id\": 1671,\n            \"svc_oid\": 27,\n            \"device_id\": 4,\n            \"svcRowStatus\": \"active\",\n            \"svcType\": \"tls\",\n            \"svcCustId\": 1,\n            \"svcAdminStatus\": \"up\",\n            \"svcOperStatus\": \"up\",\n            \"svcDescription\": \"\",\n            \"svcMtu\": 9008,\n            \"svcNumSaps\": 1,\n            \"svcNumSdps\": 0,\n            \"svcLastMgmtChange\": 2,\n            \"svcLastStatusChange\": 168,\n            \"svcVRouterId\": 0,\n            \"svcTlsMacLearning\": \"enabled\",\n            \"svcTlsStpAdminStatus\": \"disabled\",\n            \"svcTlsStpOperStatus\": \"down\",\n            \"svcTlsFdbTableSize\": 250,\n            \"svcTlsFdbNumEntries\": 0,\n            \"hostname\": \"host.example.com\"\n        }\n    ],\n    \"count\": 1\n}\n</code></pre>"},{"location":"API/Routing/#list_mpls_saps","title":"<code>list_mpls_saps</code>","text":"<p>List MPLS SAPs</p> <p>Route: <code>/api/v0/routing/mpls/saps</code></p> <p>Input:</p> <ul> <li>hostname = Either the devices hostname or id</li> </ul> <p>Example:</p> <pre><code>curl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/routing/mpls/saps\ncurl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/routing/mpls/saps?hostname=host.example.com\n</code></pre> <p>Output:</p> <pre><code>{\n    \"status\": \"ok\",\n    \"saps\": [\n        {\n            \"sap_id\": 1935,\n            \"svc_id\": 1660,\n            \"svc_oid\": 7,\n            \"sapPortId\": 16108921125,\n            \"ifName\": \"1/1/c2/1\",\n            \"device_id\": 3,\n            \"sapEncapValue\": \"0\",\n            \"sapRowStatus\": \"active\",\n            \"sapType\": \"epipe\",\n            \"sapDescription\": \"\",\n            \"sapAdminStatus\": \"up\",\n            \"sapOperStatus\": \"down\",\n            \"sapLastMgmtChange\": 2,\n            \"sapLastStatusChange\": 0,\n            \"hostname\": \"hostname=host.example.com\"\n         }\n    ],\n    \"count\": 1\n}\n</code></pre>"},{"location":"API/Services/","title":"Services","text":""},{"location":"API/Services/#list_services","title":"<code>list_services</code>","text":"<p>Retrieve all services</p> <p>Route: <code>/api/v0/services</code></p> <p>Input:</p> <ul> <li>state: only which have a certain state (valid options are 0=Ok, 1=Warning, 2=Critical).</li> <li>type: service type, used sql LIKE to find services, so for tcp, use type=tcp for http use type=http</li> </ul> <p>Example:</p> <pre><code>curl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/services\ncurl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/services?state=2\ncurl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/services?state=0&amp;type=tcp\n</code></pre> <p>Output:</p> <pre><code>{\n    \"status\": \"ok\",\n    \"message\": \"\",\n    \"count\": 1,\n    \"services\": [\n        [\n            {\n                \"service_id\": \"13\",\n                \"device_id\": \"1\",\n                \"service_ip\": \"demo1.yourdomian.net\",\n                \"service_type\": \"ntp_peer\",\n                \"service_desc\": \"NTP\",\n                \"service_param\": \"-H 192.168.1.10\",\n                \"service_ignore\": \"0\",\n                \"service_status\": \"0\",\n                \"service_changed\": \"1470962470\",\n                \"service_message\": \"NTP OK: Offset -0.000717 secs\",\n                \"service_disabled\": \"0\",\n                \"service_ds\": \"{\\\"offset\\\":\\\"s\\\"}\"\n            }\n        ],\n        [\n            {\n                \"service_id\": \"2\",\n                \"device_id\": \"2\",\n                \"service_ip\": \"demo2.yourdomian.net\",\n                \"service_type\": \"esxi_hardware.py\",\n                \"service_desc\": \"vmware hardware\",\n                \"service_param\": \"-H 192.168.1.11 -U USER -P PASS -p\",\n                \"service_ignore\": \"0\",\n                \"service_status\": \"0\",\n                \"service_changed\": \"1471702206\",\n                \"service_message\": \"OK - Server: Supermicro X9SCL/X9SCM s/n: 0123456789 System BIOS: 2.2 2015-02-20\",\n                \"service_disabled\": \"0\",\n                \"service_ds\": \"{\\\"P2Vol_0_Processor_1_Vcore\\\":\\\"\\\",\\\"P2Vol_1_System_Board_1_-12V\\\":\\\"\\\",\\\"P2Vol_2_System_Board_1_12V\\\":\\\"\\\",\\\"P2Vol_3_System_Board_1_3.3VCC\\\":\\\"\\\",\\\"P2Vol_4_System_Board_1_5VCC\\\":\\\"\\\",\\\"P2Vol_5_System_Board_1_AVCC\\\":\\\"\\\",\\\"P2Vol_6_System_Board_1_VBAT\\\":\\\"\\\",\\\"P2Vol_7_System_Board_1_\"\n            }\n        ]\n    ]\n}\n</code></pre>"},{"location":"API/Services/#get_service_for_host","title":"<code>get_service_for_host</code>","text":"<p>Retrieve services for device</p> <p>Route: <code>/api/v0/services/:hostname</code></p> <ul> <li>id or hostname is the specific device</li> </ul> <p>Input:</p> <ul> <li>state: only which have a certain state (valid options are 0=Ok, 1=Warning, 2=Critical).</li> <li>type: service type, used sql LIKE to find services, so for tcp, use   type=tcp for http use type=http</li> </ul> <p>Example:</p> <pre><code>curl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/services/:hostname\ncurl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/services/:hostname?state=2\ncurl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/services/:hostname?state=0&amp;type=tcp\n</code></pre> <p>Output:</p> <pre><code>{\n    \"status\": \"ok\",\n    \"message\": \"\",\n    \"count\": 1,\n    \"services\": [\n        [\n            {\n                \"service_id\": \"2\",\n                \"device_id\": \"2\",\n                \"service_ip\": \"demo2.yourdomian.net\",\n                \"service_type\": \"esxi_hardware.py\",\n                \"service_desc\": \"vmware hardware\",\n                \"service_param\": \"-H 192.168.1.11 -U USER -P PASS -p\",\n                \"service_ignore\": \"0\",\n                \"service_status\": \"0\",\n                \"service_changed\": \"1471702206\",\n                \"service_message\": \"OK - Server: Supermicro X9SCL/X9SCM s/n: 0123456789 System BIOS: 2.2 2015-02-20\",\n                \"service_disabled\": \"0\",\n                \"service_ds\": \"{\\\"P2Vol_0_Processor_1_Vcore\\\":\\\"\\\",\\\"P2Vol_1_System_Board_1_-12V\\\":\\\"\\\",\\\"P2Vol_2_System_Board_1_12V\\\":\\\"\\\",\\\"P2Vol_3_System_Board_1_3.3VCC\\\":\\\"\\\",\\\"P2Vol_4_System_Board_1_5VCC\\\":\\\"\\\",\\\"P2Vol_5_System_Board_1_AVCC\\\":\\\"\\\",\\\"P2Vol_6_System_Board_1_VBAT\\\":\\\"\\\",\\\"P2Vol_7_System_Board_1_\"\n            }\n        ]\n    ]\n}\n</code></pre>"},{"location":"API/Services/#add_service_for_host","title":"<code>add_service_for_host</code>","text":"<p>Add a service for device</p> <p>Route: <code>/api/v0/services/:hostname</code></p> <ul> <li>id or hostname is the specific device</li> </ul> <p>Input:</p> <ul> <li>type: service type</li> <li>ip: ip of the service</li> <li>desc: description for the service</li> <li>param: parameters for the service</li> <li>ignore: ignore the service for checks</li> </ul> <p>Example:</p> <pre><code>curl -X POST -d '{\"type\":\"ping\",\"ip\": \"192.168.1.10\",\"desc\":\"test ping\",\"param\": \"-t 10 -c 5\"}' -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/services/192.168.1.10\n</code></pre> <p>Output:</p> <pre><code>{\n    \"status\": \"ok\",\n    \"message\": \"Service ping has been added to device 192.168.1.10 (#10)\"\n}\n</code></pre>"},{"location":"API/Services/#edit_service_from_host","title":"<code>edit_service_from_host</code>","text":"<p>Edits a service</p> <p>Route: <code>/api/v0/services/:service_id</code></p> <ul> <li>service id</li> </ul> <p>Input:</p> <ul> <li>id: service id</li> </ul> <p>Example:</p> <pre><code>curl -X PATCH -d '{\"service_disabled\":\"1\"}' 'X-Auth-Token:YOUR-API-TOKEN' https://librenms.org/api/v0/services/5\n</code></pre> <p>Output:</p> <pre><code>{\n    \"status\": \"ok\",\n    \"message\": \"Service updated successfully\"\n\n}\n</code></pre>"},{"location":"API/Services/#delete_service_from_host","title":"<code>delete_service_from_host</code>","text":"<p>Deletes service from device</p> <p>Route: <code>/api/v0/services/:service_id</code></p> <ul> <li>service id</li> </ul> <p>Input:</p> <ul> <li>id: service id</li> </ul> <p>Example:</p> <pre><code>curl -X DELETE -H 'X-Auth-Token:YOUR-API-TOKEN' https://librenms.org/api/v0/services/35\n</code></pre> <p>Output:</p> <pre><code>{\n    \"status\": \"ok\",\n    \"message\": \"Service has been deleted successfully\"\n}\n</code></pre>"},{"location":"API/Switching/","title":"Switching","text":""},{"location":"API/Switching/#list_vlans","title":"<code>list_vlans</code>","text":"<p>Get a list of all VLANs.</p> <p>Route: <code>/api/v0/resources/vlans</code></p> <p>Input:</p> <p>-</p> <p>Example:</p> <pre><code>curl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/resources/vlans\n</code></pre> <p>Output:</p> <pre><code>{\n    \"status\": \"ok\",\n    \"vlans\": [\n        {\n            \"vlan_id\": \"31\",\n            \"device_id\": \"10\",\n            \"vlan_vlan\": \"1\",\n            \"vlan_domain\": \"1\",\n            \"vlan_name\": \"default\",\n            \"vlan_type\": \"ethernet\",\n            \"vlan_mtu\": null\n        },\n        ...\n    ],\n    \"count\": 100\n}\n</code></pre>"},{"location":"API/Switching/#get_vlans","title":"<code>get_vlans</code>","text":"<p>Get a list of all VLANs for a given device.</p> <p>Route: <code>/api/v0/devices/:hostname/vlans</code></p> <ul> <li>hostname can be either the device hostname or id</li> </ul> <p>Input:</p> <p>-</p> <p>Example:</p> <pre><code>curl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/devices/localhost/vlans\n</code></pre> <p>Output:</p> <pre><code>{\n    \"status\": \"ok\",\n    \"count\": 0,\n    \"vlans\": [\n    {\n   \"vlan_vlan\": \"1\",\n   \"vlan_domain\": \"1\",\n   \"vlan_name\": \"default\",\n   \"vlan_type\": \"ethernet\",\n   \"vlan_mtu\": null\n    }\n  ]\n}\n</code></pre>"},{"location":"API/Switching/#list_links","title":"<code>list_links</code>","text":"<p>Get a list of all Links.</p> <p>Route: <code>/api/v0/resources/links</code></p> <p>Input:</p> <p>-</p> <p>Example:</p> <pre><code>curl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/resources/links\n</code></pre> <p>Output:</p> <pre><code>{\n    \"status\": \"ok\",\n    \"links\": [\n        {\n            \"id\": 10,\n            \"local_port_id\": 100,\n            \"local_device_id\": 1,\n            \"remote_port_id\": 200,\n            \"active\": 1,\n            \"protocol\": \"lldp\",\n            \"remote_hostname\": \"host2.example.com\",\n            \"remote_device_id\": 2,\n            \"remote_port\": \"xe-0/0/1\",\n            \"remote_platform\": null,\n            \"remote_version\": \"Example Router v.1.0\"\n        },\n        ...\n    ],\n    \"count\": 100\n}\n</code></pre>"},{"location":"API/Switching/#get_links","title":"<code>get_links</code>","text":"<p>Get a list of Links per giver device.</p> <p>Route: <code>/api/v0/devices/:hostname/links</code></p> <ul> <li>hostname can be either the device hostname or id</li> </ul> <p>Input:</p> <p>-</p> <p>Example:</p> <pre><code>curl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/devices/localhost/links\n</code></pre> <p>Output:</p> <pre><code>{\n    \"status\": \"ok\",\n    \"links\": [\n        {\n            \"id\": 10,\n            \"local_port_id\": 100,\n            \"local_device_id\": 1,\n            \"remote_port_id\": 200,\n            \"active\": 1,\n            \"protocol\": \"lldp\",\n            \"remote_hostname\": \"host2.example.com\",\n            \"remote_device_id\": 2,\n            \"remote_port\": \"xe-0/0/1\",\n            \"remote_platform\": null,\n            \"remote_version\": \"Example Router v.1.0\"\n        },\n        ...\n    ],\n    \"count\": 10\n}\n</code></pre>"},{"location":"API/Switching/#get_link","title":"<code>get_link</code>","text":"<p>Retrieves Link by ID</p> <p>Route: <code>/api/v0/resources/links/:id</code></p> <p>Input:</p> <p>-</p> <p>Example:</p> <pre><code>curl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/resources/links/10\n</code></pre> <p>Output:</p> <pre><code>{\n    \"status\": \"ok\",\n    \"links\": [\n        {\n            \"id\": 10,\n            \"local_port_id\": 100,\n            \"local_device_id\": 1,\n            \"remote_port_id\": 200,\n            \"active\": 1,\n            \"protocol\": \"lldp\",\n            \"remote_hostname\": \"host2.example.com\",\n            \"remote_device_id\": 2,\n            \"remote_port\": \"xe-0/0/1\",\n            \"remote_platform\": null,\n            \"remote_version\": \"Example Router v.1.0\"\n        }\n    ],\n    \"count\": 1\n}\n</code></pre>"},{"location":"API/Switching/#list_fdb","title":"<code>list_fdb</code>","text":"<p>Get a list of all ports FDB.</p> <p>Route: <code>/api/v0/resources/fdb/:mac</code></p> <ul> <li>mac is the specific MAC address you would like to query</li> </ul> <p>Input:</p> <p>-</p> <p>Example:</p> <pre><code>curl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/resources/fdb\ncurl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/resources/fdb/1aaa2bbb3ccc\n</code></pre> <p>Output:</p> <pre><code>{\n    \"status\": \"ok\",\n    \"ports_fdb\": [\n        {\n            \"ports_fdb_id\": 10,\n            \"port_id\": 10000,\n            \"mac_address\": \"1aaa2bbb3ccc\",\n            \"vlan_id\": 20000,\n            \"device_id\": 1,\n            \"created_at\": \"2019-01-1 01:01:01\",\n            \"updated_at\": \"2019-01-1 01:01:01\"\n        },\n        ...\n    ],\n    \"count\": 100\n}\n</code></pre>"},{"location":"API/Switching/#list_fdb_detail","title":"<code>list_fdb_detail</code>","text":"<p>Get a list of all ports FDB with human readable device  and interface names.</p> <p>Route: <code>/api/v0/resources/fdb/:mac/detail</code></p> <ul> <li>mac is the specific MAC address you would like to query</li> </ul> <p>Input:</p> <p>-</p> <p>Example: <pre><code>curl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/resources/fdb/1aaa2bbb3ccc/detail\n</code></pre></p> <p>Output: <pre><code>{\n    'count': 7,\n    'mac': '9c:93:aa:bb:cc:dd',\n    'mac_oui': 'Xerox Corporation',\n    'ports_fdb': [\n        {\n            'hostname': 'hq-core1',\n            'sysName': 'hq-core1',\n            'ifName': 'ae10',\n            'ifAlias': 'ae10',\n            'ifDescr': 'ae10',\n            'last_seen': '2 hours ago',\n            'updated_at': '2023-05-17 03:19:15'\n        },\n        {\n            'hostname': 'hq-sw1',\n            'sysName': 'hq-sw1',\n            'ifName': 'ge-0/0/0',\n            'ifAlias': 'ge-0/0/0',\n            'ifDescr': 'ge-0/0/0',\n            'last_seen': '3 hours ago',\n            'updated_at': '2023-05-17 02:02:06'\n        },\n        ...\n    ],\n    'status': 'ok'\n}\n</code></pre></p>"},{"location":"API/Switching/#list_nac","title":"<code>list_nac</code>","text":"<p>Get a list of all ports NAC.</p> <p>Route: <code>/api/v0/resources/nac/:mac</code></p> <ul> <li>mac is the specific MAC address you would like to query</li> </ul> <p>Input:</p> <p>-</p> <p>Example:</p> <pre><code>curl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/resources/nac\ncurl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/resources/nac/1aaa2bbb3ccc\n</code></pre> <p>Output:</p> <pre><code>{\n    \"status\": \"ok\",\n    \"ports_nac\": [\n        {\n            \"ports_nac_id\": 1,\n            \"auth_id\": \"0000000000000AAAABBBB8CC\",\n            \"device_id\": 3,\n            \"port_id\": 6,\n            \"domain\": \"data\",\n            \"username\": \"hostname.librenms.org\",\n            \"mac_address\": \"1aaa2bbb3ccc\",\n            \"ip_address\": \"192.0.2.2\",\n            \"host_mode\": \"singleHost\",\n            \"authz_status\": \"authorizationSuccess\",\n            \"authz_by\": \"Authentication Server\",\n            \"authc_status\": \"authcSuccess\",\n            \"method\": \"dot1x\",\n            \"timeout\": \"0\",\n            \"time_left\": \"0\",\n            \"vlan\": 0,\n            \"time_elapsed\": null,\n            \"created_at\": \"2025-05-08T08:55:06.000000Z\",\n            \"updated_at\": \"2025-05-08T08:55:06.000000Z\",\n            \"historical\": 0\n        }\n    ]\n}\n</code></pre>"},{"location":"API/System/","title":"System","text":""},{"location":"API/System/#system","title":"<code>system</code>","text":"<p>Display Librenms instance information.</p> <p>Route: <code>/api/v0/system</code></p> <p>Input:</p> <p>-</p> <p>Example:</p> <pre><code>curl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/system\n</code></pre> <p>Output:</p> <pre><code>{\n    \"status\": \"ok\",\n    \"system\": [\n        {\n            \"local_ver\": \"1.37-234-g19103ee\",\n            \"local_sha\": \"19103ee36f68f009272c15be22e5a7e10a8b0b85\",\n            \"local_date\": \"1526480966\",\n            \"local_branch\": \"master\",\n            \"db_schema\": 249,\n            \"php_ver\": \"7.2.2\",\n            \"database_ver\": \"MariaDB 5.5.56-MariaDB\",\n            \"rrdtool_ver\": \"1.4.8\",\n            \"netsnmp_ver\": \"NET-SNMP 5.7.2\"\n        }\n    ],\n    \"count\": 1\n}\n</code></pre>"},{"location":"Alerting/","title":"Introduction","text":"<p>To get started, you first need some alert rules which will react to changes with your devices before raising an alert.</p> <p>Creating alert rules</p> <p>After that you also need to tell LibreNMS how to notify you when an alert is raised, this is done using <code>Alert Transports</code>.</p> <p>Configuring alert transports</p> <p>The next step is not strictly required but most people find it useful. Creating custom alert templates will help you get the benefit out of the alert system in general. Whilst we include a default template, it is limited in the data that you will receive in the alerts.</p> <p>Configuring alert templates</p>"},{"location":"Alerting/#managing-alerts","title":"Managing alerts","text":"<p>When an alert has triggered you will see these in the Alerts -&gt; Notifications page within the Web UI.</p> <p>This list has a couple of options available to it and we'll explain what these are here.</p>"},{"location":"Alerting/#ack","title":"ACK","text":"<p>This column provides you visibility on the status of the alert:</p> <p> This alert is currently active and sending alerts. Click this icon to acknowledge the alert.</p> <p> This alert is currently acknowledged until the alert clears. Click this icon to un-acknowledge the alert.</p> <p> This alert is currently acknowledged until the alert worsens, gets better or changes, at which stage it will be automatically unacknowledged and alerts will resume. Click this icon to un-acknowledge the alert.</p>"},{"location":"Alerting/#notes","title":"Notes","text":"<p> This column will allow you access to the acknowledge/unacknowledge notes for this alert.</p>"},{"location":"Alerting/Creating-Transport/","title":"Creating a new Transport","text":""},{"location":"Alerting/Creating-Transport/#file-location","title":"File location","text":"<p>All transports are located in <code>LibreNMS\\Alert\\Transport</code> and the files are named after the Transport name. I.e <code>Discord.php</code> for Discord.</p>"},{"location":"Alerting/Creating-Transport/#transport-structure","title":"Transport structure","text":"<p>The following functions are required for a new transport to pass the unit tests:</p> <p><code>deliverAlert()</code> - This is function called within alerts to invoke the transport. Here you should do any post processing of the transport config to get it ready for use.</p> <p><code>contact$Transport()</code> - This is named after the transport so for Discord it would be <code>contactDiscord()</code>. This is what actually interacts with the 3rd party API, invokes the mail command or whatever you want your alert to do.</p> <p><code>configTemplate()</code> - This is used to define the form that will accept the transport config in the webui and then what data should be validated and how. Validation is done using Laravel validation</p>"},{"location":"Alerting/Creating-Transport/#documentation","title":"Documentation","text":"<p>Please don't forget to create a documentation file <code>doc/Alerting/Transports/$Transport.md</code> file to include details of your new transport.</p> <p>A table should be provided to indicate the form values that we ask for and examples. I.e:</p> Config Example Discord URL https://discordapp.com/api/webhooks/4515489001665127664/82-sf4385ysuhfn34u2fhfsdePGLrg8K7cP9wl553Fg6OlZuuxJGaa1d54fe Options username=myname <p>Please also ensure that you link back to any 3rd party documentation that will help users understand how the transport can be used.</p>"},{"location":"Alerting/Device-Dependencies/","title":"Device Dependencies","text":"<p>It is possible to set one or more parents for a device. The aim for that is, if all parent devices are down, alert transports will not receive redundant alerts for the dependent devices. This is very useful when you have an outage, say in a branch office, where normally you'd receive hundreds of alerts, but when this is properly configured, you'd only receive an alert for the parent host(s).</p> <p>There are three ways to configure this feature. First one is from general settings of a device. The other two can be done in the 'Device Dependencies' item under 'Devices' menu. In this page, you can see all devices and with its parents. Clicking on the 'bin' icon will clear the dependency setting. Clicking on the 'pen' icon will let you edit or change the current setting for chosen device. There's also a 'Manage Device Dependencies' button on the top. This will let you set parents for multiple devices at once.</p> <p>For an intro on getting started with Device Dependencies, take a look at our Youtube video</p>"},{"location":"Alerting/Entities/","title":"Entities","text":"<p>Entities as described earlier are based on the table and column names within the database, if you are unsure of what the entity is you want then have a browse around inside MySQL using <code>show tables</code> and <code>desc &lt;tablename&gt;</code>.</p> <p>Below are some common entities that you can use within the alerting system. This list is not exhaustive and you should look at the MySQL database schema for the full list.</p>"},{"location":"Alerting/Entities/#devices","title":"Devices","text":"Entity Description <code>devices.hostname</code> The device hostname <code>devices.sysName</code> The device sysName <code>devices.sysDescr</code> The device sysDescr <code>devices.hardware</code> The device hardware <code>devices.version</code> The device os version <code>devices.location</code> The device location <code>devices.status</code> The status of the device, 1 <code>devices.status_reason</code> The reason the device was detected as down (icmp or snmp) <code>devices.ignore</code> If the device is ignored this will be set to 1 <code>devices.disabled</code> If the device is disabled this will be set to 1 <code>devices.last_polled</code> The the last polled datetime (yyyy-mm-dd hh:mm:ss) <code>devices.type</code> The device type such as network, server, firewall, etc."},{"location":"Alerting/Entities/#bgp-peers","title":"BGP Peers","text":"Entity Description <code>bgpPeers.astext</code> This is the description of the BGP Peer <code>bgpPeers.bgpPeerIdentifier</code> The IP address of the BGP Peer <code>bgpPeers.bgpPeerRemoteAs</code> The AS number of the BGP Peer <code>bgpPeers.bgpPeerState</code> The operational state of the BGP session <code>bgpPeers.bgpPeerAdminStatus</code> The administrative state of the BGP session <code>bgpPeers.bgpLocalAddr</code> The local address of the BGP session."},{"location":"Alerting/Entities/#ipsec-tunnels","title":"IPSec Tunnels","text":"Entity Description <code>ipsec_tunnels.peer_addr</code> The remote VPN peer address <code>ipsec_tunnels.local_addr</code> The local VPN address <code>ipsec_tunnels.tunnel_status</code> The VPN tunnels operational status."},{"location":"Alerting/Entities/#memory-pools","title":"Memory pools","text":"Entity Description <code>mempools.mempool_type</code> The memory pool type such as hrstorage, cmp and cemp <code>mempools.mempool_descr</code> The description of the pool such as Physical memory, Virtual memory and System memory <code>mempools.mempool_perc</code> The used percentage of the memory pool."},{"location":"Alerting/Entities/#ports","title":"Ports","text":"Entity Description <code>ports.ifDescr</code> The interface description <code>ports.ifName</code> The interface name <code>ports.ifSpeed</code> The port speed in bps <code>ports.ifHighSpeed</code> The port speed in mbps <code>ports.ifOperStatus</code> The operational status of the port (up or down) <code>ports.ifAdminStatus</code> The administrative status of the port (up or down) <code>ports.ifDuplex</code> Duplex setting of the port <code>ports.ifMtu</code> The MTU setting of the port."},{"location":"Alerting/Entities/#processors","title":"Processors","text":"Entity Description <code>processors.processor_usage</code> The usage of the processor as a percentage <code>processors.processor_descr</code> The description of the processor."},{"location":"Alerting/Entities/#storage","title":"Storage","text":"Entity Description <code>storage.storage_descr</code> The description of the storage <code>storage.storage_perc</code> The usage of the storage as a percentage."},{"location":"Alerting/Entities/#health-sensors","title":"Health / Sensors","text":"Entity Description <code>sensors.sensor_desc</code> The sensors description. <code>sensors.sensor_current</code> The current sensors value. <code>sensors.sensor_prev</code> The previous sensor value. <code>sensors.lastupdate</code> The sensors last updated datetime stamp."},{"location":"Alerting/Macros/","title":"Macros","text":"<p>Macros are shorthands to either portion of rules or pure SQL enhanced with placeholders.</p> <p>Macros can be defined through the <code>lnms</code> command. Using the <code>config.php</code> is discouraged but supported. A macro can either be truthful (boolean test) or return a value (integer, float, string) that can be used in the rule.</p> <p>Example for adding a a macro that returns the delta of a sensor:</p> <pre><code>lnms config:set alert.macros.rule.sensor_delta_current 'ABS(%sensors.sensor_current - %sensors.sensor_prev)'\n</code></pre> <p>Example for adding macro through <code>config.php</code> that is a boolean test:</p> <pre><code>$config['alert']['macros']['rule']['is_debian'] = '%devices.features ~ \"@debian@\"';\n</code></pre> <p>These rules can then be used in the alerting rules. Example:</p> <pre><code>... macros.sensor_delta_current &gt; 10 AND macros.rule.is_debian = 1 ...\n</code></pre>"},{"location":"Alerting/Macros/#writing-macros","title":"Writing Macros","text":"<p>The naming of the macro determines the type of the macro. If the macro name ends with <code>_perc</code> it interpreted as integer allowing for a comparison of the value. Any other name is a boolean test that will appear as <code>yes</code> or <code>no</code> selection in the rule.</p> <p>The macro can contain placeholders that are replaced with the actual values when the rule is evaluated. The placeholders are prefixed with <code>%</code> that represents the actual value of the sensor, port, device, etc. For example <code>%sensors.sensor_current</code> will be replaced with the actual value of the sensor. While the prefix <code>%</code> is optional, it is recommended to use it to avoid ambiguity.</p> <p>The contents of a macro can be any valid SQL statement or valid rule expression.</p>"},{"location":"Alerting/Macros/#pre-defined-macros","title":"Pre-defined Macros","text":""},{"location":"Alerting/Macros/#billing","title":"Billing","text":""},{"location":"Alerting/Macros/#over-quota-boolean","title":"Over quota (Boolean)","text":"<p>Entity: <code>macros.bill_quota_over_quota</code></p> <p>Description: true or false if the bill is over quota.</p> <p>Source: <code>((bills.total_data \\/ bills.bill_quota)*100) &amp;&amp; bills.bill_type = \"quota\"</code></p>"},{"location":"Alerting/Macros/#over-usage-boolean","title":"Over usage (Boolean)","text":"<p>Entity: <code>macros.bill_cdr_over_quota</code></p> <p>Description: true or false if the bill is over usage.</p> <p>Source: <code>((bills.rate_95th \\/ bills.bill_cdr)*100) &amp;&amp; bills.bill_type = \"cdr\"</code></p>"},{"location":"Alerting/Macros/#components","title":"Components","text":""},{"location":"Alerting/Macros/#component-boolean","title":"Component (Boolean)","text":"<p>Entity: <code>macros.component</code></p> <p>Description: Only select components that aren't deleted, ignored or disabled.</p> <p>Source: <code>(component.disabled = 0 &amp;&amp; component.ignore = 0)</code></p>"},{"location":"Alerting/Macros/#component-critical-boolean","title":"Component (Critical) (Boolean)","text":"<p>Entity: <code>macros.component_critical</code></p> <p>Description: Only select components that are in a critical state.</p> <p>Source: <code>(component.status = 2 &amp;&amp; macros.component)</code></p>"},{"location":"Alerting/Macros/#component-up-boolean","title":"Component (Up) (Boolean)","text":"<p>Entity: <code>macros.component_normal</code></p> <p>Description: Only select components that are in a normal state.</p> <p>Source: <code>(component.status = 0 &amp;&amp; macros.component)</code></p>"},{"location":"Alerting/Macros/#component-warning-boolean","title":"Component (Warning) (Boolean)","text":"<p>Entity: <code>macros.component_warning</code></p> <p>Description: Only select components that are in a warning state.</p> <p>Source: <code>(component.status = 1 &amp;&amp; macros.component)</code></p>"},{"location":"Alerting/Macros/#device","title":"Device","text":""},{"location":"Alerting/Macros/#device-boolean","title":"Device (Boolean)","text":"<p>Entity: <code>macros.device</code></p> <p>Description: Only select devices that aren't deleted, ignored or disabled.</p> <p>Source: <code>(devices.disabled = 0 AND devices.ignore = 0)</code></p>"},{"location":"Alerting/Macros/#device-component-down-junos","title":"Device component down [JunOS]","text":"<p>Entity: <code>macros.device_component_down_junos</code></p> <p>Description: Device component is down such as Fan, PSU, etc for JunOS devices.</p> <p>source. <code>sensors.sensor_class = \"state\" &amp;&amp; sensors.sensor_current != \"6\" &amp;&amp; (sensors.sensor_type = \"jnxFruState\" || sensors.sensor_type = \"jnxFruTable\") &amp;&amp; sensors.sensor_current != \"2\" &amp;&amp; sensors.sensor_alert = \"1\"</code></p>"},{"location":"Alerting/Macros/#device-component-down-cisco","title":"Device component down [Cisco]","text":"<p>Entity: <code>macros.device_component_down_cisco</code></p> <p>Description: Device component is down such as Fan, PSU, etc for Cisco devices.</p> <p>Example: <code>sensors.sensor_current != \"1\" &amp;&amp; sensors.sensor_current != \"5\" &amp;&amp; sensors.sensor_type REGEXP \"^cisco.*State$\" &amp;&amp; sensors.sensor_alert = \"1\"</code></p>"},{"location":"Alerting/Macros/#device-is-up-boolean","title":"Device is up (Boolean)","text":"<p>Entity: <code>macros.device_up</code></p> <p>Description: Only select devices that are up.</p> <p>Implies: macros.device</p> <p>Source: <code>(devices.status = 1 AND macros.device)</code></p>"},{"location":"Alerting/Macros/#device-is-down-boolean","title":"Device is down (Boolean)","text":"<p>Entity: <code>macros.device_down</code></p> <p>Description: Only select devices that are down.</p> <p>Implies: macros.device</p> <p>Source: <code>(devices.status = 0 AND macros.device)</code></p>"},{"location":"Alerting/Macros/#time","title":"Time","text":""},{"location":"Alerting/Macros/#now-datetime","title":"Now (Datetime)","text":"<p>Entity: <code>macros.now</code></p> <p>Description: Alias of MySQL built-in <code>NOW()</code> function.</p> <p>Source: <code>NOW()</code></p>"},{"location":"Alerting/Macros/#past-n-minutes-datetime","title":"Past N Minutes (Datetime)","text":"<p>Entity: <code>macros.past_$m</code></p> <p>Description: Returns a MySQL Timestamp dated <code>$</code> Minutes in the past. <code>$</code> can only be a supported Resolution.</p> <p>Example: <code>macros.past_5m</code> is Last 5 Minutes.</p> <p>Resolution: 5,10,15,30,60</p> <p>Source: <code>DATE_SUB(NOW(),INTERVAL $ MINUTE)</code></p>"},{"location":"Alerting/Macros/#packet-loss","title":"Packet Loss","text":"<p>Entity: <code>(macros.packet_loss_5m)</code></p> <p>Description: Packet loss % value for the device within the last 5 minutes. BROKEN, only return 100 (down) or 0.</p> <p>Example: <code>macros.packet_loss_5m</code> &gt; 50</p> <p>Entity: <code>(macros.packet_loss_15m)</code></p> <p>Description: Packet loss % value for the device within the last 15 minutes. BROKEN, only return 100 (down) or 0.</p> <p>Example: <code>macros.packet_loss_15m</code> &gt; 50</p>"},{"location":"Alerting/Macros/#ports","title":"Ports","text":""},{"location":"Alerting/Macros/#port-boolean","title":"Port (Boolean)","text":"<p>Entity: <code>macros.port</code></p> <p>Description: Only select ports that aren't deleted, ignored or disabled.</p> <p>Source: <code>(ports.deleted = 0 AND ports.ignore = 0 AND ports.disabled = 0)</code></p>"},{"location":"Alerting/Macros/#port-out-error-percent-decimal","title":"Port out error percent (Decimal)","text":"<p>Entity: <code>macros.port_out_error_perc</code></p> <p>Description: Return port out error percent.</p> <p>Source: <code>((ports.ifOutErrors_rate / ports.ifOutUcastPkts_rate)*100)</code></p>"},{"location":"Alerting/Macros/#port-in-error-percent-decimal","title":"Port in error percent (Decimal)","text":"<p>Entity: <code>macros.port_in_error_perc</code></p> <p>Description: Return port in error percent.</p> <p>Source: <code>((ports.ifInErrors_rate / ports.ifInUcastPkts_rate)*100)</code></p>"},{"location":"Alerting/Macros/#port-is-up-boolean","title":"Port is up (Boolean)","text":"<p>Entity: <code>macros.port_up</code></p> <p>Description: Only select ports that are up and also should be up.</p> <p>Implies: macros.port</p> <p>Source: <code>(ports.ifOperStatus = up AND ports.ifAdminStatus = up AND macros.port)</code></p>"},{"location":"Alerting/Macros/#port-is-down-boolean","title":"Port is down (Boolean)","text":"<p>Entity: <code>macros.port_down</code></p> <p>Description: Only select ports that are down.</p> <p>Implies: macros.port</p> <p>Source: <code>(ports.ifOperStatus != \"up\" AND ports.ifAdminStatus != \"down\" AND macros.port)</code></p>"},{"location":"Alerting/Macros/#port-usage-in-percent-decimal","title":"Port-Usage in Percent (Decimal)","text":"<p>Entity: <code>macros.port_usage_perc</code></p> <p>Description: Return port-usage (max value of in and out) in percent.</p> <p>Source: <code>((SELECT IF(ports.ifOutOctets_rate&gt;ports.ifInOctets_rate, ports.ifOutOctets_rate, ports.ifInOctets_rate)*8) / ports.ifSpeed)*100</code></p>"},{"location":"Alerting/Macros/#ports-in-usage-perc-int","title":"Ports in usage perc (Int)","text":"<p>Entity: <code>macros.port_in_usage_perc</code></p> <p>Description: </p> <p>Source: <code>((ports.ifInOctets_rate*8) \\/ ports.ifSpeed)*100</code></p>"},{"location":"Alerting/Macros/#ports-out-usage-perc-int","title":"Ports out usage perc (Int)","text":"<p>Entity: <code>((ports.ifOutOctets_rate*8)/ports.ifSpeed)*100</code></p> <p>Description: </p> <p>Source: <code>((ports.ifOutOctets_rate*8) \\/ ports.ifSpeed)*100</code></p>"},{"location":"Alerting/Macros/#port-now-down-boolean","title":"Port now down (Boolean)","text":"<p>Entity: <code>macros.port_now_down</code></p> <p>Description: Ports that were previously up and have now gone down.</p> <p>Source: <code>ports.ifOperStatus != ports.ifOperStatus_prev &amp;&amp; ports.ifOperStatus_prev = \"up\" &amp;&amp; ports.ifAdminStatus = \"up\" &amp;&amp; macros.port</code></p>"},{"location":"Alerting/Macros/#port-has-xdp-neighbour-boolean","title":"Port has xDP neighbour (Boolean)","text":"<p>Entity: <code>macros.port_has_xdp_neighbours</code></p> <p>Description: Ports that have an xDP (lldp, cdp, etc) neighbour.</p> <p>Source: <code>(macros.port &amp;&amp; links.local_port_id = ports.port_id)</code></p>"},{"location":"Alerting/Macros/#port-has-xdp-neighbour-already-known-in-librenms-boolean","title":"Port has xDP neighbour already known in LibreNMS (Boolean)","text":"<p>Entity: <code>macros.port_has_xdp_neighbours_device</code></p> <p>Description: Ports that have an xDP (lldp, cdp, etc) neighbour that is already known in LibreNMS.</p> <p>Source: <code>(macros.port_has_xdp_neighbours &amp;&amp; links.remote_port_id IS NOT NULL)</code></p>"},{"location":"Alerting/Macros/#sensors","title":"Sensors","text":""},{"location":"Alerting/Macros/#sensor-boolean","title":"Sensor (Boolean)","text":"<p>Entity: <code>macros.sensor</code></p> <p>Description: Only select sensors that aren't ignored.</p> <p>Source: <code>(sensors.sensor_alert = 1)</code></p>"},{"location":"Alerting/Macros/#sensor-port-link-boolean","title":"Sensor Port Link (Boolean)","text":"<p>Entity: <code>macros.sensor_port_link</code></p> <p>Description: Only selects sensors that have a port linked to them, the port is up and the device is up.</p> <p>Source: <code>(sensors.entPhysicalIndex_measured = \"port\" AND sensors.entPhysicalIndex = ports.ifIndex AND macros.port_up AND macros.port_up)</code></p>"},{"location":"Alerting/Macros/#state-sensors-critical-boolean","title":"State Sensors critical (Boolean)","text":"<p>Entity: <code>macros.state_sensor_critical</code></p> <p>Description: Only select state sensors that are in a critical state.</p> <p>Source: <code>(sensors.sensor_current = state_translations.state_value AND state_translations.state_generic_value = 2)</code></p>"},{"location":"Alerting/Macros/#state-sensors-ok-boolean","title":"State Sensors ok (Boolean)","text":"<p>Entity: <code>macros.state_sensor_ok</code></p> <p>Description: Only select state sensors that are in a ok state.</p> <p>Source: <code>(sensors.sensor_current = state_translations.state_value AND state_translations.state_generic_value = 0)</code></p>"},{"location":"Alerting/Macros/#state-sensors-unknown-boolean","title":"State Sensors unknown (Boolean)","text":"<p>Entity: <code>macros.state_sensor_unknown</code></p> <p>Description: Only select state sensors that are in a unknown state.</p> <p>Source: <code>(sensors.sensor_current = state_translations.state_value AND state_translations.state_generic_value = 3)</code></p>"},{"location":"Alerting/Macros/#state-sensors-warning-boolean","title":"State Sensors warning (Boolean)","text":"<p>Entity: <code>macros.state_sensor_warning</code></p> <p>Description: Only select state sensors that are in a warning state.</p> <p>Source: <code>(sensors.sensor_current = state_translations.state_value AND state_translations.state_generic_value = 1)</code></p>"},{"location":"Alerting/Macros/#misc","title":"Misc","text":""},{"location":"Alerting/Macros/#pdu-over-amperage-apc","title":"PDU over amperage [APC]","text":"<p>Entity: <code>macros.pdu_over_amperage_apc</code></p> <p>Description: APC PDU over amperage</p> <p>Source: <code>sensors.sensor_class = \"current\" &amp;&amp; sensors.sensor_descr = \"Bank Total\" &amp;&amp; sensors.sensor_current &gt; sensors.sensor_limit &amp;&amp; devices.os = \"apc\"</code></p>"},{"location":"Alerting/Macros/#custom-macros","title":"Custom Macros","text":"<p>Below are some examples of custom macros that can be be added.</p>"},{"location":"Alerting/Macros/#sensor-delta-current-decimal","title":"Sensor Delta Current (Decimal)","text":"<p>Entity: <code>macros.sensor_delta_current</code></p> <p>Description: Returns the delta of a sensor.</p> <p>Source: <code>ABS(sensors.sensor_current - sensors.sensor_prev)</code></p>"},{"location":"Alerting/Macros/#sensor-change-percent-decimal","title":"Sensor Change percent (Decimal)","text":"<p>Entity: <code>macros.sensor_change_perc</code></p> <p>Description: Returns the percent change of a sensor.</p> <p>Source: <code>ABS((CAST(sensors.sensor_current as double) - sensors.sensor_prev)/sensors.sensor_current * 100)</code></p>"},{"location":"Alerting/Rules/","title":"Rules","text":"<p>Rules are defined using a logical language.</p> <p>The GUI provides a simple way of creating rules.</p> <p>Creating more complicated rules which may include maths calculations and MySQL queries can be done using macros</p>"},{"location":"Alerting/Rules/#syntax","title":"Syntax","text":"<p>Rules must consist of at least 3 elements: An Entity, a Condition and a Value. Rules can contain braces and Glues. Entities are provided from Table and Field from the database. For Example: <code>ports.ifOperStatus</code>.</p> <p>Conditions can be any of:</p> <ul> <li>Equals <code>=</code></li> <li>Not Equals <code>!=</code></li> <li>In <code>IN</code></li> <li>Not In <code>NOT IN</code></li> <li>Begins with <code>LIKE ('...%')</code></li> <li>Doesn't begin with <code>NOT LIKE ('...%')</code></li> <li>Contains <code>LIKE ('%...%')</code></li> <li>Doesn't Contain <code>NOT LIKE ('%...%')</code></li> <li>Ends with <code>LIKE ('%...')</code></li> <li>Doesn't end with <code>NOT LIKE ('%...')</code></li> <li>Between <code>BETWEEN</code></li> <li>Not Between <code>NOT BETWEEN</code></li> <li>Is Empty <code>= ''</code></li> <li>Is Not Empty <code>!= '''</code></li> <li>Is Null <code>IS NULL</code></li> <li>Is Not Null <code>IS NOT NULL</code></li> <li>Greater <code>&gt;</code></li> <li>Greater or Equal <code>&gt;=</code></li> <li>Less <code>&lt;</code></li> <li>Less or Equal <code>&lt;=</code></li> <li>Regex <code>REGEXP</code></li> </ul> <p>Values can be an entity or any data. If using macros as value you must include the macro name into backticks. i.e. `macros.past_60m`</p> <p>Note: Regex supports MySQL Regular expressions.</p> <p>Arithmetics are allowed as well.</p>"},{"location":"Alerting/Rules/#options","title":"Options","text":"<p>Here are some of the other options available when adding an alerting rule:</p> <ul> <li>Rule name: The name associated with the rule.</li> <li>Severity: How \"important\" the rule is.</li> <li>Max alerts: The maximum number of alerts sent for the event.  <code>-1</code> means unlimited.</li> <li>Delay: The amount of time in seconds to wait after a rule is matched   before sending an alert out transport.</li> <li>Interval: The interval of time in seconds between alerts for an   event until Max alert is reached.</li> <li>Mute alerts: Disables sending alert rule through alert   transport. But will still show the alert in the Web UI.</li> <li>Invert match: Invert the matching rule (ie. alert on items that   _don't match the rule).</li> <li>Recovery alerts: This will disable the recovery notification from   being sent if turned off.</li> </ul>"},{"location":"Alerting/Rules/#advanced","title":"Advanced","text":"<p>On the Advanced tab, you can specify some additional options for the alert rule:</p> <ul> <li>Override SQL: Enable this if you using a custom query</li> <li> <p>Query: The query to be used for the alert.</p> </li> <li> <p>An example of this would be an average rule for all CPUs over 10%</p> </li> </ul> <pre><code>SELECT devices.*,AVG(processors.processor_usage) AS cpu_avg, processors.* FROM \ndevices INNER JOIN processors ON devices.device_id \n= processors.device_id WHERE devices.device_id \n= ? AND devices.status = 1 AND devices.disabled = \n0 AND devices.ignore = 0 GROUP BY devices.device_id, \ndevices.status, devices.disabled, devices.ignore \nHAVING AVG(processors.processor_usage) \n&gt; 10;\n</code></pre> <p>Note</p> <p>The 10 would then contain the average CPU usage value, you can change this value to be whatever you like. You will to need copy and paste this into the Alert Rule under Advanced then paste into Query box and switch the Override SQL.</p>"},{"location":"Alerting/Rules/#procedure","title":"Procedure","text":"<p>You can provide procedure URL when creating the rule. Only links like \"http://\" are supported, otherwise an error will be returned. Once configured, procedures can be opened from the Alert widget through the \"Open\" button, which can be shown/hidden from the widget configuration box.</p>"},{"location":"Alerting/Rules/#examples","title":"Examples","text":"<p>Alert when:</p> <ul> <li>Device goes down: <code>devices.status != 1</code></li> <li>Any port changes: <code>ports.ifOperStatus != 'up'</code></li> <li>Root-directory gets too full: <code>storage.storage_descr = '/' AND   storage.storage_perc &gt;= '75'</code></li> <li>Any storage gets fuller than the 'warning': <code>storage.storage_perc &gt;= storage_perc_warn</code></li> <li>If device is a server and the used storage is above the warning   level, but ignore /boot partitions: <code>storage.storage_perc &gt;   storage.storage_perc_warn AND devices.type = \"server\" AND   storage.storage_descr != \"/boot\"</code></li> <li>VMware LAG is not using \"Source ip address hash\" load balancing:   <code>devices.os = \"vmware\" AND ports.ifType = \"ieee8023adLag\" AND   ports.ifDescr REGEXP \"Link Aggregation .*, load balancing algorithm:   Source ip address hash\"</code></li> <li>Syslog, authentication failure during the last 5m:   <code>syslog.timestamp &gt;= macros.past_5m AND syslog.msg REGEXP \".*authentication failure.*\"</code></li> <li>High memory usage: <code>macros.device_up = 1 AND mempools.mempool_perc &gt;=  90 AND mempools.mempool_descr REGEXP \"Virtual.*\"</code></li> <li>High CPU usage(per core usage, not overall): <code>macros.device_up   = 1 AND processors.processor_usage &gt;= 90</code></li> <li>High port usage, where description is not client &amp; ifType is not   softwareLoopback: <code>macros.port_usage_perc &gt;= 80 AND   port.port_descr_type != \"client\" AND ports.ifType != \"softwareLoopback\"</code></li> <li>Alert when mac address is located on your network <code>ipv4_mac.mac_address = \"2c233a756912\"</code></li> </ul>"},{"location":"Alerting/Rules/#alert-rules-collection","title":"Alert Rules Collection","text":"<p>You can also select Alert Rule from the Alerts Collection. These Alert Rules are submitted by users in the community :) If would like to submit your alert rules to the collection, please submit them here Alert Rules Collection</p> <p></p>"},{"location":"Alerting/Templates/","title":"Templates","text":"<p>Templates can be assigned to a single rule or a group of rules and can contain any kind of text. There is also a default template which is used for any rule that isn't associated with a template. This template can be found under <code>Alert Templates</code> page and can be edited. It also has an option revert it back to its default content.</p> <p>To attach a template to a rule just open the <code>Alert Templates</code> settings page, choose the template to assign and click the yellow button in the <code>Actions</code> column. In the appearing popup box select the rule(s) you want the template to be assigned to and click the <code>Attach</code> button. You might hold down the CTRL key to select multiple rules at once.</p> <p>Note</p> <p>Only one template can be associated with a rule at a time.</p> <p>Alert templates are based on Laravel Blade. We will cover some of the basics here, however the official Laravel docs will have more information here.</p>"},{"location":"Alerting/Templates/#syntax","title":"Syntax","text":"<p>Controls:</p> <ul> <li>if-else (Else can be omitted): <code>@if ($alert-&gt;placeholder  ==   'value') Some Text @else Other Text @endif</code></li> <li>foreach-loop: <code>@foreach ($alert-&gt;faults as $key =&gt; $value) Key: $key Value: $value @endforeach</code></li> </ul> <p>Placeholders:</p> <p>Placeholders are special variables that if used within the template will be replaced with the relevant data, I.e:</p> <p><code>The device {{ $alert-&gt;hostname }} has been up for {{ $alert-&gt;uptime }} seconds</code> would result in the following <code>The device localhost has been up for 30344 seconds</code>.</p> <p>Note</p> <p>When using placeholders to output data, you need to wrap the placeholder in <code>{{ }}</code>. I.e <code>{{ $alert-&gt;hostname }}</code>.</p> <ul> <li>Device ID: <code>$alert-&gt;device_id</code></li> <li>Hostname of the Device: <code>$alert-&gt;hostname</code></li> <li>sysName of the Device: <code>$alert-&gt;sysName</code></li> <li>sysDescr of the Device: <code>$alert-&gt;sysDescr</code></li> <li>display name of the Device: <code>$alert-&gt;display</code></li> <li>sysContact of the Device: <code>$alert-&gt;sysContact</code></li> <li>OS of the Device: <code>$alert-&gt;os</code></li> <li>Type of Device: <code>$alert-&gt;type</code></li> <li>IP of the Device: <code>$alert-&gt;ip</code></li> <li>Hardware of the Device: <code>$alert-&gt;hardware</code></li> <li>Software version of the Device: <code>$alert-&gt;version</code></li> <li>Features of the Device: <code>$alert-&gt;features</code></li> <li>Serial number of the Device: <code>$alert-&gt;serial</code></li> <li>Location of the Device: <code>$alert-&gt;location</code></li> <li>uptime of the Device (in seconds): <code>$alert-&gt;uptime</code></li> <li>Short uptime of the Device (28d 22h 30m 7s): <code>$alert-&gt;uptime_short</code></li> <li>Long uptime of the Device (28 days, 22h 30m 7s): <code>$alert-&gt;uptime_long</code></li> <li>Description (purpose db field) of the Device: <code>$alert-&gt;description</code></li> <li>Notes of the Device: <code>$alert-&gt;notes</code></li> <li>Notes of the alert (ack notes): <code>$alert-&gt;alert_notes</code></li> <li>ping timestamp (if icmp enabled): <code>$alert-&gt;ping_timestamp</code></li> <li>ping loss (if icmp enabled): <code>$alert-&gt;ping_loss</code></li> <li>ping min (if icmp enabled): <code>$alert-&gt;ping_min</code></li> <li>ping max (if icmp enabled): <code>$alert-&gt;ping_max</code></li> <li>ping avg (if icmp enabled): <code>$alert-&gt;ping_avg</code></li> <li>debug (array) </li> <li>Title for the Alert: <code>$alert-&gt;title</code></li> <li>Time Elapsed, Only available on recovery (<code>$alert-&gt;state == 0</code>): <code>$alert-&gt;elapsed</code></li> <li>Rule Builder (the actual rule) (use <code>{!! $alert-&gt;builder !!}</code>): <code>$alert-&gt;builder</code></li> <li>Alert-ID: <code>$alert-&gt;id</code></li> <li>Unique-ID: <code>$alert-&gt;uid</code></li> <li>Faults, Only available on alert (<code>$alert-&gt;state != 0</code>), must be   iterated in a foreach (<code>@foreach ($alert-&gt;faults as $key =&gt; $value)   @endforeach</code>). Holds all available information about the Fault,   accessible in the format <code>$value['Column']</code>, for example:   <code>$value['ifDescr']</code>. Special field <code>$value['string']</code> has most   Identification-information (IDs, Names, Descrs) as single string,   this is the equivalent of the default used and must be encased in <code>{{ }}</code></li> <li>State: <code>$alert-&gt;state</code></li> <li>Severity: <code>$alert-&gt;severity</code></li> <li>Rule: <code>$alert-&gt;rule</code></li> <li>Rule-Name: <code>$alert-&gt;name</code></li> <li>Procedure URL: <code>$alert-&gt;proc</code></li> <li>Timestamp: <code>$alert-&gt;timestamp</code></li> <li>Transport type: <code>$alert-&gt;transport</code></li> <li>Transport name: <code>$alert-&gt;transport_name</code></li> <li>Contacts, must be iterated in a foreach, <code>$key</code> holds email and   <code>$value</code> holds name: <code>$alert-&gt;contacts</code></li> </ul> <p>Placeholders can be used within the subjects for templates as well although $faults is most likely going to be worthless due to it being an array.</p> <p>The Default Template is a 'one-size-fit-all'. We highly recommend defining your own templates for your rules to include more specific information.</p>"},{"location":"Alerting/Templates/#base-templates","title":"Base Templates","text":"<p>If you'd like to reuse a common template for your alerts you can create your own template to use (a default is included).</p> <p>The default file is located in <code>resources/views/alerts/templates/default.blade.php</code> and displays the following:</p> <pre><code>&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;LibreNMS Alert&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;div class=\"container\"&gt;\n            @yield('content')\n        &lt;/div&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>The important part being the <code>@yield('content')</code></p> <p>You can use plain text or html as per Alert templates and this will form the basis of your common template, feel free to make as many templates in the directory as needed.</p> <p>In your alert template just use</p> <pre><code>@extends('alerts.templates.default')\n\n@section('content')\n  {{ $alert-&gt;title }}\n  Severity: {{ $alert-&gt;severity }}\n  ...\n@endsection\n</code></pre> <p>For more info on extending templates, see the Laravel documentation.</p>"},{"location":"Alerting/Templates/#examples","title":"Examples","text":""},{"location":"Alerting/Templates/#default-template","title":"Default Template","text":"<pre><code>{{ $alert-&gt;title }}\nSeverity: {{ $alert-&gt;severity }}\n@if ($alert-&gt;state == 0) Time elapsed: {{ $alert-&gt;elapsed }} @endif\nTimestamp: {{ $alert-&gt;timestamp }}\nUnique-ID: {{ $alert-&gt;uid }}\nRule: @if ($alert-&gt;name) {{ $alert-&gt;name }} @else {{ $alert-&gt;rule }} @endif\n@if ($alert-&gt;faults) Faults:\n@foreach ($alert-&gt;faults as $key =&gt; $value)\n  {{ $key }}: {{ $value['string'] }}\n@endforeach\n@endif\nAlert sent to:\n@foreach ($alert-&gt;contacts as $key =&gt; $value)\n  {{ $value }} &lt;{{ $key }}&gt;\n@endforeach\n</code></pre>"},{"location":"Alerting/Templates/#ports-utilization-template","title":"Ports Utilization Template","text":"<pre><code>{{ $alert-&gt;title }}\nDevice Name: {{ $alert-&gt;hostname }}\nSeverity: {{ $alert-&gt;severity }}\n@if ($alert-&gt;state == 0) Time elapsed: {{ $alert-&gt;elapsed }} @endif\nTimestamp: {{ $alert-&gt;timestamp }}\nRule: @if ($alert-&gt;name) {{ $alert-&gt;name }} @else {{ $alert-&gt;rule }} @endif\n@foreach ($alert-&gt;faults as $key =&gt; $value)\nPhysical Interface: {{ $value['ifDescr'] }}\nInterface Description: {{ $value['ifAlias'] }}\nInterface Speed: {{ ($value['ifSpeed']/1000000000) }} Gbs\nInbound Utilization: {{ (($value['ifInOctets_rate']*8)/$value['ifSpeed'])*100 }}\nOutbound Utilization: {{ (($value['ifOutOctets_rate']*8)/$value['ifSpeed'])*100 }}\n@endforeach\n</code></pre>"},{"location":"Alerting/Templates/#storage","title":"Storage","text":"<pre><code>{{ $alert-&gt;title }}\n\nDevice Name: {{ $alert-&gt;hostname }}\nSeverity: {{ $alert-&gt;severity }}\nUptime: {{ $alert-&gt;uptime_short }}\n@if ($alert-&gt;state == 0) Time elapsed: {{ $alert-&gt;elapsed }} @endif\nTimestamp: {{ $alert-&gt;timestamp }}\nLocation: {{ $alert-&gt;location }}\nDescription: {{ $alert-&gt;description }}\nFeatures: {{ $alert-&gt;features }}\nNotes: {{ $alert-&gt;notes }}\n\nServer: {{ $alert-&gt;sysName }}\n@foreach ($alert-&gt;faults as $key =&gt; $value)\nMount Point: {{ $value['storage_descr'] }}\nPercent Utilized: {{ $value['storage_perc'] }}\n@endforeach\n</code></pre>"},{"location":"Alerting/Templates/#value-sensors-temperature-humidity-fanspeed","title":"Value Sensors (Temperature, Humidity, Fanspeed, ...)","text":"<pre><code>{{ $alert-&gt;title }}\n\nDevice Name: {{ $alert-&gt;hostname }}\nSeverity: {{ $alert-&gt;severity }}\nTimestamp: {{ $alert-&gt;timestamp }}\nUptime: {{ $alert-&gt;uptime_short }}\n@if ($alert-&gt;state == 0)\nTime elapsed: {{ $alert-&gt;elapsed }}\n@endif\nLocation: {{ $alert-&gt;location }}\nDescription: {{ $alert-&gt;description }}\nFeatures: {{ $alert-&gt;features }}\nNotes: {{ $alert-&gt;notes }}\n\nRule: {{ $alert-&gt;name ?? $alert-&gt;rule }}\n@if ($alert-&gt;faults)\nFaults:\n@foreach ($alert-&gt;faults as $key =&gt; $value)\n@php($unit = __(\"sensors.${value[\"sensor_class\"]}.unit\"))\n#{{ $key }}: {{ $value['sensor_descr'] ?? 'Sensor' }}\n\nCurrent: {{ $value['sensor_current'].$unit }}\nPrevious: {{ $value['sensor_prev'].$unit }}\nLimit: {{ $value['sensor_limit'].$unit }}\nOver Limit: {{ round($value['sensor_current']-$value['sensor_limit'], 2).$unit }}\n\n@endforeach\n@endif\n</code></pre>"},{"location":"Alerting/Templates/#memory-alert","title":"Memory Alert","text":"<pre><code>{{ $alert-&gt;title }}\n\nDevice Name: {{ $alert-&gt;hostname }}\nSeverity: {{ $alert-&gt;severity }}\nUptime: {{ $alert-&gt;uptime_short }}\n@if ($alert-&gt;state == 0) Time elapsed: {{ $alert-&gt;elapsed }} @endif\nTimestamp: {{ $alert-&gt;timestamp }}\nLocation: {{ $alert-&gt;location }}\nDescription: {{ $alert-&gt;description }}\nNotes: {{ $alert-&gt;notes }}\n\nServer: {{ $alert-&gt;hostname }}\n@foreach ($alert-&gt;faults as $key =&gt; $value)\nMemory Description: {{ $value['mempool_descr'] }}\nPercent Utilized: {{ $value['mempool_perc'] }}\n@endforeach\n</code></pre>"},{"location":"Alerting/Templates/#advanced-options","title":"Advanced options","text":""},{"location":"Alerting/Templates/#conditional-formatting","title":"Conditional formatting","text":"<p>Conditional formatting example, will display a link to the host in email or just the hostname in any other transport:</p> <pre><code>@if ($alert-&gt;transport == 'mail')&lt;a href=\"https://my.librenms.install/device/device={{ $alert-&gt;hostname }}/\"&gt;{{ $alert-&gt;hostname }}&lt;/a&gt;\n@else\n{{ $alert-&gt;hostname }}\n@endif\n</code></pre>"},{"location":"Alerting/Templates/#traceroute-debugs","title":"Traceroute debugs","text":"<pre><code>@if ($alert-&gt;status == 0)\n    @if ($alert-&gt;status_reason == 'icmp')\n        {{ $alert-&gt;debug['traceroute'] }}\n    @endif\n@endif\n</code></pre>"},{"location":"Alerting/Templates/#examples-html","title":"Examples HTML","text":"<p>To use HTML emails you must set HTML email to Yes in the WebUI:</p> <p>alerting/email</p> <pre><code>lnms config:set email_html true\n</code></pre>"},{"location":"Alerting/Templates/#graphs","title":"Graphs","text":"<p>There are two helpers for graphs that will use a signed url to allow secure external access. Anyone using the signed url will be able to view the graph.</p> <ul> <li>Your LibreNMS web must be accessible from the location where the graph is viewed.    Some alert transports require publicly accessible urls.</li> <li>APP_URL must be set in .env to use signed graphs.</li> <li>Changing APP_KEY will invalidate all previously issued singed urls.</li> </ul> <p>You may specify the graph one of two ways, a php array of parameters, or a direct url to a graph.</p> <p>Note that to and from can be specified either as timestamps with <code>time()</code> or as relative time <code>-3d</code> or <code>-36h</code>.  When using relative time, the graph will show based on when the user views the graph, not when the event happened. Sharing a graph image with a relative time will always give the recipient access to current data, where a specific timestamp will only allow access to that timeframe.</p>"},{"location":"Alerting/Templates/#signedgraphtag","title":"@signedGraphTag","text":"<p>This will insert a specially formatted html img tag linking to the graph. Some transports may search the template for this tag to attach images properly for that transport.</p> <pre><code>@signedGraphTag([\n    'id' =&gt; $value['port_id'],\n    'type' =&gt; 'port_bits',\n    'from' =&gt; time() - 43200,\n    'to' =&gt; time(),\n    'width' =&gt; 700, \n    'height' =&gt; 250\n])\n</code></pre> <p>Output:</p> <pre><code>&lt;img class=\"librenms-graph\" src=\"https://librenms.org/graph?from=1662176216&amp;amp;height=250&amp;amp;id=20425&amp;amp;to=1662219416&amp;amp;type=port_bits&amp;amp;width=700&amp;amp;signature=f6e516e8fd893c772eeaba165d027cb400e15a515254de561a05b63bc6f360a4\"&gt;\n</code></pre> <p>Specific graph using url input:</p> <pre><code>@signedGraphTag('https://librenms.org/graph.php?type=device_processor&amp;from=-2d&amp;device=2&amp;legend=no&amp;height=400&amp;width=1200')\n</code></pre>"},{"location":"Alerting/Templates/#signedgraphurl","title":"@signedGraphUrl","text":"<p>This is used when you need the url directly. One example is using the API Transport, you may want to include the url only instead of a html tag.</p> <pre><code>@signedGraphUrl([\n    'id' =&gt; $value['port_id'],\n    'type' =&gt; 'port_bits',\n    'from' =&gt; time() - 43200,\n    'to' =&gt; time(),\n])\n</code></pre>"},{"location":"Alerting/Templates/#using-models-for-optional-data","title":"Using models for optional data","text":"<p>If some value does not exist within the <code>$faults[]</code> array, you may query fields from the database using Laravel models. You may use models to query additional values and use them on the template by placing the model and the value to search for within the braces. For example, ISIS alerts do have a <code>port_id</code> value associated with the alert but <code>ifName</code> is not directly accessible from the <code>$faults[]</code> array. If the name of the port was needed, it's value could be queried using a template such as:</p> <pre><code>{{ $alert-&gt;title }}\nSeverity: {{ $alert-&gt;severity }}\n@if ($alert-&gt;state == 0) Time elapsed: {{ $alert-&gt;elapsed }} @endif\nTimestamp: {{ $alert-&gt;timestamp }}\nRule: @if ($alert-&gt;name) {{ $alert-&gt;name }} @else {{ $alert-&gt;rule }} @endif\n@if ($alert-&gt;faults) Faults:\n@foreach ($alert-&gt;faults as $key =&gt; $value)\n  Local interface: {{ \\App\\Models\\Port::find($value['port_id'])-&gt;ifName }}\n  Adjacent IP: {{ $value['isisISAdjIPAddrAddress'] }}\n  Adjacent state: {{ $value['isisISAdjState'] }}\n@endforeach\n@endif\n</code></pre>"},{"location":"Alerting/Templates/#service-alert","title":"Service Alert","text":"<pre><code>&lt;div style=\"font-family:Helvetica;\"&gt;\n&lt;h2&gt;@if ($alert-&gt;state == 1) &lt;span style=\"color:red;\"&gt;{{ $alert-&gt;severity }} @endif\n@if ($alert-&gt;state == 2) &lt;span style=\"color:goldenrod;\"&gt;acknowledged @endif&lt;/span&gt;\n@if ($alert-&gt;state == 3) &lt;span style=\"color:green;\"&gt;recovering @endif&lt;/span&gt;\n@if ($alert-&gt;state == 0) &lt;span style=\"color:green;\"&gt;recovered @endif&lt;/span&gt;\n&lt;/h2&gt;\n&lt;b&gt;Host:&lt;/b&gt; {{ $alert-&gt;hostname }}&lt;br&gt;\n&lt;b&gt;Duration:&lt;/b&gt; {{ $alert-&gt;elapsed }}&lt;br&gt;\n&lt;br&gt;\n\n@if ($alert-&gt;faults)\n@foreach ($alert-&gt;faults as $key =&gt; $value) &lt;b&gt;{{ $value['service_desc'] }} - {{ $value['service_type'] }}&lt;/b&gt;&lt;br&gt;\n{{ $value['service_message'] }}&lt;br&gt;\n&lt;br&gt;\n@endforeach\n@endif\n&lt;/div&gt;\n</code></pre>"},{"location":"Alerting/Templates/#processor-alert-with-graph","title":"Processor Alert with Graph","text":"<pre><code>{{ $alert-&gt;title }} &lt;br&gt;\nSeverity: {{ $alert-&gt;severity }}  &lt;br&gt;\n@if ($alert-&gt;state == 0) Time elapsed: {{ $alert-&gt;elapsed }} @endif\nTimestamp: {{ $alert-&gt;timestamp }} &lt;br&gt;\nAlert-ID: {{ $alert-&gt;id }} &lt;br&gt;\nRule: @if ($alert-&gt;name) {{ $alert-&gt;name }} @else {{ $alert-&gt;rule }} @endif &lt;br&gt;\n@if ($alert-&gt;faults) Faults:\n@foreach ($alert-&gt;faults as $key =&gt; $value)\n{{ $key }}: {{ $value['string'] }}&lt;br&gt;\n@endforeach\n@if ($alert-&gt;faults) &lt;b&gt;Faults:&lt;/b&gt;&lt;br&gt;\n@foreach ($alert-&gt;faults as $key =&gt; $value)\n@signedGraphTag(['device' =&gt; $value['device_id'], 'type' =&gt; 'device_processor', 'width' =&gt; 459, 'height' =&gt; 213, 'from' =&gt; time() - 259200])&lt;br&gt;\nhttps://server/graphs/device={{ $value['device_id'] }}/type=device_processor/&lt;br&gt;\n@endforeach\nTemplate: CPU alert &lt;br&gt;\n@endif\n@endif\n</code></pre>"},{"location":"Alerting/Templates/#included","title":"Included","text":"<p>We include a few templates for you to use, these are specific to the type of alert rules you are creating. For example if you create a rule that would alert on BGP sessions then you can assign the BGP template to this rule to provide more information.</p> <p>The included templates apart from the default template are:</p> <ul> <li>BGP Sessions</li> <li>Ports</li> <li>Temperature</li> </ul>"},{"location":"Alerting/Templates/#other-examples","title":"Other Examples","text":""},{"location":"Alerting/Templates/#microsoft-teams-markdown","title":"Microsoft Teams - Markdown","text":"<pre><code>[{{ $alert-&gt;title }}](https://your.librenms.url/device/device={{ $alert-&gt;device_id }}/)\n**Device name:** {{ $alert-&gt;sysName }}\n**Severity:** {{ $alert-&gt;severity }}\n@if ($alert-&gt;state == 0)\n**Time elapsed:** {{ $alert-&gt;elapsed }}\n@endif\n**Timestamp:** {{ $alert-&gt;timestamp }}\n**Unique-ID:** {{ $alert-&gt;uid }}\n@if ($alert-&gt;name)\n**Rule:** {{ $alert-&gt;name }}\n@else\n**Rule:** {{ $alert-&gt;rule }}\n@endif\n@if ($alert-&gt;faults)\n**Faults:**@foreach ($alert-&gt;faults as $key =&gt; $value) {{ $key }}: {{ $value['string'] }}\n@endforeach\n@endif\n</code></pre>"},{"location":"Alerting/Templates/#microsoft-teams-json","title":"Microsoft Teams - JSON","text":"<pre><code>{\n    \"@context\": \"https://schema.org/extensions\",\n    \"@type\": \"MessageCard\",\n    \"title\": \"{{ $alert-&gt;title }}\",\n@if ($alert-&gt;state === 0)\n    \"themeColor\": \"00FF00\",\n@elseif ($alert-&gt;state === 1)\n    \"themeColor\": \"FF0000\",\n@elseif ($alert-&gt;state === 2)\n    \"themeColor\": \"337AB7\",\n@elseif ($alert-&gt;state === 3)\n    \"themeColor\": \"FF0000\",\n@elseif ($alert-&gt;state === 4)\n    \"themeColor\": \"F0AD4E\",\n@else\n    \"themeColor\": \"337AB7\",\n@endif\n    \"summary\": \"LibreNMS\",\n    \"sections\": [\n        {\n@if ($alert-&gt;name)\n            \"facts\": [\n                {\n                    \"name\": \"Rule:\",\n                    \"value\": \"[{{ $alert-&gt;name }}](https://your.librenms.url/device/device={{ $alert-&gt;device_id }}/tab=alert/)\"\n                },\n@else\n                {\n                    \"name\": \"Rule:\",\n                    \"value\": \"[{{ $alert-&gt;rule }}](https://your.librenms.url/device/device={{ $alert-&gt;device_id }}/tab=alert/)\"\n                },\n@endif\n                {\n                    \"name\": \"Severity:\",\n                    \"value\": \"{{ $alert-&gt;severity }}\"\n                },\n                {\n                    \"name\": \"Unique-ID:\",\n                    \"value\": \"{{ $alert-&gt;uid }}\"\n                },\n                {\n                    \"name\": \"Timestamp:\",\n                    \"value\": \"{{ $alert-&gt;timestamp }}\"\n                },\n@if ($alert-&gt;state == 0)\n                {\n                    \"name\": \"Time elapsed:\",\n                    \"value\": \"{{ $alert-&gt;elapsed }}\"\n                },\n@endif\n                {\n                    \"name\": \"Hostname:\",\n                    \"value\": \"[{{ $alert-&gt;hostname }}](https://your.librenms.url/device/device={{ $alert-&gt;device_id }}/)\"\n                },\n                {\n                    \"name\": \"Hardware:\",\n                    \"value\": \"{{ $alert-&gt;hardware }}\"\n                },\n                {\n                    \"name\": \"IP:\",\n                    \"value\": \"{{ $alert-&gt;ip }}\"\n                },\n                {\n                    \"name\": \"Faults:\",\n                    \"value\": \" \"\n                }\n            ]\n@if ($alert-&gt;faults)\n@foreach ($alert-&gt;faults as $key =&gt; $value)\n        },\n        {\n            \"facts\": [\n                {\n                    \"name\": \"Port:\",\n                    \"value\": \"[{{ $value['ifName'] }}](https://your.librenms.url/device/device={{ $alert-&gt;device_id }}/tab=port/port={{ $value['port_id'] }}/)\"\n                },\n                {\n                    \"name\": \"Description:\",\n                    \"value\": \"{{ $value['ifAlias'] }}\"\n                },\n@if ($alert-&gt;state != 0)\n                {\n                    \"name\": \"Status:\",\n                    \"value\": \"down\"\n                }\n            ]\n@else\n                {\n                    \"name\": \"Status:\",\n                    \"value\": \"up\"\n                }\n            ]\n@endif\n@endforeach\n@endif\n        }\n    ]\n}\n</code></pre>"},{"location":"Alerting/Templates/#microsoft-teams-adaptivecard-json","title":"Microsoft Teams - AdaptiveCard JSON","text":"<pre><code>@php\n    $state_color = match ($alert-&gt;state) {\n        0 =&gt; 'Good',\n        1 =&gt; 'Warning',\n        2 =&gt; 'Attention',\n        default =&gt; 'Default'\n    };\n    $severity_color = match ($alert-&gt;severity) {\n        'Ok' =&gt; 'Good',\n        'Warning' =&gt; 'Warning',\n        'Critical' =&gt; 'Attention',\n        default =&gt; 'Default'\n    };\n@endphp\n{\n    \"type\": \"LibreNMS AdaptiveCard Alert\",\n    \"attachments\": [\n        {\n            \"contentType\": \"application/vnd.microsoft.card.adaptive\",\n            \"content\": {\n                \"$schema\": \"http://adaptivecards.io/schemas/adaptive-card.json\",\n                \"version\": \"1.4\",\n                \"type\": \"AdaptiveCard\",\n                \"body\": [\n                    {\n                        \"type\":  \"TextBlock\",\n                        \"size\":  \"Large\",\n                        \"weight\":  \"Bolder\",\n                        \"color\":  \"{{ $state_color }}\",\n                        \"text\":  \"\ud83d\udea8 **LibreNMS Alert @if ($alert-&gt;state == 0) - Resolved @endif**\",\n                        \"horizontalAlignment\":  \"Center\",\n                        \"spacing\":  \"Small\"\n                    },\n                    {\n                        \"type\":  \"TextBlock\",\n                        \"text\":  \"**\ud83d\udd14** {{ $alert-&gt;title }}\",\n                        \"wrap\":  true,\n                        \"color\": \"Accent\",\n                        \"weight\":  \"Bolder\",\n                        \"spacing\":  \"Small\"\n                    },\n                    {\n                        \"type\":  \"TextBlock\",\n                        \"text\":  \"**\ud83d\udccc State:** @switch ($alert-&gt;state)\n                            @case (0) OK \u2705 @break\n                            @case (1) Warning \u26a0\ufe0f @break\n                            @case (2) Critical \u274c @break\n                            @default Unknown @endswitch\",\n                        \"wrap\":  true,\n                        \"color\":  \"{{ $state_color }}\",\n                        \"spacing\":  \"Small\"\n                    },\n                    @if ($alert-&gt;state == 0) {\n                        \"type\":  \"TextBlock\",\n                        \"text\":  \"**\ud83d\udd52 Elapsed:** {{ $alert-&gt;elapsed }}\",\n                        \"wrap\":  true,\n                        \"spacing\":  \"Small\"\n                    }, @endif\n                    {\n                        \"type\":  \"TextBlock\",\n                        \"text\":  \"**\ud83d\udcc5 Timestamp:** {{ $alert-&gt;timestamp }}\",\n                        \"wrap\":  true,\n                        \"spacing\":  \"Small\"\n                    },\n                    {\n                        \"type\":  \"TextBlock\",\n                        \"text\":  \"**\ud83c\udd94 Unique-ID:** {{ $alert-&gt;uid }}\",\n                        \"wrap\":  true,\n                        \"spacing\":  \"Small\"\n                    },\n                    {\n                        \"type\":  \"TextBlock\",\n                        \"text\":  \"**\u26a0\ufe0f Severity:**  {{ $alert-&gt;severity }}\",\n                        \"wrap\":  true,\n                        \"color\":  \"{{ $severity_color }}\",\n                        \"spacing\":  \"Small\"\n                    },\n                    {\n                        \"type\":  \"TextBlock\",\n                        \"text\":  \"**\ud83d\udcdc Rule:**  @if ($alert-&gt;name) {{ $alert-&gt;name }} @else {{ $alert-&gt;rule }} @endif\",\n                        \"wrap\":  true,\n                        \"color\":  \"Accent\",\n                        \"spacing\":  \"Small\"\n                    },\n                    @if ($alert-&gt;faults and count($alert-&gt;faults) &gt; 0)\n                    {\n                        \"type\":  \"TextBlock\",\n                        \"text\":  \"**\ud83d\udd0d Fault Details:**\",\n                        \"wrap\":  true,\n                        \"size\":  \"Medium\",\n                        \"weight\":  \"Bolder\",\n                        \"spacing\":  \"Small\"\n                    },\n                    @foreach ($alert-&gt;faults as $fault_key =&gt; $fault_details)\n                    {\n                        \"type\": \"ActionSet\",\n                        \"actions\": [\n                            {\n                                \"type\": \"Action.ShowCard\",\n                                \"title\": \"Fault {{ $fault_key }} \",\n                                \"card\": {\n                                    \"type\": \"AdaptiveCard\",\n                                    \"body\": [\n                                        {\n                                            \"type\":  \"FactSet\",\n                                            \"separator\":  true,\n                                            \"facts\":  [\n                                                @foreach ($fault_details as $key =&gt; $value)\n                                                @if ($key == 'string')\n                                                    {{--\n                                                        the 'string' key is a redundant amalgam of all \n                                                        other keys in the assoc array, skip it\n                                                    --}}\n                                                    @continue    \n                                                @endif\n                                                {\n                                                    \"title\":  \"{{ $key }}\",\n                                                    \"value\":  \"{{ str_replace(array(\"\\r\\n\", \"\\n\", \"\\r\"), \"\", $value) }}\"\n                                                },\n                                                @endforeach\n                                                {\"title\": \"\", \"value\": \"\"}\n                                            ]\n                                        }\n                                    ]\n                                }\n                            }\n                        ]\n                    },\n                    @endforeach\n                    {\"type\": \"TextBlock\", \"text\": \"\"}\n                    @else\n                    {\"type\": \"TextBlock\", \"text\": \"No fault data in this alert\"}\n                    @endif\n                ],\n                \"actions\":  [\n                    {\n                        \"type\":  \"Action.OpenUrl\",\n                        \"title\":  \"View Alert\",\n                        \"style\": \"positive\",\n                        \"url\":  \"https://librenms.server.utsc.utoronto.ca/device/{{ $alert-&gt;device_id }}/alerts\"\n                    }\n                ]\n                }\n        }\n    ]\n}\n</code></pre>"},{"location":"Alerting/Testing/","title":"Rules","text":"<p>The simplest way of testing if an alert rule will match a device is by going to the device, clicking edit (the cog), select Capture. From this new screen choose Alerts and click run.</p> <p>The output will cycle through all alerts applicable to this device and show you the Rule name, rule, MySQL query and if the rule matches.</p> <p>See Device Troubleshooting</p>"},{"location":"Alerting/Testing/#transports","title":"Transports","text":"<p>You can test your transports by forcing an actual active alert to run regardless of the interval or delay values.</p> <p><code>./scripts/test-alert.php</code>. This script accepts -r for the rule id, -h for the device id or hostname and -d for debug.</p>"},{"location":"Alerting/Testing/#templates","title":"Templates","text":"<p>It's possible to test your new template before assigning it to a rule. To do so you can run <code>./scripts/test-template.php</code>. The script will provide the help info when ran without any parameters.</p> <p>As an example, if you wanted to test template ID 10 against localhost running rule ID 2 then you would run:</p> <p><code>./scripts/test-template.php -t 10 -d -h localhost -r 2</code></p> <p>If the rule is currently alerting for localhost then you will get the full template as expected to see on email, if it's not then you will just see the template without any fault information.</p>"},{"location":"Alerting/Transports/","title":"Transports","text":"<p>Transports are located within <code>LibreNMS/Alert/Transport/</code> and can be configured within the WebUI under Alerts -&gt; Alert Transports.</p> <p>Contacts (email addresses) will be gathered automatically and passed to the configured transports. By default the Contacts will be only gathered when the alert triggers and will ignore future changes in contacts for the incident. If you want contacts to be re-gathered before each dispatch, please set:</p> <p>alerting/general</p> <pre><code>lnms config:set alert.fixed-contacts false\n</code></pre> <p>The contacts will always include the <code>SysContact</code> defined in the Device's SNMP configuration and also every LibreNMS user that has at least <code>read</code> permissions on the entity that is to be alerted.</p> <p>At the moment LibreNMS only supports Port or Device permissions.</p>"},{"location":"Alerting/Transports/#using-a-proxy","title":"Using a Proxy","text":"<p>Proxy Configuration</p>"},{"location":"Alerting/Transports/#using-a-amqp-based-transport","title":"Using a AMQP based Transport","text":"<p>You need to install an additional php module : <code>bcmath</code></p>"},{"location":"Alerting/Transports/AlertOps/","title":"AlertOps","text":""},{"location":"Alerting/Transports/AlertOps/#alertops","title":"AlertOps","text":"<p>Using AlertOps integration with LibreNMS, you can seamlessly forward alerts to AlertOps with detailed information. AlertOps acts as a dispatcher for LibreNMS alerts, allowing you to determine the right individuals or teams to notify based on on-call schedules. Notifications can be sent via various channels including email, text messages (SMS), phone calls, and mobile push notifications for iOS &amp; Android devices. Additionally, AlertOps provides escalation policies to ensure alerts are appropriately managed until they are assigned or closed. You can also filter out/aggregate alerts based on different values.</p> <p>To set up the integration:</p> <ul> <li> <p>Create a LibreNMS Integration: Sign up for an AlertOps account and create a LibreNMS integration from the integrations page. This will generate an Inbound Integration Endpoint URL that you'll need to copy to LibreNMS.</p> </li> <li> <p>Configure LibreNMS Integration: In LibreNMS, navigate to the integration settings and paste the inbound integration URL obtained from AlertOps.</p> </li> </ul> <p>Example:</p> Config Example WebHook URL https://url/path/to/webhook"},{"location":"Alerting/Transports/Alerta/","title":"Alerta","text":""},{"location":"Alerting/Transports/Alerta/#alerta","title":"Alerta","text":"<p>The alerta monitoring system is a tool used to consolidate and de-duplicate alerts from multiple sources for quick \u2018at-a-glance\u2019 visualisation. With just one system you can monitor alerts from many other monitoring tools on a single screen.</p> <p>Example:</p> Config Example API Endpoint http://alerta.example.com/api/alert Environment Production Apy key api key with write permission Alert state critical Recover state cleared"},{"location":"Alerting/Transports/Alertmanager/","title":"Alertmanager","text":""},{"location":"Alerting/Transports/Alertmanager/#alertmanager","title":"Alertmanager","text":"<p>Alertmanager is an alert handling software, initially developed for alert processing sent by Prometheus.</p> <p>It has built-in functionality for deduplicating, grouping and routing alerts based on configurable criteria.</p> <p>LibreNMS uses alert grouping by alert rule, which can produce an array of alerts of similar content for an array of hosts, whereas Alertmanager can group them by alert meta, ideally producing one single notice in case an issue occurs.</p> <p>It is possible to configure as many label values as required in Alertmanager Options section. Every label and its value should be entered as a new line.</p> <p>Labels can be a fixed string or a dynamic variable from the alert. To set a dynamic variable your label must start with extra_ then complete with the name of your label (only characters, figures and underscore are allowed here). The value must be the name of the variable you want to get (you can see all the variables in Alerts-&gt;Notifications by clicking on the Details icon of your alert when it is pending). If the variable's name does not match with an existing value the label's value will be the string you provided just as it was a fixed string.</p> <p>Multiple Alertmanager URLs (comma separated) are supported. Each URL will be tried and the search will stop at the first success.</p> <p>Basic HTTP authentication with a username and a password is supported. If you let those value blank, no authentication will be used.</p> <p>Alertmanager Docs</p> <p>Example:</p> Config Example Alertmanager URL(s) http://alertmanager1.example.com,http://alertmanager2.example.com Alertmanager Username myUsername Alertmanager Password myPassword Alertmanager Options: source=librenms  customlabel=value  extra_dynamic_value=variable_name"},{"location":"Alerting/Transports/Api/","title":"Api","text":""},{"location":"Alerting/Transports/Api/#api","title":"API","text":"<p>The API transport allows to reach any service provider using POST, PUT or GET URLs (Like SMS provider, etc). It can be used in multiple ways:</p> <ul> <li>The same text built from the Alert template is available in the   variable</li> </ul> <p><code>$msg</code>, which can then be sent as an option to the API. Be carefull that HTTP GET requests are usually limited in length.</p> <ul> <li> <p>The API-Option fields can be directly built from the variables   defined in Template-Syntax but without the   'alert-&gt;' prefix. For instance, <code>$alert-&gt;uptime</code> is available as   <code>$uptime</code> in the API transport</p> </li> <li> <p>The API-Headers allows you to add the headers that the api endpoint requires.</p> </li> <li> <p>The API-body allow sending data in the format required by the API endpoint.</p> </li> <li> <p>Send as form. This option allows you to send the body content as form data url encoded. Enable this if your endpoint is expecting fields to be sent as key=value pairs. Please ensure newlines aren't present in any of your variables as can be the case with <code>$msg</code>.</p> </li> </ul> <p>A few variables commonly used :</p> Variable Description {{ $hostname\u00a0}} Hostname {{ $sysName\u00a0}} SysName {{ $sysDescr\u00a0}} SysDescr {{ $os\u00a0}} OS of device (librenms defined) {{ $type\u00a0}} Type of device (librenms defined) {{ $ip\u00a0}} IP Address {{ $hardware\u00a0}} Hardware {{ $version\u00a0}} Version {{ $uptime\u00a0}} Uptime in seconds {{ $uptime_short\u00a0}} Uptime in human-readable format {{ $timestamp\u00a0}} Timestamp of alert {{ $description\u00a0}} Description of device {{ $title\u00a0}} Title (as built from the Alert Template) {{ $msg\u00a0}} Body text (as built from the Alert Template) <p>Example:</p> <p>The example below will use the API named sms-api of my.example.com and send the title of the alert to the provided number using the provided service key. Refer to your service documentation to configure it properly.</p> Config Example API Method GET API URL http://my.example.com/sms-api API Options rcpt=0123456789  key=0987654321abcdef  msg=(LNMS) {{ $title }} API Username myUsername API Password myPassword <p>The example below will use the API named wall-display of my.example.com and send the title and text of the alert to a screen in the Network Operation Center.</p> Config Example API Method POST API URL http://my.example.com/wall-display API Options title={{ $title }}  msg={{ $msg }} <p>The example below will use the API named component of my.example.com with id 1, body as json status value and headers send token authentication and content type required.</p> Config Example API Method PUT API URL http://my.example.com/comonent/1 API Headers X-Token=HASH Content-Type=application/json API Body { \"status\": 2 }"},{"location":"Alerting/Transports/Browser-Push/","title":"Browser Push","text":""},{"location":"Alerting/Transports/Browser-Push/#browser-push","title":"Browser Push","text":"<p>Browser push notifications can send a notification to the user's device even when the browser is not open. This requires HTTPS, the PHP GMP extension, Push API support, and permissions on each device to send alerts.</p> <p>Simply configure an alert transport and allow notification permission on the device(s) you wish to receive alerts on.  You may disable alerts on a browser on the user preferences page.</p>"},{"location":"Alerting/Transports/Canopsis/","title":"Canopsis","text":""},{"location":"Alerting/Transports/Canopsis/#canopsis","title":"Canopsis","text":"<p>Canopsis is a hypervision tool. LibreNMS can send alerts to Canopsis which are then converted to canopsis events.</p> <p>Canopsis Docs</p> <p>Example:</p> Config Example Hostname www.xxx.yyy.zzz Port Number 5672 User admin Password my_password Vhost canopsis"},{"location":"Alerting/Transports/Cisco-Spark/","title":"Cisco Spark","text":""},{"location":"Alerting/Transports/Cisco-Spark/#cisco-spark-aka-webex-teams","title":"Cisco Spark (aka Webex Teams)","text":"<p>Cisco Spark (now known as Webex Teams). LibreNMS can send alerts to a Cisco Spark room. To make this possible you need to have a RoomID and a token. You can also choose to send alerts using Markdown syntax.  Enabling this option provides for more richly formatted alerts, but be sure to adjust your alert template to account for the Markdown syntax.</p> <p>For more information about Cisco Spark RoomID and token, take a look here :</p> <ul> <li>Getting started</li> <li>Rooms</li> </ul> <p>Example:</p> Config Example API Token ASd23r23edewda RoomID 34243243251 Use Markdown? x"},{"location":"Alerting/Transports/Clickatell/","title":"Clickatell","text":""},{"location":"Alerting/Transports/Clickatell/#clickatell","title":"Clickatell","text":"<p>Clickatell provides a REST-API requiring an Authorization-Token and at least one Cellphone number.</p> <p>Clickatell Docs</p> <p>Here an example using 3 numbers, any amount of numbers is supported:</p> <p>Example:</p> Config Example Token dsaWd3rewdwea Mobile Numbers +1234567890,+1234567891,+1234567892"},{"location":"Alerting/Transports/Discord/","title":"Discord","text":""},{"location":"Alerting/Transports/Discord/#discord","title":"Discord","text":"<p>The Discord transport will POST the alert message to your Discord Incoming WebHook. The only required value is Discord URL, without this no call to Discord will be made. </p> <p>Graphs can be included in the template using: <code>&lt;img class=\"librenms-graph\" src=\"\"/&gt;</code>. The rest of the html tags are stripped from the message.</p> <p>The Options field supports JSON/Form Params listed in the  Discord Docs. Fields to embed is a comma separated list from the Alert Data).</p> <p>Example:</p> Config Example Discord URL https://discordapp.com/api/webhooks/4515489001665127664/82-sf4385ysuhfn34u2fhfsdePGLrg8K7cP9wl553Fg6OlZuuxJGaa1d54fe Options username=mynamecontent=Some contenttts=false Fields to embed hostname,name,timestamp,severity"},{"location":"Alerting/Transports/Elasticsearch/","title":"Elasticsearch","text":""},{"location":"Alerting/Transports/Elasticsearch/#elasticsearch","title":"Elasticsearch","text":"<p>You can have LibreNMS send alerts to an elasticsearch database. Each fault will be sent as a separate document.</p> <p>Example:</p> Config Example Host 127.0.0.1 Port 9200 Index Pattern \\l\\i\\b\\r\\e\\n\\m\\s-Y.m.d"},{"location":"Alerting/Transports/GLPI/","title":"GLPI","text":""},{"location":"Alerting/Transports/GLPI/#glpi","title":"GLPI","text":"<p>The GLPI transport creates a ticket in GLPI whenever an alert is raised.</p> <ul> <li>For each alert type on a device, a ticket is created.</li> <li>If multiple alerts of the same type are raised, follow-ups are added to the existing ticket.</li> <li>If the existing ticket is closed, it will create another ticket.</li> </ul> <p>The user identified by the user token will be set as the creator and the requester of the ticket. If a device with the same name exists in GLPI, it will be linked to the ticket.</p> <p>To set it up:  - User token: Go to User preferences &gt; API in GLPI.  - App token: Go to Configuration &gt; General &gt; API in GLPI.</p> <p>Example:</p> Config Example GLPI API URL http://localhost/glpi/apirest.php User Token A1b2C3d4E5f6G7h8I9j0K1l2M3n4O5p6Q7r8S9t0 App Token Z9y8X7w6V5u4T3s2R1q0P9o8N7m6L5k4J3i2H1g"},{"location":"Alerting/Transports/Gitlab/","title":"Gitlab","text":""},{"location":"Alerting/Transports/Gitlab/#gitlab","title":"GitLab","text":"<p>LibreNMS will create issues for warning and critical level alerts however only title and description are set. Uses Personal access tokens to authenticate with GitLab and will store the token in cleartext.</p> <p>Example:</p> Config Example Host http://gitlab.host.tld Project ID 1 Personal Access Token AbCdEf12345"},{"location":"Alerting/Transports/Grafana-OnCall/","title":"Grafana OnCall","text":""},{"location":"Alerting/Transports/Grafana-OnCall/#grafana-oncall","title":"Grafana Oncall","text":"<p>Send alerts to Grafana Oncall via either a Formatted Webhook or Webhook. See the Grafana documentation for both.</p> <p>There is little difference between the two, but the Formatted Webhook will  provide a more friendly view of things by default.</p> <p>NOTE: By default Grafana translates acknowledged alerts to resolved alerts. This can be changed by updating the Template settings for the integration you added as follows.</p> <p>Autoresolution: <code>{{ payload.get(\"raw_state\", \"\") != 2 and payload.get(\"state\", \"\").upper() == \"OK\" }}</code></p> <p>Auto acknowledge: <code>{{ payload.get(\"raw_state\", \"\") == 2 }}</code></p> <p>You will also find additional information is sent as part of the payload to Grafana which  can be useful within the templates or routes. If you perform a test of the LibreNMS transport  you will be able to see the payload within the Grafana interface.</p> <p>customise what is sent to Grafana and override or add additional fields, you can create a custom template which outputs the correct information via JSON. As an example:</p> <p><pre><code>{\n    \"message\": \"Severity: {{ $alert-&gt;severity }}\\nTimestamp: {{ $alert-&gt;timestamp }}\\nRule: {{ $alert-&gt;title }}\\n @foreach ($alert-&gt;faults as $key =&gt; $value) {{ $key }}: {{ $value['string'] }}\\n @endforeach\",\n    \"number_of_processors\": \\App\\Models\\Processors::where('device_id', $alert-&gt;device_id)-&gt;count(),\n    \"title\": \"{{ $alert-&gt;title }}\",\n    \"link_to_upstream_details\": \"{{ \\LibreNMS\\Util\\Url::deviceUrl($device) }}\",\n}\n</code></pre> If you are using more than one transport for an alert rule and need to customise the output per transport then you can do the following:</p> <pre><code>@if ($alert-&gt;transport == 'grafana')\n{\n  \"message\": \"Severity: {{ $alert-&gt;severity }}\\nTimestamp: {{ $alert-&gt;timestamp }}\\nRule: {{ $alert-&gt;title }}\\n @foreach ($alert-&gt;faults as $key =&gt; $value) {{ $key }}: {{ $value['string'] }}\\n @endforeach\",\n  \"number_of_processors\": \\App\\Models\\Processors::where('device_id', $alert-&gt;device_id)-&gt;count(),\n  \"title\": \"{{ $alert-&gt;title }}\",\n  \"link_to_upstream_details\": \"{{ \\LibreNMS\\Util\\Url::deviceUrl($device) }}\",\n}\n@else\n{{ $alert-&gt;title }}\nSeverity: {{ $alert-&gt;severity }}\n@if ($alert-&gt;state == 0) Time elapsed: {{ $alert-&gt;elapsed }} @endif\nTimestamp: {{ $alert-&gt;timestamp }}\nUnique-ID: {{ $alert-&gt;uid }}\nRule: @if ($alert-&gt;name) {{ $alert-&gt;name }} @else {{ $alert-&gt;rule }} @endif\n@if ($alert-&gt;faults) Faults:\n@foreach ($alert-&gt;faults as $key =&gt; $value)\n  {{ $key }}: {{ $value['string'] }}\n@endforeach\n@endif\nAlert sent to:\n@foreach ($alert-&gt;contacts as $key =&gt; $value)\n  {{ $value }} &lt;{{ $key }}&gt;\n@endforeach\n@endif\n</code></pre> <p>Example:</p> Config Example Webhook URL https://a-prod-us-central-0.grafana.net/integrations/v1/formatted_webhook/m12xmIjOcgwH74UF8CN4dk0Dh/"},{"location":"Alerting/Transports/HipChat/","title":"HipChat","text":""},{"location":"Alerting/Transports/HipChat/#hipchat","title":"HipChat","text":"<p>See the HipChat API Documentation for rooms/message for details on acceptable values.</p> <p>You may notice that the link points at the \"deprecated\" v1 API.  This is because the v2 API is still in beta.</p> <p>Example:</p> Config Example API URL https://api.hipchat.com/v1/rooms/message?auth_token=109jawregoaihj Room ID 7654321 From Name LibreNMS Options color=red <p>At present the following options are supported: <code>color</code>.</p> <p>Note: The default message format for HipChat messages is HTML.  It is recommended that you specify the <code>text</code> message format to prevent unexpected results, such as HipChat attempting to interpret angled brackets (<code>&lt;</code> and <code>&gt;</code>).</p>"},{"location":"Alerting/Transports/IBM-On-Call-Manager/","title":"IBM On Call Manager","text":""},{"location":"Alerting/Transports/IBM-On-Call-Manager/#ibm-on-call-manager-ocm","title":"IBM On Call Manager (OCM)","text":"<p>LibreNMS can integrate with IBM On Call Manager by using a webhook URL you create by adding the LibreNMS integration.</p> <p>The webhook URL (referred to as <code>ocm-url</code>) can be found under 'Integrations' in the IBM On Call Manager portal after selecting LibreNMS as the integration.</p> <p>IBM On Call Manager uses the webhook to send the name of the alert rule, along with other relevant details. It will include the name or IP address of the system sending the alert, the name of the alert, the severity, timestamp, OS, location, and a unique ID. </p> <p>Example:</p> Config Example ocm-url https://ibm-ocm-webhook.example.com/api <p>Payload Example:</p> <pre><code>{\n  \"eventSource\": {\n    \"name\": \"{{ $alert-&gt;sysName }}\",\n    \"description\": \"{{ $alert-&gt;sysDescr }}\",\n    \"displayName\": \"LibreNMS Alerts - DBAoC\",\n    \"type\": \"server\",\n    \"sourceID\": \"LibreNMS-DBAoC\"\n  },\n  \"resourceAffected\": {\n    \"hostname\": \"{{ $alert-&gt;hostname }}\",\n    \"ipAddress\": \"{{ $alert-&gt;ip }}\",\n    \"os\": \"{{ $alert-&gt;os }}\",\n    \"location\": \"{{ $alert-&gt;location }}\",\n    \"component\": \"{{ $alert-&gt;sysName }}\"\n  },\n  \"eventInfo\": {\n    \"summary\": \"{{ $alert-&gt;title }}\",\n    \"msg\": \"{{ $alert-&gt;msg }}\",\n    \"severity\": \"{{ $alert-&gt;severity }}\",\n    \"timestamp\": \"{{ $alert-&gt;timestamp }}\",\n    \"uniqueID\": \"{{ $alert-&gt;uid }}\"\n  }\n}\n</code></pre>"},{"location":"Alerting/Transports/IRC/","title":"IRC","text":""},{"location":"Alerting/Transports/IRC/#irc","title":"IRC","text":"<p>The IRC transports only works together with the LibreNMS IRC-Bot. Configuration of the LibreNMS IRC-Bot is described here.</p> <p>Example:</p> Config Example IRC enabled"},{"location":"Alerting/Transports/Ilert/","title":"Ilert","text":""},{"location":"Alerting/Transports/Ilert/#ilert","title":"Ilert","text":"<p>This integration uses the ilert LibreNMS integration  which allows you to use all available ilert parameters such as links, images, comments, etc.</p> <p>This transport will send over the following fields:</p> <p><code>integrationKey</code> - The integration key you generated earlier. <code>eventType</code> - The type of alert such as Alerting, Acknowledged or Recovered translated to ilert event types. <code>summary</code> - The title of the alert. <code>details</code> - The output from the alert template associated with the rule. <code>alertKey</code> - The alert id. <code>priority</code> - The priority translated to the ilert priority values of HIGH (Critical) or LOW (Warning or OK)</p> <p>To customise what is sent to ilert and override or add additional fields, you can create a custom template which outputs the correct information via JSON. For this to work you must send over a summary and details values. As an example:</p> <p><pre><code>{\n    \"summary\": \"{{ $alert-&gt;title }}\",\n    \"details\": \"Severity: {{ $alert-&gt;severity }}\\nTimestamp: {{ $alert-&gt;timestamp }}\\nRule: {{ $alert-&gt;title }}\\n @foreach ($alert-&gt;faults as $key =&gt; $value) {{ $key }}: {{ $value['string'] }}\\n @endforeach\",\n    \"links\": [\n        {\n            \"href\": \"{{ route('device', ['device' =&gt; $alert-&gt;device_id ?: 1]) }}\",\n            \"text\": \"{{ $alert-&gt;hostname }}\"\n        },\n        {\n            \"href\": \"{{ route('device', ['device' =&gt; $alert-&gt;device_id ?? 1, 'tab' =&gt; 'alerts']) }}\",\n            \"text\": \"{{ $alert-&gt;hostname }} - Alerts\"\n        }\n    ],\n    \"images\": [\n        {\n            \"src\": \"@signedGraphUrl(['device' =&gt; $alert-&gt;device_id, 'type' =&gt; 'device_availability','from' =&gt; time() - 43200, 'to' =&gt; time()])\",\n            \"href\": \"{{ route('device', ['device' =&gt; $alert-&gt;device_id ?: 1]) }}\",\n            \"alt\": \"\"\n        }\n    ]\n}\n</code></pre> If you are using more than one transport for an alert rule and need to customise the output per transport then you can do the following:</p> <pre><code>@if ($alert-&gt;transport == 'ilert')\n{\n    \"summary\": \"{{ $alert-&gt;title }}\",\n    \"details\": \"Severity: {{ $alert-&gt;severity }}\\nTimestamp: {{ $alert-&gt;timestamp }}\\nRule: {{ $alert-&gt;title }}\\n @foreach ($alert-&gt;faults as $key =&gt; $value) {{ $key }}: {{ $value['string'] }}\\n @endforeach\",\n    \"links\": [\n        {\n            \"href\": \"{{ route('device', ['device' =&gt; $alert-&gt;device_id ?: 1]) }}\",\n            \"text\": \"{{ $alert-&gt;hostname }}\"\n        },\n        {\n            \"href\": \"{{ route('device', ['device' =&gt; $alert-&gt;device_id ?? 1, 'tab' =&gt; 'alerts']) }}\",\n            \"text\": \"{{ $alert-&gt;hostname }} - Alerts\"\n        }\n    ],\n    \"images\": [\n        {\n            \"src\": \"@signedGraphUrl(['device' =&gt; $alert-&gt;device_id, 'type' =&gt; 'device_availability','from' =&gt; time() - 43200, 'to' =&gt; time()])\",\n            \"href\": \"{{ route('device', ['device' =&gt; $alert-&gt;device_id ?: 1]) }}\",\n            \"alt\": \"\"\n        }\n    ]\n}\n@else\n{{ $alert-&gt;title }}\nSeverity: {{ $alert-&gt;severity }}\n@if ($alert-&gt;state == 0) Time elapsed: {{ $alert-&gt;elapsed }} @endif\nTimestamp: {{ $alert-&gt;timestamp }}\nUnique-ID: {{ $alert-&gt;uid }}\nRule: @if ($alert-&gt;name) {{ $alert-&gt;name }} @else {{ $alert-&gt;rule }} @endif\n@if ($alert-&gt;faults) Faults:\n@foreach ($alert-&gt;faults as $key =&gt; $value)\n  {{ $key }}: {{ $value['string'] }}\n@endforeach\n@endif\nAlert sent to:\n@foreach ($alert-&gt;contacts as $key =&gt; $value)\n  {{ $value }} &lt;{{ $key }}&gt;\n@endforeach\n@endif\n</code></pre> Config Example Integration Key il1api012962aba7f1bff64b56a353a19b41c5f6ae57a940123f"},{"location":"Alerting/Transports/Jira-Service-Management/","title":"Jira Service Management","text":""},{"location":"Alerting/Transports/Jira-Service-Management/#jira-service-management","title":"Jira Service Management","text":"<p>Using Jira Service Management LibreNMS integration, LibreNMS forwards alerts to Jira Service Management with detailed information. Jira Service Management acts as a dispatcher for LibreNMS alerts, determines the right people to notify based on on-call schedules and notifies via email, text messages (SMS), phone calls and iOS &amp; Android push notifications. Then escalates alerts until the alert is acknowledged or closed.</p> <p>:warning: If the feature isn\u2019t available on your site, keep checking Jira Service Management for updates.</p> <p>Example:</p> Config Example WebHook URL https://url/path/to/webhook"},{"location":"Alerting/Transports/Jira/","title":"Jira","text":""},{"location":"Alerting/Transports/Jira/#jira","title":"JIRA","text":"<p>You can have LibreNMS create issues on a Jira instance for critical and warning  alerts using either the Jira REST API or webhooks.  Custom fields allow you to add any required fields beyond summary and description  fields in case mandatory fields are required by your Jira project/issue type   configuration. Custom fields are defined in JSON format but ustom fields allow   you to add any required fields beyond summary and description fields in case   mandatory fields are required by your Jira project/issue type configuration.   Custom fields are defined in JSON format. Currently http authentication is used   to access Jira and Jira username and password will be stored as cleartext in the   LibreNMS database.</p>"},{"location":"Alerting/Transports/Jira/#rest-api","title":"REST API","text":"<p>The config fields that need to set for Jira REST API are: Jira Open URL, Jira username,  Jira password, Project key, and issue type.  </p> <p>Note: REST API is that it is only able to open new tickets.</p>"},{"location":"Alerting/Transports/Jira/#webhooks","title":"Webhooks","text":"<p>The config fields that need to set for webhooks are: Jira Open URL, Jira Close URL,  Jira username, Jira password and webhook ID.</p> <p>Note: Webhooks allow more control over how alerts are handled in Jira. With webhooks,  recovery messages can be sent to a different URL than alerts. Additionally, a custom  conditional logic can be built using the webhook payload and ID to automatically close  an open ticket if predefined conditions are met.</p> <p>Jira Issue Types Jira Webhooks</p> <p>Example:</p> Config Example Project Key JIRAPROJECTKEY Issue Type Myissuetype Open URL https://myjira.mysite.com /  https://webhook-open-url Close URL https://webhook-close-url Jira Username myjirauser Jira Password myjirapass Enable webhook ON/OFF Webhook ID alert_id Custom Fileds {\"components\":[{\"id\":\"00001\"}], \"source\": \"LibrenNMS\"}"},{"location":"Alerting/Transports/Kayako-Classic/","title":"Kayako Classic","text":""},{"location":"Alerting/Transports/Kayako-Classic/#kayako-classic","title":"Kayako Classic","text":"<p>LibreNMS can send alerts to Kayako Classic API which are then converted to tickets. To use this module, you need REST API feature enabled in Kayako Classic and configured email account at LibreNMS. To enable this, do this:</p> <p>AdminCP -&gt; REST API -&gt; Settings -&gt; Enable API (Yes)</p> <p>Also you need to know the department id to provide tickets to appropriate department and a user email to provide, which is used as ticket author.  To get department id: navigate to appropriate department name at the departments list page in Admin CP and watch the number at the end of url. Example: http://servicedesk.example.com/admin/Base/Department/Edit/17. Department ID is 17</p> <p>As a requirement, you have to know API Url, API Key and API Secret to connect to servicedesk</p> <p>Kayako REST API Docs</p> <p>Example:</p> Config Example Kayako URL http://servicedesk.example.com/api/ Kayako API Key 8cc02f38-7465-4a0c-8730-bb3af122167b Kayako API Secret Y2NhZDIxNDMtNjVkMi0wYzE0LWExYTUtZGUwMjJiZDI0ZWEzMmRhOGNiYWMtNTU2YS0yODk0LTA1MTEtN2VhN2YzYzgzZjk5 Kayako Department 1"},{"location":"Alerting/Transports/LINE-API/","title":"LINE API","text":""},{"location":"Alerting/Transports/LINE-API/#line-messaging-api","title":"LINE Messaging API","text":"<p>LINE Messaging API Docs</p> <p>Here is the step for setup a LINE bot and using it in LibreNMS.</p> <ol> <li> <p>Use your real LINE account register in developer protal.</p> </li> <li> <p>Add a new channel, choose <code>Messaging API</code> and continue fill up the forms, note that <code>Channel name</code> cannot edit later.</p> </li> <li> <p>Go to \"Messaging API\" tab of your channel, here listing some important value.</p> <ul> <li><code>Bot basic ID</code> and <code>QR code</code> is your LINE bot's ID and QR code.</li> <li><code>Channel access token (long-lived)</code>, will use it in LibreNMS, keep it safe.</li> </ul> </li> <li> <p>Use your real Line account add your LINE bot as a friend.</p> </li> <li> <p>Recipient ID can be <code>groupID</code>, <code>userID</code> or <code>roomID</code>, it will be used in LibreNMS to send message to a group or a user. Use the following NodeJS program and <code>ngrok</code> for temporally https webhook to listen it.</p> <p>LINE-bot-RecipientFetcher</p> </li> <li> <p>Run the program and using <code>ngrok</code> expose port to public</p> <pre><code>$ node index.js\n$ ngrok http 3000\n</code></pre> </li> <li> <p>Go to \"Messaging API\" tab of your channel, fill up Webhook URL to <code>https://&lt;your ngrok domain&gt;/webhook</code></p> </li> <li> <p>If you want to let LINE bot send message to a yourself, use your real account to send a message to your LINE bot. Program will print out the <code>userID</code> in console.</p> <p>sample value:  </p> <pre><code>{\"type\":\"user\",\"userId\":\"U527xxxxxxxxxxxxxxxxxxxxxxxxxc0ee\"}\n</code></pre> </li> <li> <p>If you want to let LINE bot send message to a group, do the following steps.</p> <ul> <li>Add your LINE bot into group</li> <li>Use your real account to send a message to group</li> </ul> <p>Program will print out the <code>groupID</code> in console, it will be Recipient ID, keep it safe.</p> <p>sample value:</p> <pre><code>{\"type\":\"group\",\"groupId\":\"Ce51xxxxxxxxxxxxxxxxxxxxxxxxxx6ef\",\"userId\":\"U527xxxxxxxxxxxxxxxxxxxxxxxxxc0ee\"} ```\n</code></pre> </li> </ol> <p>Example:</p> Config Example Access token fhJ9vH2fsxxxxxxxxxxxxxxxxxxxxlFU= Recipient (groupID, userID or roomID) Ce51xxxxxxxxxxxxxxxxxxxxxxxxxx6ef"},{"location":"Alerting/Transports/LINE-Notify/","title":"LINE Notify","text":""},{"location":"Alerting/Transports/LINE-Notify/#line-notify","title":"LINE Notify","text":"<p>LINE Notify</p> <p>LINE Notify API Document</p> <p>Example:</p> Config Example Token AbCdEf12345"},{"location":"Alerting/Transports/Mail/","title":"Mail","text":""},{"location":"Alerting/Transports/Mail/#mail","title":"Mail","text":"<p>The E-Mail transports uses the same email-configuration as the rest of LibreNMS. As a small reminder, here is its configuration directives including defaults:</p> <p>Emails will attach all graphs included with the @signedGraphTag directive. If the email format is set to html, they will be embedded. To disable attaching images, set email_attach_graphs to false.</p> <p>alerting/email</p> <pre><code>lnms config:set email_html true\nlnms config:set email_attach_graphs false\n</code></pre> <p>Example:</p> Config Example Email me@example.com"},{"location":"Alerting/Transports/Matrix/","title":"Matrix","text":""},{"location":"Alerting/Transports/Matrix/#matrix","title":"Matrix","text":"<p>For using the Matrix transports, you have to create a room on the Matrix-server. The provided Auth_token belongs to an user, which is member of this room. The Message, sent to the matrix-room can be built from the variables defined in Template-Syntax but without the 'alert-&gt;' prefix. See API-Transport. The variable <code>$msg</code> is contains the result of the Alert template.The Matrix-Server URL is cutted before the beginning of the <code>_matrix/client/r0/...</code> API-part.</p> <p>Example:</p> Config Example Matrix-Server URL https://matrix.example.com/ Room !ajPbbPalmVbNuQoBDK:example.com Auth_token: MDAyYmxvY2F0aW9uI...z1DCn6lz_uOhtW3XRICg Message: Alert: {{ $msg }} https://librenms.example.com"},{"location":"Alerting/Transports/Messagebird-Voice/","title":"Messagebird Voice","text":""},{"location":"Alerting/Transports/Messagebird-Voice/#messagebird-voice","title":"Messagebird Voice","text":"<p>LibreNMS can send messages through Messagebird voice Rest API transport (text to speech).</p> Config Example Api Key Api rest key given in the messagebird dashboard Originator E.164 formatted originator Recipient E.164 formatted recipient for multi recipents comma separated Language Select box for options Spoken voice Female or Male Repeat X times the message is repeated"},{"location":"Alerting/Transports/Messagebird/","title":"Messagebird","text":""},{"location":"Alerting/Transports/Messagebird/#messagebird","title":"Messagebird","text":"<p>LibreNMS can send text messages through Messagebird Rest API transport.</p> Config Example Api Key Api rest key given in the messagebird dashboard Originator E.164 formatted originator Recipient E.164 formatted recipient for multi recipents comma separated Character limit Range 1..480 (max 3 split messages)"},{"location":"Alerting/Transports/Nagios-Compatible/","title":"Nagios Compatible","text":""},{"location":"Alerting/Transports/Nagios-Compatible/#nagios-compatible","title":"Nagios Compatible","text":"<p>The nagios transport will feed a FIFO at the defined location with the same format that nagios would. This allows you to use other alerting systems with LibreNMS, for example Flapjack.</p> <p>Example:</p> Config Example Nagios FIFO /path/to/my.fifo"},{"location":"Alerting/Transports/OS-Ticket/","title":"OS Ticket","text":""},{"location":"Alerting/Transports/OS-Ticket/#osticket","title":"osTicket","text":"<p>LibreNMS can send alerts to osTicket API which are then converted to osTicket tickets.</p> <p>Example:</p> Config Example API URL http://osticket.example.com/api/http.php/tickets.json API Token 123456789"},{"location":"Alerting/Transports/Ops-Genie/","title":"Ops Genie","text":""},{"location":"Alerting/Transports/Ops-Genie/#opsgenie","title":"OpsGenie","text":"<p>\u26a0\ufe0f **Atlassian have announced the EOL of Opsgenie on the 5th April 2027. Read more here</p> <p>Using OpsGenie LibreNMS integration, LibreNMS forwards alerts to OpsGenie with detailed information. OpsGenie acts as a dispatcher for LibreNMS alerts, determines the right people to notify based on on-call schedules and notifies via email, text messages (SMS), phone calls and iOS &amp; Android push notifications. Then escalates alerts until the alert is acknowledged or closed.</p> <p>Create a LibreNMS Integration from the integrations page  once you signup. Then copy the API key from OpsGenie to LibreNMS.</p> <p>If you want to automatically ack and close alerts, leverage Marid integration. More detail with screenshots is available in OpsGenie LibreNMS Integration page.</p> <p>Example:</p> Config Example WebHook URL https://url/path/to/webhook"},{"location":"Alerting/Transports/PagerDuty/","title":"PagerDuty","text":""},{"location":"Alerting/Transports/PagerDuty/#pagerduty","title":"PagerDuty","text":"<p>LibreNMS can make use of PagerDuty, this is done by utilizing an API key and Integraton Key.</p> <p>API Keys can be found under 'API Access' in the PagerDuty portal.</p> <p>Integration Keys can be found under 'Integration' for the particular Service you have created in the PagerDuty portal.</p> <p>Example:</p> Config Example API Key randomsample Integration Key somerandomstring"},{"location":"Alerting/Transports/Philips-Hue/","title":"Philips Hue","text":""},{"location":"Alerting/Transports/Philips-Hue/#philips-hue","title":"Philips Hue","text":"<p>Want to spice up your noc life? LibreNMS will flash all lights connected to your philips hue bridge whenever an alert is triggered.</p> <p>To setup, go to the you http://<code>your-bridge-ip</code>/debug/clip.html</p> <ul> <li>Update the \"URL:\" field to <code>/api</code></li> <li>Paste this in the \"Message Body\" {\"devicetype\":\"librenms\"}</li> <li>Press the round button on your <code>philips Hue Bridge</code></li> <li>Click on <code>POST</code></li> <li>In the <code>Command Response</code> You should see output with your   username. Copy this without the quotes</li> </ul> <p>More Info: Philips Hue Documentation</p> <p>Example:</p> Config Example Host http://your-bridge-ip Hue User username Duration 1 Second"},{"location":"Alerting/Transports/Play-SMS/","title":"Play SMS","text":""},{"location":"Alerting/Transports/Play-SMS/#playsms","title":"PlaySMS","text":"<p>PlaySMS is an open source SMS-Gateway that can be used via their HTTP API using a Username and WebService Token. Please consult PlaySMS's documentation regarding number formatting.</p> <p>PlaySMS Docs</p> <p>Here an example using 3 numbers, any amount of numbers is supported:</p> <p>Example:</p> Config Example PlaySMS https://localhost/index.php User user1 Token MYFANCYACCESSTOKEN From My Name Mobiles +1234567892,+1234567890,+1234567891"},{"location":"Alerting/Transports/Pushbullet/","title":"Pushbullet","text":""},{"location":"Alerting/Transports/Pushbullet/#pushbullet","title":"Pushbullet","text":"<p>Get your Access Token from your Pushbullet's settings page and set it in your transport:</p> <p>Example:</p> Config Example Access Token MYFANCYACCESSTOKEN"},{"location":"Alerting/Transports/Pushover/","title":"Pushover","text":""},{"location":"Alerting/Transports/Pushover/#pushover","title":"Pushover","text":"<p>If you want to change the default notification sound for all notifications then you can add the following in Pushover Options:</p> <p><code>sound=falling</code></p> <p>You also have the possibility to change sound per severity: <code>sound_critical=falling</code> <code>sound_warning=siren</code> <code>sound_ok=magic</code></p> <p>Enabling Pushover support is fairly easy, there are only two required parameters.</p> <p>Firstly you need to create a new Application (called LibreNMS, for example) in your account on the Pushover website (https://pushover.net/apps).</p> <p>Now copy your API Key and obtain your User Key from the newly created Application and setup the transport.</p> <p>Pushover Docs</p> <p>Example:</p> Config Example Api Key APPLICATIONAPIKEYGOESHERE User Key USERKEYGOESHERE Pushover Options sound_critical=falling  sound_warning=siren  sound_ok=magic"},{"location":"Alerting/Transports/Rocket-Chat/","title":"Rocket Chat","text":""},{"location":"Alerting/Transports/Rocket-Chat/#rocketchat","title":"Rocket.chat","text":"<p>The Rocket.chat transport will POST the alert message to your Rocket.chat Incoming WebHook using the attachments option. Simple html tags are stripped from the message. All options are optional, the only required value is for url, without this then no call to Rocket.chat will be made.</p> <p>Rocket.chat Docs</p> <p>Example:</p> Config Example Webhook URL https://rocket.url/api/v1/chat.postMessage Rocket.chat Options channel=#Alerting  username=myname  icon_url=http://someurl/image.gif  icon_emoji=:smirk:"},{"location":"Alerting/Transports/SMS-Eagle/","title":"SMS Eagle","text":""},{"location":"Alerting/Transports/SMS-Eagle/#smseagle","title":"SMSEagle","text":"<p>SMSEagle is a hardware SMS Gateway that can be used via their HTTP API using a Username and password.</p> <p>Destination numbers are one per line, with no spaces. They can be in either local or international dialling format.</p> <p>SMSEagle Docs</p> <p>Example:</p> Config Example SMSEagle Host ip.add.re.ss User smseagle_user Password smseagle_user_password Mobiles +3534567890  0834567891"},{"location":"Alerting/Transports/SMS-Feedback/","title":"SMS Feedback","text":""},{"location":"Alerting/Transports/SMS-Feedback/#smsfeedback","title":"SMSFeedback","text":"<p>SMSFeedback is a SAAS service, which can be used to deliver Alerts via API, using API url, Username &amp; Password.</p> <p>They can be in international dialling format only.</p> <p>SMSFeedback Api Docs</p> <p>Example:</p> Config Example User smsfeedback_user Password smsfeedback_password Mobiles 71234567890 Sender name CIA"},{"location":"Alerting/Transports/SMS-mode/","title":"SMS mode","text":""},{"location":"Alerting/Transports/SMS-mode/#smsmode","title":"SMSmode","text":"<p>SMSmode is a SMS provider that can be configured by using the generic API Transport. You need a token you can find on your personnal space.</p> <p>SMSmode docs</p> <p>Example:</p> Config Example Transport type Api API Method POST API URL http://api.smsmode.com/http/1.6/sendSMS.do Options accessToken=PUT_HERE_YOUR_TOKEN numero=PUT_HERE_DESTS_NUMBER_COMMA_SEPARATEDmessage={{ $msg }}"},{"location":"Alerting/Transports/Sensu/","title":"Sensu","text":""},{"location":"Alerting/Transports/Sensu/#sensu","title":"Sensu","text":"<p>The Sensu transport will POST an Event to the Agent API upon an alert being generated.</p> <p>It will be categorised (ok, warning or critical), and if you configure the alert to send recovery notifications, Sensu will also clear the alert automatically. No configuration is required - as long as you are running the Sensu Agent on your poller with the HTTP socket enabled on tcp/3031, LibreNMS will start generating Sensu events as soon as you create the transport.</p> <p>Acknowledging alerts within LibreNMS is not directly supported, but an annotation (<code>acknowledged</code>) is set, so a mutator or silence, or even the handler could be written to look for it directly in the handler. There is also an annotation (<code>generated-by</code>) set, to allow you to treat LibreNMS events differently from agent events.</p> <p>The 'shortname' option is a simple way to reduce the length of device names in configs. It replaces the last 3 domain components with single letters (e.g. websrv08.dc4.eu.corp.example.net gets shortened to websrv08.dc4.eu.cen).</p>"},{"location":"Alerting/Transports/Sensu/#limitations","title":"Limitations","text":"<ul> <li>Only a single namespace is supported</li> <li>Sensu will reject rules with special characters - the Transport will attempt to fix up rule names, but it's best to stick to letters, numbers and spaces</li> <li>The transport only deals in absolutes - it ignores the got worse/got better /changed states</li> <li>The agent will buffer alerts, but LibreNMS will not - if your agent is offline, alerts will be dropped</li> <li>There is no backchannel between Sensu and LibreNMS - if you make changes in Sensu to LibreNMS alerts, they'll be lost on the next event (silences will work)</li> </ul> <p>Example:</p> Config Example Sensu Endpoint http://localhost:3031 Sensu Namespace eu-west Check Prefix lnms Source Key hostname"},{"location":"Alerting/Transports/Signal-CLI/","title":"Signal CLI","text":""},{"location":"Alerting/Transports/Signal-CLI/#signal-cli","title":"Signal CLI","text":"<p>Use the Signal Mesenger for Alerts. Run the Signal CLI with the D-Bus option.</p> <p>GitHub Project</p> <p>Example:</p> Config Example Path /opt/signal-cli/bin/signal-cli Recipient type Group Recipient dfgjsdkgljior4345=="},{"location":"Alerting/Transports/Signl4/","title":"Signl4","text":""},{"location":"Alerting/Transports/Signl4/#signl4","title":"SIGNL4","text":"<p>SIGNL4 offers critical alerting, incident response and service dispatching for operating critical infrastructure. It alerts you persistently via app push, SMS text, voice calls, and email including tracking, escalation, on-call duty scheduling and collaboration.</p> <p>Integrating SIGNL4 with LibreNMS to forward critical alerts with detailed information to responsible people or on-call teams. The integration supports triggering as well as closing alerts.</p> <p>In the configuration for your SIGNL4 alert transport you just need to enter your SIGNL4 webhook URL including team or integration secret.</p> <p>Example:</p> Config Example Webhook URL https://connect.signl4.com/webhook/{team-secret} <p>You can find more information about the integration here.</p>"},{"location":"Alerting/Transports/Slack/","title":"Slack","text":""},{"location":"Alerting/Transports/Slack/#slack","title":"Slack","text":"<p>The Slack transport will POST the alert message to your Slack Incoming WebHook using the attachments option, you are able to specify multiple webhooks along with the relevant options to go with it. Simple html tags are stripped from the message. All options are optional, the only required value is for url, without this  then no call to Slack will be made.</p> <p>We currently support the following attachment options:</p> <ul> <li><code>author_name</code></li> </ul> <p>We currently support the following global message options:</p> <ul> <li><code>channel_name</code> : Slack channel name (without the leading '#') to which the alert will go</li> <li><code>icon_emoji</code> : Emoji name in colon format to use as the author icon</li> </ul> <p>Slack docs</p> <p>The alert template can make use of Slack markdown. In the Slack markdown dialect, custom links are denoted with HTML angled brackets, but LibreNMS strips these out. To support embedding custom links in alerts, use the bracket/parentheses markdown syntax for links.  For example if you would typically use this for a Slack link:</p> <p><code>&lt;https://www.example.com|My Link&gt;</code></p> <p>Use this in your alert template:</p> <p><code>[My Link](https://www.example.com)</code></p> <p>Example:</p> Config Example Webhook URL https://slack.com/url/somehook Channel network-alerts Author Name LibreNMS Bot Icon <code>:scream:</code>"},{"location":"Alerting/Transports/Splunk/","title":"Splunk","text":""},{"location":"Alerting/Transports/Splunk/#splunk","title":"Splunk","text":"<p>LibreNMS can send alerts to a Splunk instance and provide all device and alert details.</p> <p>Example output:</p> <pre><code>Feb 21 15:21:52 nms  hostname=\"localhost\", sysName=\"localhost\", \nsysDescr=\"\", sysContact=\"\", os=\"fortigate\", type=\"firewall\", ip=\"localhost\", \nhardware=\"FGT_50E\", version=\"v5.6.9\", serial=\"\", features=\"\", location=\"\", \nuptime=\"387\", uptime_short=\" 6m 27s\", uptime_long=\" 6 minutes 27 seconds\", \ndescription=\"\", notes=\"\", alert_notes=\"\", device_id=\"0\", rule_id=\"0\", \nid=\"0\", proc=\"\", status=\"1\", status_reason=\"\", ping_timestamp=\"\", ping_loss=\"0\", \nping_min=\"25.6\", ping_max=\"26.8\", ping_avg=\"26.3\", \ntitle=\"localhost recovered from  Device up/down  \", elapsed=\"14m 54s\", uid=\"0\", \nalert_id=\"0\", severity=\"critical\", name=\"Device up/down\", \ntimestamp=\"2020-02-21 15:21:33\", state=\"0\", device_device_id=\"0\", \ndevice_inserted=\"\", device_hostname=\"localhost\", device_sysName=\"localhost\", \ndevice_ip=\"localhost\", device_overwrite_ip=\"\", device_timeout=\"\", device_retries=\"\", \ndevice_snmp_disable=\"0\", device_bgpLocalAs=\"0\", \ndevice_sysObjectID=\"\", device_sysDescr=\"\", \ndevice_sysContact=\"\", device_version=\"v5.6.9\", device_hardware=\"FGT_50E\", \ndevice_features=\"build1673\", device_location_id=\"\", device_os=\"fortigate\", \ndevice_status=\"1\", device_status_reason=\"\", device_ignore=\"0\", device_disabled=\"0\", \ndevice_uptime=\"387\", device_agent_uptime=\"0\", device_last_polled=\"2020-02-21 15:21:33\", \ndevice_last_poll_attempted=\"\", device_last_polled_timetaken=\"7.9\", \ndevice_last_discovered_timetaken=\"11.77\", device_last_discovered=\"2020-02-21 13:16:42\", \ndevice_last_ping=\"2020-02-21 15:21:33\", device_last_ping_timetaken=\"26.3\", \ndevice_purpose=\"\", device_type=\"firewall\", device_serial=\"FGT50EXXX\", \ndevice_icon=\"images/os/fortinet.svg\", device_poller_group=\"0\", \ndevice_override_sysLocation=\"0\", device_notes=\"\", device_port_association_mode=\"1\", \ndevice_max_depth=\"0\", device_disable_notify=\"0\", device_location=\"\", \ndevice_vrf_lites=\"Array\", device_lat=\"\", device_lng=\"\", - \nsysObjectID =&gt; \"\"; `\n</code></pre> <p>Each alert will be sent as a separate message.</p> <p>Example:</p> Config Example Host 127.0.0.1 UDP Port 514"},{"location":"Alerting/Transports/Syslog/","title":"Syslog","text":""},{"location":"Alerting/Transports/Syslog/#syslog","title":"Syslog","text":"<p>You can have LibreNMS emit alerts as syslogs complying with RFC 3164.</p> <p>More information on RFC 3164 can be found here: https://tools.ietf.org/html/rfc3164</p> <p>Example output: <code>&lt;26&gt; Mar 22 00:59:03 librenms.host.net librenms[233]: [Critical] network.device.net: Port Down - port_id =&gt; 98939; ifDescr =&gt; xe-1/1/0;</code></p> <p>Each fault will be sent as a separate syslog.</p> <p>Example:</p> Config Example Host 127.0.0.1 Port 514 Facility 3"},{"location":"Alerting/Transports/Telegram/","title":"Telegram","text":""},{"location":"Alerting/Transports/Telegram/#telegram","title":"Telegram","text":"<p>Thank you to snis for these instructions.</p> <ol> <li> <p>First you must create a telegram account and add BotFather to you    list. To do this click on the following url:    https://telegram.me/botfather</p> </li> <li> <p>Generate a new bot with the command \"/newbot\" BotFather is then    asking for a username and a normal name. After that your bot is    created and you get a HTTP token. (for more options for your bot    type \"/help\")</p> </li> <li> <p>Add your bot to telegram with the following url:    <code>http://telegram.me/&lt;botname&gt;</code> to use app or    <code>https://web.telegram.org/&lt;botname&gt;</code> to use in web, and send some    text to the bot.</p> </li> <li> <p>The BotFather should have responded with a token, copy your token    code and go to the following page in chrome:    <code>https://api.telegram.org/bot&lt;tokencode&gt;/getUpdates</code> (this could    take a while so continue to refresh until you see something similar    to below)</p> </li> <li> <p>You see a json code with the message you sent to the bot. Copy the    Chat id. In this example that is \u201c-9787468\u201d within this example:    <code>\"message\":{\"message_id\":7,\"from\":\"id\":656556,\"first_name\":\"Joo\",\"last_name\":\"Doo\",\"username\":\"JohnDoo\"},\"chat\":{\"id\":-9787468,\"title\":\"Telegram    Group\"},\"date\":1435216924,\"text\":\"Hi\"}}]}</code>.</p> </li> <li> <p>Now create a new \"Telegram transport\" in LibreNMS (Global Settings    -&gt; Alerting Settings -&gt; Telegram transport). Click on 'Add Telegram    config' and put your chat id and token into the relevant box.</p> </li> <li> <p>If want to use a group to receive alerts, you need to pick the Chat    ID of the group chat, and not of the Bot itself.</p> </li> </ol> <p>Telegram Docs</p> <p>Configuration Example:</p> Config Example Chat ID 34243432 Token 3ed32wwf235234 Format HTML or MARKDOWN Send PNG Graph As photo or file <p>Template Example:</p> <p>This will send a set of images (photos or files) followed by the text message, every signedGraphTag helper will be removed from the message content.</p> <pre><code>{{ $alert-&gt;title }}\nDevice Name: {{ $alert-&gt;hostname }}\nSeverity: {{ $alert-&gt;severity }}\n@if ($alert-&gt;state == 0) Time elapsed: {{ $alert-&gt;elapsed }} @endif\nTimestamp: {{ $alert-&gt;timestamp }}\nRule: @if ($alert-&gt;name) {{ $alert-&gt;name }} @else {{ $alert-&gt;rule }} @endif\n@foreach ($alert-&gt;faults as $key =&gt; $value)\nPhysical Interface: {{ $value['ifDescr'] }}\nInterface Description: {{ $value['ifAlias'] }}\nInterface Speed: {{ ($value['ifSpeed']/1000000000) }} Gbs\nInbound Utilization: {{ (($value['ifInOctets_rate']*8)/$value['ifSpeed'])*100 }}\nOutbound Utilization: {{ (($value['ifOutOctets_rate']*8)/$value['ifSpeed'])*100 }}\n@signedGraphTag([\n    'id' =&gt; $value['port_id'],\n    'type' =&gt; 'port_bits',\n    'from' =&gt; time() - 43200,\n    'to' =&gt; time(),\n    'width' =&gt; 700, \n    'height' =&gt; 250,\n    'title' =&gt; 'yes',\n])\n@endforeach\n</code></pre>"},{"location":"Alerting/Transports/Twilio/","title":"Twilio","text":""},{"location":"Alerting/Transports/Twilio/#twilio-sms","title":"Twilio SMS","text":"<p>Twilio will send your alert via SMS.  From your Twilio account you will need your account SID, account token and your Twilio SMS phone number that you would like to send the alerts from.  Twilio's APIs are located at: https://www.twilio.com/docs/api?filter-product=sms</p> <p>Example:</p> Config Example SID ACxxxxxxxxxxxxxxxxxxxxxxxxxxxx Token 7xxxx573acxxxbc2xxx308d6xxx652d32 Twilio SMS Number 8888778660"},{"location":"Alerting/Transports/Victor-Ops/","title":"Victor Ops","text":""},{"location":"Alerting/Transports/Victor-Ops/#victorops","title":"VictorOps","text":"<p>VictorOps provide a webHook url to make integration extremely simple. To get the URL required login to your VictorOps  account and go to:</p> <p>Settings -&gt; Integrations -&gt; REST Endpoint -&gt; Enable Integration.</p> <p>The URL provided will have $routing_key at the end, you need to change this to something that is unique to the system  sending the alerts such as librenms. I.e:</p> <p><code>https://alert.victorops.com/integrations/generic/20132414/alert/2f974ce1-08fc-4dg8-a4f4-9aee6cf35c98/librenms</code></p> <p>Example:</p> Config Example Post URL https://alert.victorops.com/integrations/generic/20132414/alert/2f974ce1-08fc-4dg8-a4f4-9aee6cf35c98/librenms"},{"location":"Alerting/Transports/Wled/","title":"Wled","text":""},{"location":"Alerting/Transports/Wled/#wled","title":"WLED","text":"<p>This enables setting of WLED presets for alerts.</p> <p>This requires the following information. The hostname/IP of the WLED instance and the IDs of the presets you will be using. The ID for the preset will be the number by it's name in the WLED web interface.</p> <p>Leaving warning, critical, or recovery blank, will mean that severity/state is ignored.</p> <p>Using warning, critical, and recovery together can lead to unpredicatble results. Similarly best to only use this for very specific alerts/hosts given this transport can only communicate limited info.</p> <p>Examples:</p> <p>Set the preset on WLED at 10.1.2.3 to 1 for warnings and 3 for recoveries.</p> Config Example Host 10.1.2.3 Warning 1 Critical Recovery 3 <p>Set the preset on WLED at 10.1.2.3 to 2 for criticals and 3 for recoveries.</p> Config Example Host 10.1.2.3 Warning Critical 2 Recovery 3 <p>Set the preset on WLED at 10.1.2.3 to 1 for warnings and 2 for criticals.</p> Config Example Host 10.1.2.3 Warning 1 Critical 2 Recovery <p>Set the preset on WLED at 10.1.2.3 to 2 for criticals.</p> Config Example Host 10.1.2.3 Warning Critical 2 Recovery"},{"location":"Alerting/Transports/ZenDesk/","title":"ZenDesk","text":""},{"location":"Alerting/Transports/ZenDesk/#zenduty","title":"Zenduty","text":"<p>Two options are available for ZenDuty support, the first, native ZenDuty is via the API Transport as detailed in official ZenDuty integration documentation. The other way is by utilising a native LibreNMS transport.</p>"},{"location":"Alerting/Transports/ZenDesk/#native-zenduty","title":"Native ZenDuty","text":"<p>Leveraging LibreNMS &gt; Zenduty Integration, users can send new LibreNMS  alerts to the right team and notify them based on on-call schedules via email, SMS, Phone Calls, Slack, Microsoft Teams and mobile push notifications. Zenduty provides engineers with detailed context around  the LibreNMS alert along with playbooks and a complete incident command framework to triage, remediate and resolve incidents with speed.</p> <p>Create a LibreNMS Integration from inside  Zenduty, then copy the Webhook URL from Zenduty to LibreNMS.</p> <p>For a detailed guide with screenshots, refer to the  LibreNMS documentation at Zenduty.</p> <p>Example:</p> Config Example WebHook URL https://www.zenduty.com/api/integration/librenms/integration-key/"},{"location":"Alerting/Transports/ZenDesk/#native-librenms-transport","title":"Native LibreNMS Transport","text":"<p>This integration uses the ZenDuty Webhooks  which allows you to use all available ZenDuty parameters such as URLs, SLA,  Escalation Policies, etc.</p> <p>Follow the instructions in the above link to obtain your Webhook URL and then paste that  into the <code>ZenDuty WebHook</code> field when setting up the LibreNMS transport.</p> <p>You can also set the SLA ID and Escalation Policy ID from within the Transport configuration  which will be sent with all alerts.</p> <p>This transport will send over the following fields:</p> <p><code>message</code> - The alert title <code>alert_type</code> - The severity of the alert rule, acknowledged or resolved depending on the state of the alert. <code>entity_id</code> - The alert ID <code>urls</code> - A link back to the device generating the alert. <code>summary</code> - The output of the template associated with the alert rule.</p> <p>To customise what is sent to ZenDuty and override or add additional fields, you can create  a custom template which outputs the correct information via JSON. As an example:</p> <p><pre><code>{\n    \"message\": \"{{ $alert-&gt;title }}\",\n    \"payload\": {\n        \"sysName\": \"{{ $alert-&gt;sysName }}\",\n        \"Device Type\": \"{{ $alert-&gt;type }}\"\n    },\n    \"summary\": \"Severity: {{ $alert-&gt;severity }}\\nTimestamp: {{ $alert-&gt;timestamp }}\\nRule: {{ $alert-&gt;title }}\\n @foreach ($alert-&gt;faults as $key =&gt; $value) {{ $key }}: {{ $value['string'] }}\\n @endforeach\",\n    \"sla\": \"ccaf3fd6-db51-4f9f-818b-de42aee54f29\",\n    \"urls\": [\n        {\n            \"link_url\": \"{{ route('device', ['device' =&gt; $alert-&gt;device_id ?: 1]) }}\",\n            \"link_text\": \"{{ $alert-&gt;hostname }}\"\n        },\n        {\n            \"link_url\": \"{{ route('device', ['device' =&gt; $alert-&gt;device_id ?? 1, 'tab' =&gt; 'alerts']) }}\",\n            \"link_text\": \"{{ $alert-&gt;hostname }} - Alerts\"\n        }\n    ]\n}\n</code></pre> If you are using more than one transport for an alert rule and need to customise the output per  transport then you can do the following:</p> <pre><code>@if ($alert-&gt;transport == 'ZenDuty')\n{\n  \"message\": \"{{ $alert-&gt;title }}\",\n  \"payload\": {\n    \"sysName\": \"{{ $alert-&gt;sysName }}\",\n    \"Device Type\": \"{{ $alert-&gt;type }}\"\n  },\n  \"summary\": \"Severity: {{ $alert-&gt;severity }}\\nTimestamp: {{ $alert-&gt;timestamp }}\\nRule: {{ $alert-&gt;title }}\\n @foreach ($alert-&gt;faults as $key =&gt; $value) {{ $key }}: {{ $value['string'] }}\\n @endforeach\",\n  \"sla\": \"ccaf3fd6-db51-4f9f-818b-de42aee54f29\",\n  \"urls\": [\n    {\n      \"link_url\": \"{{ route('device', ['device' =&gt; $alert-&gt;device_id ?: 1]) }}\",\n      \"link_text\": \"{{ $alert-&gt;hostname }}\"\n    },\n    {\n      \"link_url\": \"{{ route('device', ['device' =&gt; $alert-&gt;device_id ?? 1, 'tab' =&gt; 'alerts']) }}\",\n      \"link_text\": \"{{ $alert-&gt;hostname }} - Alerts\"\n    }\n  ]\n}\n@else\n{{ $alert-&gt;title }}\nSeverity: {{ $alert-&gt;severity }}\n@if ($alert-&gt;state == 0) Time elapsed: {{ $alert-&gt;elapsed }} @endif\nTimestamp: {{ $alert-&gt;timestamp }}\nUnique-ID: {{ $alert-&gt;uid }}\nRule: @if ($alert-&gt;name) {{ $alert-&gt;name }} @else {{ $alert-&gt;rule }} @endif\n@if ($alert-&gt;faults) Faults:\n@foreach ($alert-&gt;faults as $key =&gt; $value)\n  {{ $key }}: {{ $value['string'] }}\n@endforeach\n@endif\nAlert sent to:\n@foreach ($alert-&gt;contacts as $key =&gt; $value)\n  {{ $value }} &lt;{{ $key }}&gt;\n@endforeach\n@endif\n</code></pre> Config Example WebHook URL https://events.zenduty.com/integration/we8jv/generic/hash/ SLA ID g27u4gr824r-dd32rf2wdedeas-3e2wd223d23 Escalation Policy ID KIJDi23rwnef23-dankjd323r-DSAD\u00a32232fds"},{"location":"Alerting/Transports/aspSMS/","title":"aspSMS","text":""},{"location":"Alerting/Transports/aspSMS/#aspsms","title":"aspSMS","text":"<p>aspSMS is a SMS provider that can be configured by using the generic API Transport. You need a token you can find on your personnal space.</p> <p>aspSMS docs</p> <p>Example:</p> Config Example Transport type Api API Method POST API URL https://soap.aspsms.com/aspsmsx.asmx/SimpleTextSMS Options UserKey=USERKEYPassword=APIPASSWORDRecipient=RECIPIENT Originator=ORIGINATORMessageText={{ $msg }}"},{"location":"Developing/Application-Notes/","title":"Notes On Application Development","text":""},{"location":"Developing/Application-Notes/#librenms-json-snmp-extends","title":"LibreNMS JSON SNMP Extends","text":"<p>The polling function <code>json_app_get</code> makes it easy to poll complex data using SNMP extends and JSON.</p> <p>The following exceptions are provided by it.</p> <p>It takes three parameters, in order in the list below.</p> <ul> <li>Integer :: Device ID to fetch it for.</li> <li>String :: The extend name. For example, if 'zfs' is passed it will   be converted to 'nsExtendOutputFull.3.122.102.115'.</li> <li>Integer :: Minimum expected version of the JSON return.</li> </ul> <p>The required keys for the returned JSON are as below.</p> <ul> <li>version :: The version of the snmp extend script. Should be numeric   and at least 1.</li> <li>error :: Error code from the snmp extend script. Should be &gt; 0    (0 will be ignored and negatives are reserved)</li> <li>errorString :: Text to describe the error.</li> <li>data :: An key with an array with the data to be used.</li> </ul> <p>The supported exceptions are as below.</p> <ul> <li>JsonAppPollingFailedException :: Empty return from SNMP.</li> <li>JsonAppParsingFailedException :: Could not parse the JSON</li> <li>JsonAppBlankJsonException :: Blank JSON.</li> <li>JsonAppMissingKeysException :: Missing required keys.</li> <li>JsonAppWrongVersionException :: Older version than supported.</li> <li>JsonAppExtendErroredException :: Polling and parsing was good, but   the returned data has an error set. This may be checked via   $e-&gt;getParsedJson() and then checking the keys error and   errorString.</li> </ul> <p>The error value can be accessed via $e-&gt;getCode(). The output can be accessed via $-&gt;getOutput() Only returned JsonAppParsingFailedException. The parsed JSON can be access via $e-&gt;getParsedJson().</p> <p>An example below from <code>includes/polling/applications/zfs.inc.php</code>...</p> <pre><code>try {\n    $zfs = json_app_get($device, $name, 1)['data'];\n} catch (JsonAppMissingKeysException $e) {\n    //old version with out the data key\n    $zfs = $e-&gt;getParsedJson();\n} catch (JsonAppException $e) {\n    echo PHP_EOL . $name . ':' . $e-&gt;getCode() . ':' . $e-&gt;getMessage() . PHP_EOL;\n    update_application($app, $e-&gt;getCode() . ':' . $e-&gt;getMessage(), []);\n\n    return;\n}\n</code></pre>"},{"location":"Developing/Application-Notes/#compression","title":"Compression","text":"<p>Also worth noting that <code>json_app_get</code> supports compressed data via base64 encoded gzip. If base64 encoding is detected on the the SNMP return, it will be gunzipped and then parsed.</p> <p><code>https://github.com/librenms/librenms-agent/blob/master/utils/librenms_return_optimizer</code> may be used to optimize JSON returns.</p>"},{"location":"Developing/Application-Notes/#application-data-storage","title":"Application Data Storage","text":"<p>The <code>$app</code> model is supplied for each application poller and graph. You may access and update the <code>$app-&gt;data</code> field to store arrays of data the Application model.</p> <p>When you call update_application() the <code>$app</code> model will be saved along with any changes to the data field.</p> <pre><code>// set the varaible data to $foo\n$app-&gt;data = [\n    'item_A' =&gt; 123,\n    'item_B' =&gt; 4.5,\n    'type' =&gt; 'foo',\n    'other_items' =&gt; [ 'a', 'b', 'c' ],\n];\n\n// save the change\n$app-&gt;save();\n\n// var_dump the contents of the variable\nvar_dump($app-&gt;data);\n</code></pre>"},{"location":"Developing/Code-Structure/","title":"Code structure","text":"<p>This document will try and provide a good overview of how the code is structured within LibreNMS. We will go through the main directories and provide information on how and when they are used. LibreNMS now uses Laravel for much of it's frontend (webui) and database code. Much of the Laravel documentation applies: https://laravel.com/docs/structure</p> <p>Directories from the (filtered) structure tree below are some of the directories that will be most interesting during development:</p> <pre><code>.\n\u251c\u2500 app\n\u251c\u2500 database\n\u2502  \u2514\u2500 migrations\n\u251c\u2500 doc\n\u251c\u2500 html\n\u2502  \u251c\u2500 css\n\u2502  \u2502  \u2514\u2500 custom\n\u2502  \u2514\u2500 js\n\u251c\u2500 includes\n\u2502  \u251c\u2500 definitions\n\u2502  \u251c\u2500 discovery\n\u2502  \u251c\u2500 html\n\u2502  \u2502  \u251c\u2500 forms\n\u2502  \u2502  \u251c\u2500 graphs\n\u2502  \u2502  \u251c\u2500 pages\n\u2502  \u2502  \u2514\u2500 reports\n\u2502  \u2514\u2500 polling\n\u251c\u2500 LibreNMS\n\u251c\u2500 logs\n\u251c\u2500 mibs\n\u2514\u2500 rrd\n</code></pre>"},{"location":"Developing/Code-Structure/#doc","title":"doc/","text":"<p>This is the location of all the documentation for LibreNMS, this is in GitHub markdown format and can be viewed online</p>"},{"location":"Developing/Code-Structure/#app","title":"app/","text":"<p>Most Laravel and Eloquent classes should be under this directory.</p>"},{"location":"Developing/Code-Structure/#librenms","title":"LibreNMS/","text":"<p>Classes that don't belong to the Laravel application belong in this directory, with a directory structure that matches the namespace.  One class per file. See PSR-0 for details.</p>"},{"location":"Developing/Code-Structure/#html","title":"html/","text":"<p>All legacy web accessible files are located here. New pages should follow the Laravel conventions.</p>"},{"location":"Developing/Code-Structure/#htmlapi_v0php","title":"html/api_v0.php","text":"<p>This is the API routing file which directs users to the correct API function based on the API endpoint call.</p>"},{"location":"Developing/Code-Structure/#htmlindexphp","title":"html/index.php","text":"<p>This is the main file which all links within LibreNMS are parsed through. It loads the majority of the relevant includes needed for the control panel to function. CSS and JS files are also loaded here.</p>"},{"location":"Developing/Code-Structure/#htmlcss","title":"html/css/","text":"<p>All used CSS files are located here.</p>"},{"location":"Developing/Code-Structure/#htmlcsscustom","title":"html/css/custom/","text":"<p>This is a directory you can put custom css files into that won't interfere with auto updates</p>"},{"location":"Developing/Code-Structure/#htmljs","title":"html/js/","text":"<p>All used JS files are located here.</p>"},{"location":"Developing/Code-Structure/#includes","title":"includes/","text":"<p>This directory is quite big and contains all the files to make the cli and polling / discovery to work.  This code is not currently accessible from Laravel code (intentionally).</p>"},{"location":"Developing/Code-Structure/#includesdiscovery-includespolling","title":"includes/discovery/, includes/polling/","text":"<p>All the discovery and polling code. The format is usually quite similar between discovery and polling. Both are made up of modules and the files within the relevant directories will match that module. So for instance if you want to update the os detection for a device, you would look in <code>includes/discovery/os/</code> for a file named after the operating system such as linux: <code>includes/discovery/linux.inc.php</code>. Within here you would update or add support for newer OS'. This is the same for polling as well.</p>"},{"location":"Developing/Code-Structure/#includeshtml","title":"includes/html/","text":"<p>This is where the majority of the website core files are located. These tend to be files that contain functions or often used code segments that can be included where needed rather than duplicating code.</p>"},{"location":"Developing/Code-Structure/#includeshtmlforms","title":"includes/html/forms/","text":"<p>This directory contains all of the files that are dynamically included from an ajax call to ajax/form.</p>"},{"location":"Developing/Code-Structure/#includeshtmlapi_functionsincphp","title":"includes/html/api_functions.inc.php","text":"<p>All of the functions and calls for the API are located here.</p>"},{"location":"Developing/Code-Structure/#includeshtmlfunctionsincphp","title":"includes/html/functions.inc.php","text":"<p>This contains the majority of functions used throughout the standard web ui.</p>"},{"location":"Developing/Code-Structure/#includeshtmlgraphs","title":"includes/html/graphs/","text":"<p>This directory contains global and OS specific graph definitions.</p>"},{"location":"Developing/Code-Structure/#includeshtmlreports","title":"includes/html/reports/","text":"<p>In here is a list of of files that generate PDF reports available to the user. These are dynamically called in from <code>html/pdf.php</code> based on the report the user requests.</p>"},{"location":"Developing/Code-Structure/#includeshtmltable","title":"includes/html/table/","text":"<p>This directory contains all of the ajax calls when generating the table of data. Most have been converted over so if you are planning to add a new table of data then you will do so here for all of the back end data calls.</p>"},{"location":"Developing/Code-Structure/#includeshtmlpages","title":"includes/html/pages/","text":"<p>This directory contains the URL structure when browsing the Web UI. So for example <code>/devices/</code> is actually a call to <code>includes/html/pages/devices.inc.php</code>, <code>/device/tab=ports/</code> is <code>includes/html/pages/device/ports.inc.php</code>.</p>"},{"location":"Developing/Code-Structure/#logs","title":"logs/","text":"<p>Contains the main librenms.log file by default, but can also contain your web server's logs, poller logs, and other items.</p>"},{"location":"Developing/Code-Structure/#mibs","title":"mibs/","text":"<p>Here is where all of the mibs are located.  Generally standard mibs should be in the root directory and specific vendor mibs should be in their own subdirectory.</p>"},{"location":"Developing/Code-Structure/#rrd","title":"rrd/","text":"<p>Simple enough, this is where all of the rrd files are created. They are stored in directory based on the device hostname.</p>"},{"location":"Developing/Code-Structure/#databasemigrations","title":"database/migrations","text":"<p>Contains all the database migrations.  See Laravel docs for additional info: https://laravel.com/docs/migrations</p> <p>In general to create a new table you should run:</p> <pre><code>php artisan make:model ModelName -m -c -r\n</code></pre>"},{"location":"Developing/Creating-Documentation/","title":"Creating Documentation","text":"<p>One of the goals of the LibreNMS project is to enable users to get all of the help they need from our documentation.</p> <p>The documentation uses the markdown markup language and is generated with mkdocs. To edit or create markdown you only need a text editor, but it is recommended to build your docs before submitting, in order to check them visually. The section on this page has instructions for this step.</p>"},{"location":"Developing/Creating-Documentation/#writing-docs","title":"Writing docs","text":"<p>When you are adding a new feature or extension, we need to have full documentation to go along with it. It's quite simple to do this:</p> <ul> <li>Find the relevant directory to store your new document in, General, Support   and Extensions are the most likely choices.</li> <li>Think of a descriptive name that's not too long, it should match what they may   be looking for or describes the feature.</li> <li>Add the new document into the <code>nav</code> section of <code>mkdocs.yml</code> if it needs to   appear in the table of contents</li> <li>Ensure the first line contains: <code>source: path/to/file.md</code> - don't include the   initial <code>doc/</code>.</li> <li>In the body of the document, be descriptive but keep things simple. Some tips:</li> <li>If the document could cover different distros like CentOS and Ubuntu please     try and include the information for them all. If that's not possible then at least put a placeholder in asking for contributions.</li> <li>Ensure you use the correct formatting for <code>commands</code> and <code>code blocks</code> by     wrapping one liners in backticks or blocks in ```.</li> <li>Put content into sub-headings where possible to organise the content.</li> <li>If you rename a file, please add a redirect for the old file in <code>mkdocs.yml</code> like so: <pre><code>  - redirects:\n      redirect_maps:\n        'old/page.md': 'new/page.md'\n</code></pre></li> </ul> <p>Please ensure you add the document to the relevant section within <code>pages</code> of <code>mkdocs.yml</code> so that it's in the correct menu and is built.  Forgetting this step will result in your document never seeing the light of day :)</p>"},{"location":"Developing/Creating-Documentation/#formatting-docs","title":"Formatting docs","text":"<p>Our docs are based on Markdown using mkdocs which adheres to markdown specs and nothing more, because of that we also import a couple of extra libraries:</p> <ul> <li>pymdownx.tasklist</li> <li>pymdownx.tilde</li> </ul> <p>This means you can use:</p> <ul> <li><code>~~strikethrough~~</code> to perform strikethrough</li> <li> <code>- [X] List items</code></li> <li>Url's can be made <code>[like this](https://www.librenms.org)</code> like this</li> <li>Code can be placed in `` for single line or ``` for multiline.</li> <li><code>#</code> Can be used for main headings which translates to a <code>&lt;h1&gt;</code> tag,   increasing the <code>#</code>'s will increase the hX tags.</li> <li><code>###</code> Can be used for sub-headings which will appear in the TOC to the left.</li> <li>Settings should be prefixed with <code>!!! setting \"&lt;webui setting path&gt;\"</code></li> </ul> <p>Markdown CheatSheet Link</p>"},{"location":"Developing/Creating-Documentation/#building-docs","title":"Building docs","text":"<p>This is achieved with <code>mkdocs</code>, a python package.</p> <ol> <li>Install the required packages.</li> </ol> <p><pre><code>pip install mkdocs mkdocs-exclude mkdocs-material mkdocs-macros-plugin mkdocs-minify-plugin mkdocs-redirects mkdocs-include-dir-to-nav\n</code></pre> If you encounter permissions issues, these might be reoslved by using the user option, with whatever user you are building as, e.g. <code>-u librenms</code></p> <ol> <li> <p>A configuration file for building LibreNMS docs is already included in the distribution: <code>/opt/librenms/mkdocs.yml</code>. The various configuration directives are documented here.</p> </li> <li> <p>Build from the librenms base directory: <code>cd /opt/librenms</code>.</p> </li> <li> <p>Building is simple:</p> </li> </ol> <pre><code>mkdocs build\n</code></pre> <p>This will output all the documentation in html format to <code>/opt/librenms/out</code> (this folder will be ignored from any commits).</p>"},{"location":"Developing/Creating-Documentation/#viewing-docs","title":"Viewing docs","text":"<p>mkdocs includes it's own light-weight webserver for this purpose.</p> <p>Viewing is as simple as running the following command:</p> <pre><code>$ mkdocs serve\nINFO    -  Building documentation...\n&lt;..&gt;\nINFO    -  Documentation built in 12.54 seconds\n&lt;..&gt;\nINFO    -  Serving on http://127.0.0.1:8000\n&lt;..&gt;\nINFO    -  Start watching changes\n</code></pre> <p>Now you will find the complete set of LibreNMS documentation by opening your browser to <code>localhost:8000</code>.</p> <p>Note it is not necessary to <code>build</code> before viewing as the <code>serve</code> command will do this for you. Also the server will update the documents it is serving whenever changes to the markdown are made, such as in another terminal.</p>"},{"location":"Developing/Creating-Documentation/#viewing-docs-from-another-machine","title":"Viewing docs from another machine","text":"<p>By default the server will only listen for connections from the local machine. If you are building on a different machine you can use the following directive to listen on all interfaces:</p> <pre><code>mkdocs serve --dev-addr=0.0.0.0:8000\n</code></pre> <p>WARNING: this is not a secure webserver, do this at your own risk, with appropriate host security and do not leave the server running.</p>"},{"location":"Developing/Creating-Release/","title":"Creating a release","text":""},{"location":"Developing/Creating-Release/#github","title":"GitHub","text":"<p>You can create a new release on GitHub.</p> <p>Enter the tag version that month, i.e for September 2016 you would enter <code>201609</code>.</p> <p>Enter a title, we usually use <code>August 2016 Release</code></p> <p>Enter a placeholder for the body, we will edit this later.</p>"},{"location":"Developing/Creating-Release/#create-changelog","title":"Create changelog","text":"<p>For this, we assume you are using the master branch to create the release against.</p> <p>We now generate the changelog using the GitHub API itself so it shouldn't matter what state your local branch is in so long as it has the code to generate the changelog itself.</p> <p>Using the GitHub API means we can use the labels associated with merged pull requests to categorise the changelog. We also then record who made the pull request to thank them in the changelog itself.</p> <p>You will be asked for a GitHub personal access token. You can generate this here. No permissions should be needed so just give it a name and click <code>Generate Token</code>. You can then export the token as an  environment variable <code>GH_TOKEN</code> or place it in your <code>.env</code> file.</p> <p>The basic command to run is by using <code>artisan</code>. Here you pass <code>new tag</code> (1.41) and <code>previous tag</code> (1.40). For further  help run <code>php artisan release:tag --help</code>. This will generate a changelog up to the latest master branch, if you want  it to be done against something else then pass the latest pull request number with <code>--pr $PR_NUMBER</code>.</p> <pre><code>php artisan release:tag 1.41 1.40\n</code></pre> <ul> <li>Now commit and push the change that has been made to <code>doc/General/Changelog.md</code>.</li> <li>Once the pull request has been merged in for the Changelog, you can   create a new release on   GitHub.</li> <li>Create two threads on the community site:</li> <li>A changelog thread example</li> <li>An info thread example</li> <li>Tweet it</li> <li>Facebook it</li> <li>Google Plus it</li> <li>LinkedIn it</li> </ul>"},{"location":"Developing/Dynamic-Config/","title":"Adding new config settings","text":"<p>Adding support for users to update a new config option via the WebUI is now a lot easier for general options. This document shows you how to add a new config option and even section to the WebUI.</p> <p>Config settings are defined in <code>resources/definitions/config_definitions.json</code></p> <p>You should give a little thought to the name of your config setting. For example: a good setting for snmp community, would be <code>snmp.community</code>. The dot notation is path and when the config is hydrated, it is converted to a nested array. If the user is overriding the option in config.php it would use the format <code>$config['snmp']['community']</code></p>"},{"location":"Developing/Dynamic-Config/#translation","title":"Translation","text":"<p>The config definition system inherently supports translation. You must add the English names in the <code>resoures/lang/en/settings.php</code> file (and other languages if you can).</p> <p>To update the javascript translation files, run:</p> <pre><code>./lnms translation:generate\n</code></pre>"},{"location":"Developing/Dynamic-Config/#definition-format","title":"Definition Format","text":"<p>For snmp.community, this is the definition:</p> <pre><code>\"snmp.community\": {\n    \"group\": \"poller\",\n    \"section\": \"snmp\",\n    \"order\": 2,\n    \"type\": \"array\",\n    \"default\": [\n        \"public\"\n    ]\n}\n</code></pre>"},{"location":"Developing/Dynamic-Config/#fields","title":"Fields","text":"<p>All fields are optional. To show in the web ui, group and section are required, order is recommended.</p> <ul> <li><code>type</code>: Defines the type, there are a few predefined types and custom types can be defined and implemented in a vue.js component</li> <li><code>default</code>: the default value for this setting</li> <li><code>options</code>: the options for the select type. An object with {\"value1\": \"display string\", \"value2\": \"display string\"}</li> <li><code>validate</code>: Defines more complex validation than the default simple type check.  Uses Laravel validation syntax.</li> <li><code>group</code>: The web ui tab this is under</li> <li><code>section</code>: A panel grouping settings in the web ui</li> <li><code>order</code>: The order to display this setting within the section</li> </ul>"},{"location":"Developing/Dynamic-Config/#predefined-types","title":"Predefined Types","text":"<ul> <li><code>string</code>: A string</li> <li><code>integer</code>: A number</li> <li><code>boolean</code>: A simple toggle switch</li> <li><code>array</code>: A list of values that can be added, removed, and re-ordered.</li> <li><code>select</code>: A dropdown box with predefined options. Requires the option field.</li> <li><code>email</code>: Will validate the input is the correct format for an email</li> <li><code>password</code>: Will mask the value of the input (but does not keep it fully private)</li> </ul>"},{"location":"Developing/Dynamic-Config/#custom-types","title":"Custom Types","text":"<p>You may set the type field to a custom type and define a Vue.js component to display it to the user.</p> <p>The Vue.js component should be named as \"SettingType\" where type is the custom type entered with the first letter capitalized. Vue.js components exist in the <code>resources/js/components</code> directory.</p> <p>Here is an empty component named SettingType (make sure to rename it).  It pulls in BaseSetting mixin for basic setting code to reuse.  You should review the BaseSetting component.</p> <pre><code>&lt;template&gt;\n    &lt;div&gt;&lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\n    import BaseSetting from \"./BaseSetting\";\n\n    export default {\n        name: \"SettingType\",\n        mixins: [BaseSetting]\n    }\n&lt;/script&gt;\n\n&lt;style scoped&gt;\n\n&lt;/style&gt;\n</code></pre> <p>Using Vue.js is beyond the scope of this document. Documentation can be found at vuejs.org.</p>"},{"location":"Developing/Getting-Started/","title":"Get ready to contribute to LibreNMS","text":"<p>This document is intended to help you get your local environment set up to contribute code to the LibreNMS project.</p>"},{"location":"Developing/Getting-Started/#setting-up-a-development-environment","title":"Setting up a development environment","text":"<p>When starting to develop, it may be tempting to just make changes on your production server, but that will make things harder for you. Taking a little time to set up somewhere to work on code changes can really help.</p> <p>Possible options:</p> <ul> <li>A Linux computer, VM, or container</li> <li>Another directory on your LibreNMS server</li> <li>Windows Subsystem for Linux</li> </ul>"},{"location":"Developing/Getting-Started/#set-up-your-development-git-clone","title":"Set up your development git clone","text":"<ol> <li> <p>Follow the documentation on using git</p> </li> <li> <p>Install development dependencies <code>./scripts/composer_wrapper.php install</code></p> </li> <li> <p>Set variables in <code>.env</code>, including database settings.  Which could be    a local or remote MySQL server including your production DB.</p> </li> </ol> <pre><code>APP_ENV=local\nAPP_DEBUG=true\n...\n</code></pre> <ol> <li> <p>Start a development webserver <code>./lnms serve</code></p> </li> <li> <p>Access the Web UI at http://localhost:8000</p> </li> </ol>"},{"location":"Developing/Getting-Started/#automated-testing","title":"Automated testing","text":"<p>LibreNMS uses continuous integration to test code changes to help reduce bugs.  This also helps guarantee the changes you contribute won't be broken in the future. You can find out more in our Validating Code Documentation</p> <p>The default database connection for automated testing is <code>testing</code>.</p> <p>To override the database parameters for unit tests, configure your <code>.env</code> file accordingly. The defaults (from <code>config/database.php</code>) are:</p> <pre><code>DB_TEST_DRIVER=\"mysql\"   # PDO driver\nDB_TEST_HOST=\"localhost\" # hostname or IP address\nDB_TEST_PORT=\"\"          # port\nDB_TEST_DATABASE=\"librenms_phpunit_78hunjuybybh\" # database\nDB_TEST_USERNAME=\"root\"  # username\nDB_TEST_PASSWORD=\"\"      # password\nDB_TEST_SOCKET=\"\"        # unix socket path\n</code></pre>"},{"location":"Developing/Getting-Started/#polling-debug-output","title":"Polling debug output","text":"<p>You can see detailed info by running your polling code in debug mode by adding a <code>-d</code> flag.</p> <pre><code>./discovery.php -d -h HOSTNAME\nlnms device:poll HOSTNAME -vv\n</code></pre>"},{"location":"Developing/Getting-Started/#inspecting-variables","title":"Inspecting variables","text":"<p>Sometimes you want to find out what a variable contains (such as the data return from an snmpwalk). You can dump one or more variables and halt execution with the dd() function.</p> <pre><code>dd($variable1, $variable2);\n</code></pre>"},{"location":"Developing/Getting-Started/#inspecting-web-pages","title":"Inspecting web pages","text":"<p>Installing the development dependencies and setting APP_DEBUG enables the Laravel Debugbar This will allow you to inspect page generation and errors right in your web browser.</p>"},{"location":"Developing/Getting-Started/#better-code-completion-in-ides-and-editors","title":"Better code completion in IDEs and editors","text":"<p>You can generate some files to improve code completion. (These file are not updated automatically, so you may need to re-run these command periodically)</p> <pre><code>./lnms ide-helper:generate\n./lnms ide-helper:models -N\n</code></pre>"},{"location":"Developing/Getting-Started/#emulating-devices","title":"Emulating devices","text":"<p>You can capture and emulate devices using Snmpsim.  LibreNMS has a set of scripts to make it easier to work with snmprec files. LibreNMS Snmpsim helpers</p>"},{"location":"Developing/Getting-Started/#laravel-documentation","title":"Laravel documentation","text":"<p>You can find a lot of how LibreNMS works by following the Laravel Documentation</p>"},{"location":"Developing/Merging-Pull-Requests/","title":"Merging Pull Requests","text":""},{"location":"Developing/Merging-Pull-Requests/#github","title":"GitHub","text":"<p>We will now build the monthly change log from our GitHub commits. When merging a commit, please  ensure you:</p> <ul> <li>Click the <code>Merge pull request</code> button</li> <li>Give the merge a descriptive but short title</li> <li>For the commit message prepend it with one of the following tags for   the pull request to appear in the changelog:</li> <li>devices: or newdevice: For new device support.</li> <li>feature: or feat: To indicate this is a new or updated feature</li> <li>webui: or web: To indicate this is an update to the WebUI</li> <li>fix: or bugfix: To show this is a bug fix.</li> <li>refactoring: or refactor: When the changes are refactoring a large     portion of code</li> <li>You can reference an issue number with <code>#xyz</code>, i.e <code>#1234</code></li> <li>Use the <code>Confirm squash and merge</code> button to merge.</li> </ul>"},{"location":"Developing/Merging-Pull-Requests/#example-commits","title":"Example commits","text":""},{"location":"Developing/Merging-Pull-Requests/#feature","title":"Feature","text":"<p>feature: Added new availability map #4401</p>"},{"location":"Developing/Merging-Pull-Requests/#new-device","title":"New device","text":"<p>newdevice: Added support for Cisco ASA #4402</p>"},{"location":"Developing/SNMP-Traps/","title":"Creating snmp trap handlers","text":"<p>You must have a working snmptrapd. See SNMP TRAP HANDLER</p> <p>Make sure the MIB is loaded from the trap you are adding. Edit <code>/etc/systemd/system/snmptrapd.service.d/mibs.conf</code> to add it then restart snmptrapd.</p> <p><code>MIBDIRS</code> option is not recursive, so you need to specify each directory individually.</p> <p>Create a new class in <code>LibreNMS\\Snmptrap\\Handlers</code> that implements the <code>LibreNMS\\Interfaces\\SnmptrapHandler</code> interface. For example:</p> <pre><code>&lt;?php\n/**\n * ColdBoot.php\n *\n * Handles the SNMPv2-MIB::coldStart trap\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.\n *\n * @package    LibreNMS\n * @link       https://www.librenms.org\n */\n\nnamespace LibreNMS\\Snmptrap\\Handlers;\n\nuse App\\Models\\Device;\nuse LibreNMS\\Enum\\Severity;\nuse LibreNMS\\Interfaces\\SnmptrapHandler;\nuse LibreNMS\\Snmptrap\\Trap;\n\nclass ColdBoot implements SnmptrapHandler\n{\n    /**\n     * Handle snmptrap.\n     * Data is pre-parsed and delivered as a Trap.\n     *\n     * @param Device $device\n     * @param Trap $trap\n     * @return void\n     */\n    public function handle(Device $device, Trap $trap)\n    {\n        $trap-&gt;log('SNMP Trap: Device ' . $device-&gt;displayName() . ' cold booted', $device-&gt;device_id, 'reboot', Severity::Warning);\n    }\n}\n</code></pre> <p>where number on the end means color of the eventlog:</p> <pre><code>Severity::Ok = green\nSeverity::Info = cyan\nSeverity::Notice = blue\nSeverity::Warning = yellow\nSeverity::Error = red\n</code></pre> <p>Register the mapping in the <code>config/snmptraps.php</code> file. Make sure to use the full trap OID and correct class.</p> <pre><code>'SNMPv2-MIB::coldStart' =&gt; \\LibreNMS\\Snmptrap\\Handlers\\ColdBoot::class,\n</code></pre> <p>The handle function inside your new class will receive a LibreNMS/Snmptrap/Trap object containing the parsed trap.  It is common to update the database and create event log entries within the handle function.</p>"},{"location":"Developing/SNMP-Traps/#getting-information-from-the-trap","title":"Getting information from the Trap","text":""},{"location":"Developing/SNMP-Traps/#source-information","title":"Source information","text":"<pre><code>$trap-&gt;getDevice();   // gets Device model for the device associated with this trap\n$trap-&gt;ip;            // gets source IP of this trap\n$trap-&gt;getTrapOid();  // returns the string you registered your class with\n</code></pre>"},{"location":"Developing/SNMP-Traps/#retrieving-data-from-the-trap","title":"Retrieving data from the Trap","text":"<pre><code>$trap-&gt;getOidData('IF-MIB::ifDescr.114');\n</code></pre> <p>getOidData() requires the full name including any additional index. You can use these functions to search the OID keys.</p> <pre><code>$trap-&gt;findOid('ifDescr');  // returns the first oid key that contains the string\n$trap-&gt;findOids('ifDescr'); // returns all oid keys containing the string\n</code></pre>"},{"location":"Developing/SNMP-Traps/#advanced","title":"Advanced","text":"<p>If the above isn't adequate, you can get the entire trap text:</p> <pre><code>$trap-&gt;raw;\n</code></pre>"},{"location":"Developing/SNMP-Traps/#tests","title":"Tests","text":"<p>Submitting new traps requires them to be fully tested. You can find many examples in the <code>tests/Feature/SnmpTraps/</code> directory.</p> <p>Here is a basic example of a test that trap handler only creates a log message. If your trap modifies the database, you should also test that it does so.</p> <pre><code>&lt;?php\n\nnamespace LibreNMS\\Tests\\Feature\\SnmpTraps;\n\nclass ColdStratTest extends SnmpTrapTestCase\n{\n    public function testColdStart(): void\n    {\n        $this-&gt;assertTrapLogsMessage(rawTrap: &lt;&lt;&lt;'TRAP'\n{{ hostname }}\nUDP: [{{ ip }}]:44298-&gt;[192.168.5.5]:162\nDISMAN-EVENT-MIB::sysUpTimeInstance 0:0:1:12.7\nSNMPv2-MIB::snmpTrapOID.0 SNMPv2-MIB::coldStart\nTRAP,\n            log: 'SNMP Trap: Device {{ hostname }} cold booted', // The log message sent\n            failureMessage: 'Failed to handle SNMPv2-MIB::coldStart', // an informative message to let user know what failed\n            args: [4, 'reboot'], // the additional arguments to the log method\n        );\n    }\n}\n</code></pre>"},{"location":"Developing/Sensor-State-Support/","title":"Sensor State Support","text":""},{"location":"Developing/Sensor-State-Support/#introduction","title":"Introduction","text":"<p>This section will explain how to implement support for sensor state.  It will also cover the basic concepts of sensor state monitoring.</p> <p>LibreNMS simplifies sensor state monitoring by translating raw values  into understandable generic states like \"OK\", \"Warning\", \"Critical\", and  \"Unknown\", enabling consistent visualization and easier analysis.</p>"},{"location":"Developing/Sensor-State-Support/#key-concepts","title":"Key Concepts","text":"<p>For sensor state monitoring, we have 4 DB tables we need to concentrate about.  These tables act as a bridge between the raw information provided by each sensor  and the standardized representation (generic state) that LibreNMS uses  for visualization and alert generation.</p>"},{"location":"Developing/Sensor-State-Support/#table-sensors","title":"Table: sensors","text":"<p>Each time a sensor needs to be polled, the system needs to know which sensor (regardless of its type) is it that it needs to poll and its description,  at what oid is this sensor located, what class the sensor is, etc.</p>"},{"location":"Developing/Sensor-State-Support/#table-sensors_to_state_indexes","title":"Table: sensors_to_state_indexes","text":"<p>Is as you might have guessed, where the sensor_id is mapped  to a state_index_id.</p>"},{"location":"Developing/Sensor-State-Support/#table-state_indexes","title":"Table: state_indexes","text":"<p>Is where we keep track of the state information we monitor.</p>"},{"location":"Developing/Sensor-State-Support/#table-state_translations","title":"Table: state_translations","text":"<p>Is where we map the possible returned state sensor values to a generic LibreNMS value, in order to make displaying and alerting more generic. We also map these values to the actual state sensor(state_index) where these values are actually returned from.</p> <p>The LibreNMS generic states are derived from Nagios:</p> <pre><code>0 = OK\n1 = Warning\n2 = Critical\n3 = Unknown\n</code></pre> <p>### Generic States translations</p> <p>LibreNMS offers flexibility in handling sensor states, which can be represented  as either strings or numbers via SNMP. </p> <p>If the sensor state input is a string (i.e. \"ONLINE\")  librenms will use the 'descr' field and finally translate it to the desired  generic state (0, 1, 2 or 3) - { value: 4, descr: online, graph: 1, generic: 0 }</p> <p>If the sensor state input is a number (i.e. \"4\" representing the offline state)  librenms will use the 'value' field and finally translate it to the desired  generic state (0, 1, 2 or 3). - { value: 0, descr: offline, graph: 1, generic: 2 }</p> <p>Note</p> <p>Here the descr field is used as a label to visualize the value on screen,  but not as an input to translate to a generic state because the state input is a number.</p>"},{"location":"Developing/Sensor-State-Support/#yaml-example","title":"YAML Example","text":"<p>For YAML based state discovery:</p> <pre><code>mib: NETBOTZV2-MIB\nmodules:\n    sensors:\n        state:\n            data:\n                -\n                    oid: dryContactSensorTable\n                    value: dryContactSensorValue\n                    num_oid: '.1.3.6.1.4.1.5528.100.4.2.1.1.2.{{ $index }}'\n                    descr: dryContactSensorLabel\n                    group: Contact Sensors\n                    index: 'dryContactSensor.{{ $index }}'\n                    state_name: dryContactSensor\n                    states:\n                        - { value: -1, generic: 3, graph: 0, descr: 'null' }\n                        - { value:  0, generic: 0, graph: 0, descr: open }\n                        - { value:  1, generic: 2, graph: 0, descr: closed }\n                -\n                    oid: doorSwitchSensorTable\n                    value: doorSwitchSensorValue\n                    num_oid: '.1.3.6.1.4.1.5528.100.4.2.2.1.2.{{ $index }}'\n                    descr: doorSwitchSensorLabel\n                    group: Switch Sensors\n                    index: 'doorSwitchSensor.{{ $index }}'\n                    state_name: doorSwitchSensor\n                    states:\n                        - { value: -1, generic: 3, graph: 0, descr: 'null' }\n                        - { value:  0, generic: 0, graph: 0, descr: open }\n                        - { value:  1, generic: 2, graph: 0, descr: closed }\n                -\n                    oid: cameraMotionSensorTable\n                    value: cameraMotionSensorValue\n                    num_oid: '.1.3.6.1.4.1.5528.100.4.2.3.1.2.{{ $index }}'\n                    descr: cameraMotionSensorLabel\n                    group: Camera Motion Sensors\n                    index: 'cameraMotionSensor.{{ $index }}'\n                    state_name: cameraMotionSensor\n                    states:\n                        - { value: -1, generic: 3, graph: 0, descr: 'null' }\n                        - { value:  0, generic: 0, graph: 0, descr: noMotion }\n                        - { value:  1, generic: 2, graph: 0, descr: motionDetected }\n                -\n                    oid: otherStateSensorTable\n                    value: otherStateSensorErrorStatus\n                    num_oid: '.1.3.6.1.4.1.5528.100.4.2.10.1.3.{{ $index }}'\n                    descr: otherStateSensorLabel\n                    index: '{{ $index }}'\n                    state_name: otherStateSensorErrorStatus\n                    states:\n                        - { value: 0, generic: 0, graph: 0, descr: normal }\n                        - { value: 1, generic: 1, graph: 0, descr: info }\n                        - { value: 2, generic: 1, graph: 0, descr: warning }\n                        - { value: 3, generic: 2, graph: 0, descr: error }\n                        - { value: 4, generic: 2, graph: 0, descr: critical }\n                        - { value: 5, generic: 2, graph: 0, descr: failure }\n</code></pre>"},{"location":"Developing/Sensor-State-Support/#advanced-example","title":"Advanced Example","text":"<p>For advanced state discovery:</p> <p>This example will be based on a Cisco power supply sensor and is all it takes to have sensor state support for Cisco power supplies in Cisco switches. The file should be located in  /includes/discovery/sensors/state/cisco.inc.php.</p> <pre><code>&lt;?php\n\n$oids = snmpwalk_group($device, 'ciscoEnvMonSupplyStatusTable', 'CISCO-ENVMON-MIB');\n\nif (!empty($oids)) {\n    //Create State Index\n    $state_name = 'ciscoEnvMonSupplyState';\n    $states = [\n        ['value' =&gt; 1, 'generic' =&gt; 0, 'graph' =&gt; 0, 'descr' =&gt; 'normal'],\n        ['value' =&gt; 2, 'generic' =&gt; 1, 'graph' =&gt; 0, 'descr' =&gt; 'warning'],\n        ['value' =&gt; 3, 'generic' =&gt; 2, 'graph' =&gt; 0, 'descr' =&gt; 'critical'],\n        ['value' =&gt; 4, 'generic' =&gt; 3, 'graph' =&gt; 0, 'descr' =&gt; 'shutdown'],\n        ['value' =&gt; 5, 'generic' =&gt; 3, 'graph' =&gt; 0, 'descr' =&gt; 'notPresent'],\n        ['value' =&gt; 6, 'generic' =&gt; 2, 'graph' =&gt; 0, 'descr' =&gt; 'notFunctioning'],\n    ];\n    create_state_index($state_name, $states);\n\n    $num_oid = '.1.3.6.1.4.1.9.9.13.1.5.1.3.';\n    foreach ($oids as $index =&gt; $entry) {\n        //Discover Sensors\n        discover_sensor(null, 'state', $device, $num_oid.$index, $index, $state_name, $entry['ciscoEnvMonSupplyStatusDescr'], '1', '1', null, null, null, null, $entry['ciscoEnvMonSupplyState'], 'snmp', $index);\n    }\n}\n</code></pre>"},{"location":"Developing/Support-New-OS/","title":"Intro","text":"<p>This document is broken down into the relevant sections depending on what support you are adding. During all of these examples we will be using the OS of <code>pulse</code> as the example OS we will add.</p> <ul> <li>Adding the initial detection.</li> <li>Adding Memory and CPU information.</li> <li>Adding Health / Sensor information.</li> <li>Adding Wireless Sensor information.</li> <li>Adding custom graphs.</li> <li>Adding Unit tests (required).</li> <li>Optional Settings</li> </ul> <p>We currently have a script in pre-beta stages that can help speed up the process of deploying a new OS. It has support for add sensors in a basic form (except state sensors).</p> <p>In this example, we will add a new OS called test-os using the device ID 101 that has already been added. It will be of the type network and belongs to the vendor, Cisco:</p> <p><code>./scripts/new-os.php -h 101 -o test-os -t network -v cisco</code></p> <p>The process will then step you through the process with some more questions. Please be warned, this is  currently pre-beta and may cause some issues. Please let us know of any on Discord.</p>"},{"location":"Developing/Using-Git/","title":"Using Git","text":"<p>Git can have a bit of a steep learning curve, stick with it as it is worth learning the basics2 at least.</p> <p>If you want to help develop LibreNMS and haven't really used Git before then this quick primer will help you get started.</p> <p>Some assumptions:</p> <ul> <li>Work is being done on a Linux box.</li> <li>LibreNMS is to be installed in /opt/librenms</li> <li>You have git installed.</li> <li>You have a GitHub Account.</li> <li>You are using ssh to connect to GitHub (If not, replace   git@github.com:/yourusername/librenms.git with https://github.com/yourusername/librenms.git.</li> </ul> <p>** Replace yourusername with your GitHub username. **</p>"},{"location":"Developing/Using-Git/#fork-librenms-repo","title":"Fork LibreNMS repo","text":"<p>You do this directly within GitHub, click the 'Fork' button near the top right.</p> <p>If you are associated with multiple organisations within GitHub then you might need to select which account you want to push the fork to.</p>"},{"location":"Developing/Using-Git/#prepare-your-git-environment","title":"Prepare your git environment","text":"<p>These are the defaults that are recommended.</p> <pre><code>git config branch.autosetupmerge true\ngit config --global user.name \"John Doe\"\ngit config --global user.email johndoe@example.com\n</code></pre>"},{"location":"Developing/Using-Git/#clone-the-repo","title":"Clone the repo","text":"<p>Ok so now that you have forked the repo, you now need to clone it to your local install where you can then make the changes you need and submit them back.</p> <pre><code>cd /opt/\ngit clone git@github.com:/yourusername/librenms.git\n</code></pre>"},{"location":"Developing/Using-Git/#add-upstream-repo","title":"Add Upstream repo","text":"<p>To be able to pull in changes from the master LibreNMS repo you need to have it setup on your system.</p> <pre><code>git remote add upstream https://github.com/librenms/librenms.git\n</code></pre> <p>Now you have two configured remotes:</p> <ul> <li>origin: This is your repository, you can push and pull changes here.</li> <li>upstream: This is the main LibreNMS repository and you can only pull changes.</li> </ul>"},{"location":"Developing/Using-Git/#workflow-guide","title":"Workflow guide","text":"<p>As you become more familiar you may find a better workflow that fits your needs, until then this should be a safe workflow for you to follow.</p> <p>Before you start work on a new branch / feature. Make sure you are up to date.</p> <pre><code>cd /opt/librenms\ngit checkout master\ngit pull upstream master\ngit push origin master\n</code></pre> <p>At this stage it's worth pointing out that we have some standard checks that are performed when you submit a pull request, you can run these checks yourself to be sure no issues are present in your  pull request.</p> <p>Now, create a new branch to do you work on. It's important that you do this as you are then able to work on more than one feature at a time and submit them as pull requests individually. If you did all your work in the master branch then it gets a bit messy!</p> <p>You need to give your branch a name. If an issue is open (or closed on GitHub) then you can use that, in this example if the issue number is 123 then we will use issue-123. If a post exists on the community forum then you can use the post id like community-123. You're also welcome to use any arbitrary name for your branch but try and make it relevant to what the branch is.</p> <pre><code>git checkout -b issue-123\n</code></pre> <p>Now, code away. Make the changes you need, test, change and test again :) When you are ready to submit the updates as a pull request then commit away.</p> <pre><code>git add path/to/new/files/or/folders\ngit commit -a -m 'Added feature to do X, Y and Z'\ngit push origin issue-123\n</code></pre> <p>If you need to rebase against master then you can do this with:</p> <pre><code>git pull upstream master\ngit push origin issue-123\n</code></pre> <p>If after do this you get some merge conflicts then you need to resolve these before carrying on.</p> <p>Please try to squash all commits into one, this isn't essential as we can do this when we merge but it would be helpful to do this before you submit your pull request.</p> <p>Now you will be ready to submit a pull request from within GitHub. To do this, go to your GitHub page for the LibreNMS repo. Now select the branch you have just been working on (issue-123) from the drop down to the left and then click 'Pull Request'. Fill in the details to describe the work you have done and click 'Create pull request'.</p> <p>Thanks for your first pull request :)</p> <p>Ok, that should get you started on the contributing path. If you have any other questions then stop by our Discord Server</p>"},{"location":"Developing/Using-Git/#hints-and-tips","title":"Hints and tips","text":"<p>Undo last commit</p> <p><code>git reset --soft 'HEAD^'</code></p> <p>Remove specific commit</p> <p><code>git revert &lt;HASH&gt;</code></p> <p>Restore deleted file</p> <p><code>git checkout $(git rev-list -n 1 HEAD -- \"$file\")^ -- \"$file\"</code></p> <p>Merge last two commits</p> <p><code>git rebase --interactive HEAD~2</code></p> <p>In the text file that opens, change the last commit to squash from pick then save an exit.</p> <p>For more tips take a look at Oh shit, git!</p>"},{"location":"Developing/Using-SnmpQuery/","title":"Fetching SNMP Data","text":""},{"location":"Developing/Using-SnmpQuery/#snmpquery","title":"SnmpQuery","text":"<p>To fetch and manipulate snmp data in LibreNMS, use SnmpQuery. Oids can be specified several ways, the preferred way is full textual such as IF-MIB::ifIndex. Numeric and short are also supported.</p>"},{"location":"Developing/Using-SnmpQuery/#actions","title":"Actions","text":"<p>Once an action is reached, the query will be executed and return an SnmpResponse holding the returned data. SnmpResponse has many options for manipulating and indexing the returned data.</p> <p>There are 4 primary actions you can execute with SnmpQuery.</p> <ul> <li>get - fetch one or more full oids from the device</li> <li>walk - walk an oid most useful with tables or columns from tables</li> <li>next - get the next oid after the specified oid</li> <li>translate - translate an oid between textual and numeric (returns a string)</li> </ul>"},{"location":"Developing/Using-SnmpQuery/#fetch-options","title":"Fetch Options","text":"<ul> <li>numeric - Output all OIDs numerically</li> <li>numericIndex - Output all OIDs numerically</li> <li>abortOnFailure - When walking multiple OIDs, stop if one fails</li> <li>context - Set a context for the snmp query</li> <li>mibDir - Set an additional MIB directory</li> <li>mibs -  Set MIBs to use for this query</li> <li>allowUnordered - Do not error on out of order indexes (allows infinite loops)</li> <li>device - specify a different device to query (SnmpQuery always queries the active device)</li> </ul>"},{"location":"Developing/Using-SnmpQuery/#snmpresponse","title":"SnmpResponse","text":""},{"location":"Developing/Using-SnmpQuery/#value","title":"value","text":"<p>If the response contained a single value, this will return just the value. If there was more than one value, you can specify an oid to fetch from the response.</p>"},{"location":"Developing/Using-SnmpQuery/#examples","title":"Examples","text":"<p>A single value from a single get</p> <pre><code>SnmpQuery::get('SNMPv2-MIB::sysName.0')-&gt;value();\n\"server\"\n</code></pre> <p>The first value to match an oid</p> <pre><code>SnmpQuery::walk('IF-MIB::ifTable')-&gt;value('IF-MIB::ifIndex');\n\"1\"\n</code></pre> <p>The value for the oid at the given index</p> <pre><code>SnmpQuery::walk('IF-MIB::ifTable')-&gt;value('IF-MIB::ifDescr.2');\n\"enp7s0\"\n</code></pre>"},{"location":"Developing/Using-SnmpQuery/#values","title":"values","text":"<p>Fetch all values in an array keyed by the oid as returned by snmp.</p>"},{"location":"Developing/Using-SnmpQuery/#examples_1","title":"Examples","text":"<p>Walk a single column from ifTable (You could also fetch all of ifTable, but that would be large) Note: tables will use the [] syntax for indexes. Everything else will use dot syntax.</p> <pre><code>SnmpQuery::walk('IF-MIB::ifName')-&gt;values();\n[\n    \"IF-MIB::ifName[1]\" =&gt; \"lo\",\n    \"IF-MIB::ifName[2]\" =&gt; \"enp7s0\",\n]\n</code></pre> <p>Get two oids and show both</p> <pre><code>SnmpQuery::get(['SNMPv2-MIB::sysObjectID.0', 'SNMPv2-MIB::sysDescr.0'])-&gt;values();\n[\n    \"SNMPv2-MIB::sysObjectID.0\" =&gt; \"NET-SNMP-MIB::netSnmpAgentOIDs.10\",\n    \"SNMPv2-MIB::sysDescr.0\" =&gt; \"Linux 5.15.0-59-generic #62-Ubuntu SMP PREEMPT_DYNAMIC Tue Nov 29 16:25:29 UTC 2022 x86_64\",\n]\n</code></pre>"},{"location":"Developing/Using-SnmpQuery/#valuesbyindex","title":"valuesByIndex","text":"<p>Group the values by the full index. </p>"},{"location":"Developing/Using-SnmpQuery/#examples_2","title":"Examples","text":"<pre><code>SnmpQuery::enumStrings()-&gt;walk('IP-MIB::ipAddressTable')-&gt;valuesByIndex()\n[\n    \"ipv4.\"10.14.32.4\"\" =&gt; [\n    \"IP-MIB::ipAddressIfIndex\" =&gt; \"3\",\n    \"IP-MIB::ipAddressType\" =&gt; \"unicast\",\n    \"IP-MIB::ipAddressPrefix\" =&gt; \"IP-MIB::ipAddressPrefixOrigin[3][ipv4][\"10.14.32.4\"][32]\",\n    ...\n],\n    \"ipv4.\"127.0.0.1\"\" =&gt; [\n    \"IP-MIB::ipAddressIfIndex\" =&gt; \"1\",\n    \"IP-MIB::ipAddressType\" =&gt; \"unicast\",\n    \"IP-MIB::ipAddressPrefix\" =&gt; \"IP-MIB::ipAddressPrefixOrigin[1][ipv4][\"127.0.0.0\"][8]\",\n    ...\n]\n</code></pre>"},{"location":"Developing/Using-SnmpQuery/#table","title":"table","text":"<p>Make a multi dimensional array with an index value as the key to each level. You can specify a depth to group the values at to make the data easier to work with, the default is 0.</p>"},{"location":"Developing/Using-SnmpQuery/#examples_3","title":"Examples","text":"<p>Group by the default depth 0</p> <pre><code>SnmpQuery::walk('IP-MIB::ipAddressTable')-&gt;table()\n[\n    \"IP-MIB::ipAddressIfIndex\" =&gt; [\n        \"ipv4\" =&gt; [\n            \"10.14.32.4\" =&gt; \"3\",\n            \"127.0.0.1\" =&gt; \"1\",\n        ],\n        \"ipv6\" =&gt; [\n            \"00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:01\" =&gt; \"1\",\n            \"fd:7a:11:5c:a1:e0:00:00:00:00:00:00:9f:e0:6f:72\" =&gt; \"3\",\n            \"fe:80:00:00:00:00:00:00:ae:5a:17:da:13:74:3d:e0\" =&gt; \"3\",\n            \"fe:80:00:00:00:00:00:00:c2:eb:0b:fe:10:21:67:e3\" =&gt; \"2\",\n        ],\n    ],\n    \"IP-MIB::ipAddressType\" =&gt; [\n...\n</code></pre> <p>Group by 2 (which matches the index count for this table)</p> <pre><code>SnmpQuery::enumStrings()-&gt;walk('IP-MIB::ipAddressTable')-&gt;table(2)\n[\n    \"ipv4\" =&gt; [\n        \"10.14.32.4\" =&gt; [\n            \"IP-MIB::ipAddressIfIndex\" =&gt; \"3\",\n            \"IP-MIB::ipAddressType\" =&gt; \"unicast\",\n            \"IP-MIB::ipAddressPrefix\" =&gt; \"IP-MIB::ipAddressPrefixOrigin[3][ipv4][\"10.14.32.4\"][32]\",\n            ...\n        ],\n        \"127.0.0.1\" =&gt; [\n            \"IP-MIB::ipAddressIfIndex\" =&gt; \"1\",\n            \"IP-MIB::ipAddressType\" =&gt; \"unicast\",\n            \"IP-MIB::ipAddressPrefix\" =&gt; \"IP-MIB::ipAddressPrefixOrigin[1][ipv4][\"127.0.0.0\"][8]\",\n            ...\n        ],\n...\n</code></pre>"},{"location":"Developing/Using-SnmpQuery/#maptable","title":"mapTable","text":"<p>Map an snmp table with callback. Variables passed to the callback will be an array of row values followed by each individual index.</p> <p>This is the best method when you want to return a collection of data that matches the rows in an SNMP table.</p>"},{"location":"Developing/Using-SnmpQuery/#examples_4","title":"Examples","text":"<p>Because this example uses dd() (dump and die), only the first entry will be printed.</p> <pre><code>SnmpQuery::enumStrings()-&gt;walk('IP-MIB::ipAddressTable')-&gt;mapTable(function ($data, $ipAddressAddrType, $ipAddressAddr) {\n    dd(get_defined_vars());\n    // actual closure should return something, like:\n    return $$ipAddressAddrType == 'ipv4' ? new Ipv4Address($ipAddressAddr, $data) : new Ipv6Address($ipAddressAddr, $data);\n});\n[\n    \"data\" =&gt; [\n        \"IP-MIB::ipAddressIfIndex\" =&gt; \"3\"\n        \"IP-MIB::ipAddressType\" =&gt; \"unicast\"\n        \"IP-MIB::ipAddressPrefix\" =&gt; \"IP-MIB::ipAddressPrefixOrigin[3][ipv4][\"10.14.32.4\"][32]\"\n        \"IP-MIB::ipAddressOrigin\" =&gt; \"manual\"\n        \"IP-MIB::ipAddressStatus\" =&gt; \"preferred\"\n        \"IP-MIB::ipAddressCreated\" =&gt; \"3006\"\n        \"IP-MIB::ipAddressLastChanged\" =&gt; \"3006\"\n        \"IP-MIB::ipAddressRowStatus\" =&gt; \"active\"\n        \"IP-MIB::ipAddressStorageType\" =&gt; \"volatile\"\n    ]\n    \"ipAddressAddrType\" =&gt; \"ipv4\"\n    \"ipAddressAddr\" =&gt; \"\"10.14.32.4\"\"\n]\n</code></pre>"},{"location":"Developing/Using-SnmpQuery/#groupbyindex","title":"groupByIndex","text":"<p>Fetch values grouped by the index.  The number of index fields is not detected, it must be specified, the default is 1.  Mostly used for numeric oids when the index cannot be detected.</p>"},{"location":"Developing/Using-SnmpQuery/#examples_5","title":"Examples","text":"<pre><code>SnmpQuery::numeric()-&gt;walk('IF-MIB::ifTable')-&gt;groupByIndex(1)\n[\n    1 =&gt; [\n        \".1.3.6.1.2.1.2.2.1.1.1\" =&gt; \"1\",\n        \".1.3.6.1.2.1.2.2.1.2.1\" =&gt; \"lo\",\n        \".1.3.6.1.2.1.2.2.1.3.1\" =&gt; \"24\",\n        \".1.3.6.1.2.1.2.2.1.4.1\" =&gt; \"65536\",\n        \".1.3.6.1.2.1.2.2.1.5.1\" =&gt; \"10000000\",\n        \".1.3.6.1.2.1.2.2.1.6.1\" =&gt; \"\",\n        \".1.3.6.1.2.1.2.2.1.7.1\" =&gt; \"1\",\n        ...\n    ],\n    2 =&gt; [\n    \".1.3.6.1.2.1.2.2.1.1.2\" =&gt; \"2\",\n    \".1.3.6.1.2.1.2.2.1.2.2\" =&gt; \"enp7s0\",\n    \".1.3.6.1.2.1.2.2.1.3.2\" =&gt; \"6\",\n    \".1.3.6.1.2.1.2.2.1.4.2\" =&gt; \"1500\",\n...\n</code></pre>"},{"location":"Developing/Using-SnmpQuery/#pluck","title":"pluck","text":"<p>Fetch an index to key array of the data.  You can specify an oid to get one column out of an SNMP table.</p>"},{"location":"Developing/Using-SnmpQuery/#exmples","title":"Exmples","text":"<p>In this example, the table IF-MIB::ifTable is indexed by ifIndex, so when we walk the ifName column and call pluck, we get a nice mapping of ifIndex to ifName</p> <pre><code>SnmpQuery::walk('IF-MIB::ifName')-&gt;pluck()\n[\n    1 =&gt; \"lo\",\n    2 =&gt; \"enp7s0\",\n]\n</code></pre>"},{"location":"Developing/Using-SnmpQuery/#handling-errors","title":"Handling errors","text":"<p>Functions for checking the results of the SNMP query.</p> <ul> <li>isValid - check for issues such as aborted SNMP walks (such as network disconnect) and other things.</li> <li>getExitCode - will get the exit code of the snmp process</li> <li>getErrorMessage - will return the stderr output from the process.</li> </ul>"},{"location":"Developing/Validating-Code/","title":"Validating Code","text":""},{"location":"Developing/Validating-Code/#validating-code","title":"Validating Code","text":"<p>As part of the pull request process with GitHub we run some automated build tests to ensure that  the code is error free, standards compliant and our test suite builds successfully.</p> <p>Rather than submit a pull request and wait for the results, you can run these checks yourself to ensure  a more seamless merge.</p> <p>All of these commands should be run from within the librenms directory and can be run as the librenms user  unless otherwise noted.</p> <p>Install composer (you can skip this if composer is already installed).</p> <p><code>curl -sS https://getcomposer.org/installer | php</code></p> <p>Composer will now be installed into /opt/librenms/composer.phar.</p> <p>Now install the dependencies we require:</p> <p><code>./composer.phar install</code></p> <p>Once composer is installed you can now run the code validation script:</p> <p><code>./lnms dev:check</code></p> <p>If you see <code>Tests ok, submit away :)</code> then all is well. If you see other output then it should contain  what you need to resolve the issues and re-test.</p>"},{"location":"Developing/Validating-Code/#git-hooks","title":"Git Hooks","text":"<p>Git has a hook system which you can use to trigger checks at various stages. Utilising the <code>./lnms dev:check</code>  you can make this part of your commit process.</p> <p>Add <code>./lnms dev:check</code> to your <code>.git/hooks/pre-commit</code>:</p> <pre><code>echo \"/opt/librenms/lnms dev:check\" &gt;&gt; /opt/librenms/.git/hooks/pre-commit\nchmod +x /opt/librenms/.git/hooks/pre-commit\n</code></pre>"},{"location":"Developing/os/Custom-Graphs/","title":"Custom Graphs","text":"<p>First we define our graphs in <code>resources/definitions/config_definitions.json</code> to share our work and contribute in the development of LibreNMS. :-)</p> <pre><code>        \"graph_types.device.pulse_users\": {\n            \"default\": {\n                \"section\": \"firewall\",\n                \"order\": 0,\n                \"descr\": \"Active Users\"\n            },\n            \"type\": \"graph\"\n        },\n        \"graph_types.device.pulse_sessions\": {\n            \"default\": {\n                \"section\": \"firewall\",\n                \"order\": 0,\n                \"descr\": \"Active Sessions\"\n            },\n            \"type\": \"graph\"\n        },\n</code></pre> <p>Alternatively, place in <code>config.php</code> if you don't plan to contribute.</p> <pre><code>// Pulse Secure Graphs\n$config['graph_types']['device']['pulse_users'] = ['section' =&gt; 'firewall', 'order' =&gt; 0, 'descr' =&gt; 'Active Users'];\n$config['graph_types']['device']['pulse_sessions'] = ['section' =&gt; 'firewall', 'order' =&gt; 0, 'descr' =&gt; 'Active Sessions'];\n</code></pre>"},{"location":"Developing/os/Custom-Graphs/#polling-os","title":"Polling OS","text":"<p>OS polling is not necessarily where custom polling should be done, please speak to one of the core devs in Discord for guidance.</p> <p>Let's update our example file to add additional polling:</p> <pre><code>LibreNMS/OS/Pulse.php\n</code></pre> <p>We declare two specific graphs for users and sessions numbers. Theses two graphs will be displayed on the firewall section of the graphs tab as it was written in the definition include file.</p> <pre><code>&lt;?php\n\nnamespace LibreNMS\\OS;\n\nuse LibreNMS\\Interfaces\\Data\\DataStorageInterface;\nuse LibreNMS\\Interfaces\\Polling\\OSPolling;\nuse LibreNMS\\RRD\\RrdDefinition;\nuse SnmpQuery;\n\nclass Pulse extends \\LibreNMS\\OS implements OSPolling\n{\n    public function pollOS(DataStorageInterface $datastore): void\n    {\n        $users = SnmpQuery::get('PULSESECURE-PSG-MIB::iveConcurrentUsers.0')-&gt;value();\n\n        if (is_numeric($users)) {\n            $rrd_def = RrdDefinition::make()-&gt;addDataset('users', 'GAUGE', 0);\n\n            $fields = [\n                'users' =&gt; $users,\n            ];\n\n            $tags = compact('rrd_def');\n            $datastore-&gt;put($this-&gt;getDeviceArray(), 'pulse_users', $tags, $fields);\n            $this-&gt;enableGraph('pulse_users');\n        }\n    }\n}\n</code></pre>"},{"location":"Developing/os/Custom-Graphs/#displaying","title":"Displaying","text":"<p>The specific graphs are not displayed automatically so we need to write the following PHP code:</p> <p>Pulse Users</p> <pre><code>includes/html/graphs/device/pulse_users.inc.php\n</code></pre> <pre><code>&lt;?php\n\n$rrd_filename = Rrd::name($device['hostname'], 'pulse_users');\n\nrequire 'includes/html/graphs/common.inc.php';\n\n$ds = 'users';\n\n$colour_area = '9999cc';\n$colour_line = '0000cc';\n\n$colour_area_max = '9999cc';\n\n$graph_max = 1;\n\n$unit_text = 'Users';\n\nrequire 'includes/html/graphs/generic_simplex.inc.php';\n</code></pre> <p>That should be it, after data has started to be collected graph should appear in the WebUI.</p>"},{"location":"Developing/os/Health-Information/","title":"Health Information","text":""},{"location":"Developing/os/Health-Information/#sensors","title":"Sensors","text":"<p>This document will guide you through adding health / sensor information for your new device.</p> <p>Currently, we have support for the following health metrics along with the values we expect to see the data in:</p> Class Measurement airflow cfm ber ratio charge % chromatic_dispersion ps/nm cooling W count # current A dbm dBm delay s eer eer fanspeed rpm frequency Hz humidity % load % loss % power W power_consumed kWh power_factor ratio pressure kPa quality_factor dB runtime Min signal dBm snr SNR state # temperature C tv_signal dBmV bitrate bps voltage V waterflow l/m percent %"},{"location":"Developing/os/Health-Information/#simple-health-discovery","title":"Simple health discovery","text":"<p>We have support for defining health / sensor discovery using YAML files so that you don't need to know how to write PHP.</p> <p>Please note that DISPLAY-HINTS are disabled so ensure you use the correct divisor / multiplier if applicable.</p> <p>All yaml files are located in <code>resources/definitions/os_discovery/$os.yaml</code>. Defining the information here is not always possible and is heavily reliant on vendors being sensible with the MIBs they generate. Only snmp walks are supported, and you must provide a sane table that can be traversed and contains all the data you need. We will use netbotz as an example here.</p> <p><code>resources/definitions/os_discovery/netbotz.yaml</code></p> <pre><code>mib: NETBOTZV2-MIB\nmodules:\n    sensors:\n        airflow:\n            options:\n                skip_value_lt: 0\n            data:\n                -\n                    oid: airFlowSensorTable\n                    value: airFlowSensorValue\n                    divisor: 10\n                    num_oid: '.1.3.6.1.4.1.5528.100.4.1.5.1.2.{{ $index }}'\n                    descr: '{{ $airFlowSensorLabel }}'\n                    index: 'airFlowSensorValue.{{ $index }}'\n</code></pre> <p>At the top you can define one or more mibs to be used in the lookup of data:</p> <p><code>mib: NETBOTZV2-MIB</code> For use of multiple MIB files separate them with a colon: <code>mib: NETBOTZV2-MIB:SECOND-MIB</code></p> <p>For <code>data:</code> you have the following options:</p> <p>The only sensor we have defined here is airflow. The available options are as follows:</p> <ul> <li><code>oid</code> (required): This is the name of the table you want to snmp walk for data.</li> <li><code>value</code> (optional): This is the key within the table that contains   the value. If not provided will use <code>oid</code></li> <li><code>num_oid</code> (required for PullRequests): If not provided, this parameter should be computed   automatically by discovery process. This parameter is still required to   submit a pull request. This is the numerical OID that contains   <code>value</code>. This should usually include <code>{{ $index }}</code>.   In case the index is a string, <code>{{ $str_index_as_numeric }}</code> can be used instead and will convert the string to the equivalent OID representation.</li> <li><code>divisor</code> (optional): This is the divisor to use against the returned <code>value</code>.</li> <li><code>multiplier</code> (optional): This is the multiplier to use against the returned <code>value</code>.</li> <li><code>low_limit</code> (optional): This is the critical low threshold that   <code>value</code> should be (used in alerting). If an OID is specified then   divisor / multiplier are used.</li> <li><code>low_warn_limit</code> (optional): This is the warning low threshold that   <code>value</code> should be (used in alerting). If an OID is specified then   divisor / multiplier are used.</li> <li><code>warn_limit</code> (optional): This is the warning high threshold that   <code>value</code> should be (used in alerting). If an OID is specified then   divisor / multiplier are used.</li> <li><code>high_limit</code> (optional): This is the critical high threshold that   <code>value</code> should be (used in alerting). If an OID is specified then   divisor / multiplier are used.</li> <li><code>descr</code> (required): The visible label for this sensor. It can be a   key with in the table or a static string, optionally using <code>{{ index }}</code>.</li> <li><code>group</code> (optional): Groups sensors together under in the webui,   displaying this text. Not specifying this will put the sensors in   the default group. If group is set to <code>transceiver</code> it will be shown with the port   instead of in with all the generic sensors (You must also set <code>entPhysicalIndex</code> to ifIndex)</li> <li><code>index</code> (optional): This is the index value we use to uniquely   identify this sensor. <code>{{ $index }}</code> will be replaced by the <code>index</code>   from the snmp walk.</li> <li><code>skip_values</code> (optional): This is an array of values we should skip   over (see note below).</li> <li><code>skip_value_lt</code> (optional): If sensor value is less than this, skip the discovery.</li> <li><code>skip_value_gt</code> (optional): If sensor value is greater than this, skip the discovery.</li> <li><code>entPhysicalIndex</code> and <code>entPhysicalIndex_measured</code> (optional) : If the   sensor belongs to a physical entity then you can link them here. The currently   supported variants are :<ul> <li><code>entPhysicalIndex</code> contains the entPhysicalIndex from entPhysical table, and <code>entPhysicalIndex_measured</code> is NULL</li> <li><code>entPhysicalIndex</code> contains \"ifIndex\" value of the linked port and <code>entPhysicalIndex_measured</code> contains \"ports\"</li> </ul> </li> <li><code>user_func</code> (optional): You can provide a function name for the   sensors value to be processed through (i.e. Convert fahrenheit to   celsius use <code>fahrenheit_to_celsius</code>)</li> <li><code>snmp_flags</code> (optional): this sets the flags to be sent to snmpwalk, it    overrides flags set on the sensor type and os.  The default is <code>'-OQUb'</code>.   A common issue is dealing with string indexes, setting <code>'-OQUsbe'</code> will change them to    numeric oids. Setting <code>['-OQUsbe', '-Pu']</code> will also allow _ in oid names. You can find more   in the Man Page</li> <li><code>rrd_type</code> (optional): You can change the type of the RRD file that will be created to   store the data. By default, type GAUGE is used. More details can be found here:   https://oss.oetiker.ch/rrdtool/doc/rrdcreate.en.html</li> </ul> <p>For <code>options:</code> you have the following available:</p> <ul> <li><code>divisor</code>: This is the divisor to use against the returned <code>value</code>.</li> <li><code>multiplier</code>: This is the multiplier to use against the returned <code>value</code>.</li> <li><code>skip_values</code>: This is an array of values we should skip over (see note below).</li> <li><code>skip_value_lt</code>: If sensor value is less than this, skip the discovery.</li> <li><code>skip_value_gt</code>: If sensor value is greater than this, skip the discovery.</li> </ul> <p>Multiple variables can be used in the sensor's definition. The syntax is <code>{{ $variable }}</code>. Any oid in the current table can be used, as well as pre_cached data. The index ($index) and the sub_indexes (in case the oid is indexed multiple times) are also available: if $index=\"1.20\", then $subindex0=\"1\" and $subindex1=\"20\".</p>"},{"location":"Developing/os/Health-Information/#fetching-values-from-other-tablesoids","title":"Fetching values from other tables/oids","text":"<p>When referencing an oid in another table the full index will be used to match the other table. If the indexes of the two tables don't match, you will need to specify which indexes to use by their index position starting with 0. The data for the other table must be fetched already.</p> <p><code>{{ IF-MIB::ifName:2 }}</code></p> <p>This simple example shows using the 3rd (0 is the first) index value from the current table to fetch the IF-MIB::ifName value from the data.</p> <p>Additionally, you may specify multiple index values with either a range or list of index positions.</p> <p>Range: <code>{{ IP-MIB::ipAddressPrefixOrigin:0-3 }}</code> List: <code>{{ IP-MIB::ipAddressPrefixOrigin:2.3.1.4 }}</code></p>"},{"location":"Developing/os/Health-Information/#skipping-rows-of-the-returned-data","title":"Skipping rows of the returned data","text":"<p>You can filter rows of the data returned to only discover valid sensors. This is often useful when devices always return all sensors possible or mix sensor types in a single table.</p> <p><code>skip_values</code> can also compare items within the OID table against values. The index of the sensor is used to retrieve the value from the OID, unless a target index is appended to the OID. Additionally, you may check fields from the device. Comparisons behave on a logical OR basis when chained, so only one of them needs to be matched for that particular sensor to be skipped during discovery. An example of this is below:</p> <pre><code>                    skip_values:\n                    -\n                      oid: sensUnit\n                      op: '!='\n                      value: 4\n                    -\n                      oid: sensConfig.0\n                      op: '!='\n                      value: 1\n                    -\n                      device: hardware\n                      op: 'contains'\n                      value: 'rev2'\n</code></pre> <p><code>op</code> can be any of the following operators :</p> <p>=, !=, ==, !==, &lt;=, &gt;=, &lt;, &gt;, starts, ends, contains, regex, in_array, not_starts, not_ends, not_contains, not_regex, not_in_array, exists</p> <p>Example:</p> <pre><code>                    skip_values:\n                    -\n                      oid: sensorName\n                      op: 'not_in_array'\n                      value: ['sensor1', 'sensor2']\n</code></pre> <pre><code>                    skip_values:\n                    -\n                      oid: sensorOptionalOID\n                      op: 'exists'\n                      value: false\n</code></pre> <pre><code>        temperature:\n            data:\n                -\n                    oid: hwOpticalModuleInfoTable\n                    value: hwEntityOpticalTemperature\n                    descr: '{{ $entPhysicalName }}'\n                    index: '{{ $index }}'\n                    skip_values:\n                        -\n                            oid: hwEntityOpticalMode\n                            op: '='\n                            value: '1'\n</code></pre> <p>If you aren't able to use yaml to perform the sensor discovery, you will most likely need to use Advanced health discovery.</p>"},{"location":"Developing/os/Health-Information/#advanced-health-discovery","title":"Advanced health discovery","text":"<p>If you can't use the yaml files as above, then you will need to create the discovery code in php. If it is possible to create via yaml, php discovery will likely be rejected due to the much higher chance of later problems, so it is highly suggested to use yaml.</p> <p>The directory structure for sensor information is <code>includes/discovery/sensors/$class/$os.inc.php</code>. The format of all the sensors follows the same code format which is to collect sensor information via SNMP and then call the <code>discover_sensor()</code> function; except state sensors which requires additional code. Sensor information is commonly found in an ENTITY mib supplied by device's vendor in the form of a table. Other mib tables may be used as well. Sensor information is first collected by <code>includes/discovery/sensors/pre_cache/$os.inc.php</code>. This program will pull in data from mib tables into a <code>$pre_cache</code> array that can then be used in <code>includes/discovery/sensors/$class/$os.inc.php</code> to extract specific values which are then passed to <code>discover_sensor()</code>.</p> <p><code>discover_sensor()</code> Accepts the following arguments:</p> <ul> <li>&amp;$valid = This is always null. This is unused.</li> <li>$class = Required. This is the sensor class from the table above (i.e humidity).</li> <li>$device = Required. This is the $device array.</li> <li>$oid = Required. This must be the numerical OID for where the data   can be found, i.e .1.2.3.4.5.6.7.0</li> <li>$index = Required. This must be unique for this sensor class, device   and type. Typically it's the index from the table being walked, or it   could be the name of the OID if it's a single value.</li> <li>$type = Required. This should be the OS name, i.e. pulse.</li> <li>$descr = Required. This is a descriptive value for the sensor. Some   devices will provide names to use.</li> <li>$divisor = Defaults to 1. This is used to divide the returned value.</li> <li>$multiplier = Defaults to 1. This is used to multiply the returned value.</li> <li>$low_limit = Defaults to null. Sets the low threshold limit for the   sensor, used in alerting to report out range sensors.</li> <li>$low_warn_limit = Defaults to null. Sets the low warning limit for   the sensor, used in alerting to report near out of range sensors.</li> <li>$warn_limit = Defaults to null. Sets the high warning limit for the   sensor, used in alerting to report near out of range sensors.</li> <li>$high_limit = Defaults to null. Sets the high limit for the sensor,   used in alerting to report out range sensors.</li> <li>$current = Defaults to null. Can be used to set the current value on   discovery. Poller will update this on the next poll cycle anyway.</li> <li>$poller_type = Defaults to snmp. Things like the unix-agent can set   different values but for the most part this should be left as snmp.</li> <li>$entPhysicalIndex = Defaults to null. Sets the entPhysicalIndex to   be used to look up further hardware if available.</li> <li>$entPhysicalIndex_measured = Defaults to null. Sets the type of   entPhysicalIndex used, i.e ports.</li> <li>$user_func = Defaults to null. You can provide a function name for   the sensors value to be processed through (i.e. Convert fahrenheit   to celsius use <code>fahrenheit_to_celsius</code>)</li> <li>$group = Defaults to null. Groups sensors together under in the   webui, displaying this text.</li> <li>$rrd_type = Default to 'GAUGE'. Allows to change the type of the RRD   file created for this sensor. More details can be found here in the   RRD documentation: https://oss.oetiker.ch/rrdtool/doc/rrdcreate.en.html</li> </ul> <p>For the majority of devices, this is all that's required to add support for a sensor. Polling is done based on the data gathered using <code>discover_sensor()</code>. If custom polling is needed then the file format is similar to discovery: <code>includes/polling/sensors/$class/$os.inc.php</code>. Whilst it's possible to perform additional  snmp queries within polling this should be avoided where possible. The value for the OID is already available as <code>$sensor_value</code>.</p> <p>Graphing is performed automatically for sensors, no custom graphing is required or supported.</p>"},{"location":"Developing/os/Health-Information/#adding-a-new-sensor-class","title":"Adding a new sensor class","text":"<p>You will need to add code for your new sensor class in the following existing files:</p> <ul> <li><code>LibreNMS/Enum/Sensor.php</code>: add accordingly, find free icon from Font Awesome</li> <li><code>doc/Developing/os/Health-Information.md</code>: documentation for every sensor class is mandatory.</li> <li><code>includes/discovery/functions.inc.php</code>: optional - if sensible low_limit and high_limit values are guessable when a SNMP-retrievable threshold is not available, add a case for the sensor class to the sensor_limit() and/or sensor_low_limit() functions.</li> <li><code>LibreNMS/Util/ObjectCache.php</code>: optional - choose menu grouping for the sensor class.</li> <li><code>includes/html/pages/device/overview.inc.php</code>: add <code>require 'overview/sensors/$class.inc.php'</code> in the desired order for the device overview page.</li> <li><code>lang/en/sensors.php</code>: add human-readable names and units for the sensor class in English, feel free to do so for other languages as well.</li> </ul> <p>Create and populate new files for the sensor class in the following places:</p> <ul> <li><code>includes/discovery/sensors/$class/</code>: create the folder where advanced php-based discovery files are stored. Not used for yaml discovery. =======</li> <li><code>includes/html/pages/device/overview.inc.php</code>: add <code>require 'overview/sensors/$class.inc.php'</code> in the desired order for the device overview page.</li> <li><code>lang/en/sensors.php</code>: add human-readable names and units for the sensor class in English, feel free to do so for other languages as well.</li> </ul> <p>Create and populate new files for the sensor class in the following places:</p> <ul> <li><code>includes/discovery/sensors/$class/</code>: create the folder where advanced php-based discovery files are stored. Not used for yaml discovery.</li> <li><code>includes/html/graphs/device/$class.inc.php</code>: define unit names used in RRDtool graphs.</li> <li><code>includes/html/graphs/sensor/$class.inc.php</code>: define various parameters for RRDtool graphs.</li> <li><code>includes/html/pages/device/health/$class.inc.php</code></li> <li><code>includes/html/pages/device/overview/sensors/$class.inc.php</code></li> <li><code>includes/html/pages/health/$class.inc.php</code></li> </ul>"},{"location":"Developing/os/Health-Information/#advanced-health-sensor-example","title":"Advanced health sensor example","text":"<p>This example shows how to build sensors using the advanced method. In this example we will be collecting optical power level (dBm) from Adva FSP150CC family MetroE devices. This example will assume an understanding of SNMP and MIBs.</p> <p>The first line walks the cmEntityObject table to get information about the chassis and line cards. From this information we extract the model type which will identify which tables in the CM-Facility-Mib the ports are populated in. The program then reads the appropriate table into the <code>$data</code> array <code>adva_fsp150_ports</code>. This array will have OID indexies for each port, which we will use later to identify our sensor OIDs.</p> <p>Next we are going to build our sensor discovery code. These are optical readings, so the file will be created as the dBm sensor type in <code>includes/discover/sensors/dbm/adva_fsp150.inc.php</code>. Below is a snippet of the code:</p> <pre><code>$data = SnmpQuery::walk([\n    'CM-FACILITY-MIB::cmEthernetTrafficPortTable',\n    'CM-PERFORMANCE-MIB::cmEthernetTrafficPortStatsOPT',\n    'CM-PERFORMANCE-MIB::cmEthernetTrafficPortStatsOPR',\n])-&gt;valuesByIndex();\n\nforeach ($data as $index =&gt; $entry) {\n    if (isset($entry['CM-FACILITY-MIB::cmEthernetTrafficPortMediaType']) &amp;&amp; $entry['CM-FACILITY-MIB::cmEthernetTrafficPortMediaType'] == 'fiber') {\n        //Discover received power level\n        $oidRx = '.1.3.6.1.4.1.2544.1.12.5.1.21.1.34.' . $index . '.3';\n        $oidTx = '.1.3.6.1.4.1.2544.1.12.5.1.21.1.33.' . $index . '.3';\n        $currentTx = $data[$index . '.3']['CM-PERFORMANCE-MIB::cmEthernetTrafficPortStatsOPT'] ?? null;\n        $currentRx = $data[$index . '.3']['CM-PERFORMANCE-MIB::cmEthernetTrafficPortStatsOPR'] ?? null;\n        if ($currentRx != 0 || $currentTx != 0) {\n            $ifIndex = $entry['CM-FACILITY-MIB::cmEthernetTrafficPortIfIndex'] ?? 0;\n            $ifName = PortCache::getByIfIndex($ifIndex)?-&gt;ifName;\n\n            app('sensor-discovery')-&gt;discover(new \\App\\Models\\Sensor([\n                'poller_type' =&gt; $poller_type,\n                'sensor_class' =&gt; 'dbm',\n                'device_id' =&gt; $device['device_id'],\n                'sensor_oid' =&gt; $oidRx,\n                'sensor_index' =&gt; 'cmEthernetTrafficPortStatsOPR.' . $index,\n                'sensor_type' =&gt; 'adva_fsp150,\n                'sensor_descr' =&gt; $ifName . ' Rx Power',\n                'sensor_divisor' =&gt; 1,\n                'sensor_multiplier' =&gt; 1,\n                'sensor_limit' =&gt; null,\n                'sensor_limit_warn' =&gt; null,\n                'sensor_limit_low' =&gt; null,\n                'sensor_limit_low_warn' =&gt; null,\n                'sensor_current' =&gt; $currentRx,\n                'entPhysicalIndex' =&gt; $ifIndex,\n                'entPhysicalIndex_measured' =&gt; 'ports',\n            ]));\n\n            app('sensor-discovery')-&gt;discover(new \\App\\Models\\Sensor([\n                'poller_type' =&gt; $poller_type,\n                'sensor_class' =&gt; 'dbm',\n                'device_id' =&gt; $device['device_id'],\n                'sensor_oid' =&gt; $oidRx,\n                'sensor_index' =&gt; 'cmEthernetTrafficPortStatsOPT.' . $index,\n                'sensor_type' =&gt; 'adva_fsp150,\n                'sensor_descr' =&gt; $ifName . ' Tx Power',\n                'sensor_divisor' =&gt; 1,\n                'sensor_multiplier' =&gt; 1,\n                'sensor_limit' =&gt; null,\n                'sensor_limit_warn' =&gt; null,\n                'sensor_limit_low' =&gt; null,\n                'sensor_limit_low_warn' =&gt; null,\n                'sensor_current' =&gt; $currentTx,\n                'entPhysicalIndex' =&gt; $ifIndex,\n                'entPhysicalIndex_measured' =&gt; 'ports',\n            ]));\n        }\n    }\n}\n</code></pre> <p>First the program will loop through each port's index value. In the case of Advas, the ports are names Ethernet 1-1-1-1, 1-1-1-2, etc, and they are indexed as oid.1.1.1.1, oid.1.1.1.2, etc in the mib.</p> <p>Next the program checks which table the port exists in and that the connector type is 'fiber'. There are other port tables in the full code that were ommitted from the example for brevity. Copper media won't have optical readings, so if the media type isn't fiber we skip discovery for that port.</p> <p>The next two lines build the OIDs for getting the optical receive and transmit values using the <code>$index</code> for the port. Using the OIDs the program gets the current receive and transmit values ($currentRx and $currentTx repectively) to verify the values are not 0. Not all SFPs collect digital optical monitoring (DOM) data, in the case of Adva the value of both transmit and recieve will be 0 if DOM is not available. While 0 is a valid value for optical power, its extremely unlikely that both will be 0 if DOM is present. If DOM is not available, then the program stops discovery for that port. Note that while this is the case with Adva, other vendors may differ in how they handle optics that do not supply DOM. Please check your vendor's mibs.</p> <p>Next the program assigns the values of $entPhysicalIndex and $entPhysicalIndex_measured. In this case $entPhysicalIndex is set to the value of the <code>CM-FACILITY-MIB::cmEthernetTrafficPortIfIndex</code> so that it is associated with port. This will also allow the sensor graphs to show up on the associated port's page in the GUI in addition to the Health page.</p> <p>Following that the program uses a database call to get the description of the port which will be used as the title for the graph in the GUI.</p> <p>Lastly the program calls <code>discover_sensor()</code> and passes the information collected in the previous steps. The <code>null</code> values are for low, low warning, high, and high warning values, which are not collected in the Adva's MIB.</p> <p>You can manually run discovery to verify the code works by running <code>./discovery.php -h $device_id -m sensors</code>. You can use <code>-v</code> to see what calls are being used during discovery and <code>-d</code> to see debug output. In the output under <code>#### Load disco module sensors ####</code> you can see a list of sensors types. If there is a <code>+</code> a sensor is added, if there is a <code>-</code> one was deleted, and a <code>.</code> means no change. If there is nothing next to the sensor type then the sensor was not discovered. There is is also information about changes to the database and RRD files at the bottom.</p> <pre><code>[librenms@nms-test ~]$ ./discovery.php -h 2 -m sensors\nLibreNMS Discovery\n164.113.194.250 2 adva_fsp150\n\n#### Load disco module core ####\n\n&gt;&gt; Runtime for discovery module 'core': 0.0240 seconds with 66536 bytes\n&gt;&gt; SNMP: [2/0.06s] MySQL: [3/0.00s] RRD: [0/0.00s]\n#### Unload disco module core ####\n\n\n#### Load disco module sensors ####\nPre-cache adva_fsp150:\n ENTITY-SENSOR: Caching OIDs: entPhysicalDescr entPhysicalName entPhySensorType entPhySensorScale entPhySensorPrecision entPhySensorValue entPhySensorOperStatus\nAirflow:\nCurrent: .\nCharge:\nDbm: Adva FSP-150 dBm..\nFanspeed:\nFrequency:\nHumidity:\nLoad:\nPower:\nPower_consumed:\nPower_factor:\nRuntime:\nSignal:\nState:\nCount:\nTemperature: ..\nTv_signal:\nBitrate:\nVoltage: .\nSnr:\nPressure:\nCooling:\nDelay:\nQuality_factor:\nChromatic_dispersion:\nBer:\nEer:\nWaterflow:\nPercent:\n\n&gt;&gt; Runtime for discovery module 'sensors': 3.9340 seconds with 190024 bytes\n&gt;&gt; SNMP: [16/3.89s] MySQL: [36/0.03s] RRD: [0/0.00s]\n#### Unload disco module sensors ####\n\nDiscovered in 5.521 seconds\n\nSNMP [18/3.96s]: Get[8/0.81s] Getnext[0/0.00s] Walk[10/3.15s]\nMySQL [41/0.03s]: Cell[10/0.01s] Row[-4/-0.00s] Rows[31/0.02s] Column[0/0.00s] Update[2/0.00s] Insert[2/0.00s] Delete[0/0.00s]\nRRD [0/0.00s]: Update[0/0.00s] Create [0/0.00s] Other[0/0.00s]\n</code></pre>"},{"location":"Developing/os/Initial-Detection/","title":"Initial Detection","text":"<p>This document will provide the information you should need to add basic detection for a new OS.</p>"},{"location":"Developing/os/Initial-Detection/#discovery","title":"Discovery","text":"<p>OS discovery is how LibreNMS detects which OS should be used for a device. Generally detection should use sysObjectID or sysDescr, but you can also snmpget an oid and check for a value.  snmpget is discouraged because it slows down all os detections, not just the added os.</p> <p>To begin, create the new OS file which should be called <code>resources/definitions/os_detection/pulse.yaml</code>. Here is a working example:</p> <pre><code>os: pulse\ntext: 'Pulse Secure'\ntype: firewall\nicon: pulse\nover:\n    - { graph: device_bits, text: 'Device Traffic' }\n    - { graph: device_processor, text: 'CPU Usage' }\n    - { graph: device_mempool, text: 'Memory Usage' }\ndiscovery:\n    - sysObjectID:\n        - .1.3.6.1.4.1.12532.\n</code></pre> <p><code>over</code>: This is a list of the graphs which will be shown within the device header bar (mini graphs top right).</p> <p><code>discovery</code>: Here we are detecting this new OS using sysObjectID, this is the preferred method for detection.  Other options are available:</p> <ul> <li><code>sysObjectID</code> The preferred operator. Checks if the sysObjectID   starts with one of the strings under this item</li> <li><code>sysDescr</code> Use this in addition to sysObjectID if required. Check   that the sysDescr contains one of the strings under this item</li> <li><code>sysObjectID_regex</code> Please avoid use of this. Checks if the   sysObjectID matches one of the regex statements under this item</li> <li><code>sysDescr_regex</code> Please avoid use of this. Checks if the sysDescr   matches one of the regex statements under this item</li> <li><code>snmpget</code> Do not use this unless none of the other methods   work. Fetch an oid and compare it against a value. <pre><code>discovery:\n    -\n      snmpget:\n        - oid: &lt;someoid&gt;\n        - op: &lt;[\"=\",\"!=\",\"==\",\"!==\",\"&lt;=\",\"&gt;=\",\"&lt;\",\"&gt;\",\"starts\",\"ends\",\"contains\",\"regex\",\"not_starts\",\"not_ends\",\"not_contains\",\"not_regex\",\"in_array\",\"not_in_array\",\"exists\"]&gt;\n        - value: &lt;'string' | boolean&gt;\n</code></pre></li> <li><code>_except</code> You can add this to any of the above to exclude that   element. As an example:</li> </ul> <pre><code>discovery:\n    -\n      sysObjectID:\n          - .1.3.6.1.4.1.12532.\n      sysDescr_except:\n          - 'Not some pulse'\n</code></pre> <p><code>group</code>: You can group certain OS' together by using group, for instance ios, nx-os, iosxr are all within a group called cisco.</p> <p><code>bad_ifXEntry</code>: This is a list of models for which to tell LibreNMS that the device doesn't support ifXEntry and to ignore it:</p> <pre><code> bad_ifXEntry:\n     - cisco1941\n     - cisco886Va\n     - cisco2811\n</code></pre> <p><code>mib_dir</code>: You can use this to specify an additional directory to look in for MIBs. An array is not accepted, only one directory may be specified.</p> <pre><code>mib_dir: juniper\n</code></pre> <p><code>poller_modules</code>: This is a list of poller modules to either enable (1) or disable (0). Check <code>resources/definitions/config_definitions.json</code> to see which modules are enabled/disabled by default.</p> <pre><code>poller_modules:\n    cisco-ace-serverfarms: false\n    cisco-ace-loadbalancer: false\n</code></pre> <p><code>discovery_modules</code>: This is the list of discovery modules to either enable (1) or disable (0). Check <code>resources/definitions/config_definitions.json</code> to see which modules are enabled/disabled by default.</p> <pre><code>discovery_modules:\n     cisco-cef: true\n     slas: true\n     cisco-mac-accounting: false\n</code></pre>"},{"location":"Developing/os/Initial-Detection/#discovery-logic","title":"Discovery Logic","text":"<p>YAML is converted to an array in PHP.  Consider the following YAML:</p> <pre><code>discovery:\n  - sysObjectID: foo\n  -\n    sysDescr: [ snafu, exodar ]\n    sysObjectID: bar\n</code></pre> <p>This is how the discovery array would look in PHP:</p> <pre><code>[\n     [\n       \"sysObjectID\" =&gt; \"foo\",\n     ],\n     [\n       \"sysDescr\" =&gt; [\n         \"snafu\",\n         \"exodar\",\n       ],\n       \"sysObjectID\" =&gt; \"bar\",\n     ]\n]\n</code></pre> <p>The logic for the discovery is as follows:</p> <ol> <li>One of the first level items must match</li> <li>ALL of the second level items must match (sysObjectID, sysDescr)</li> <li>One of the third level items (foo, [snafu,exodar], bar) must match</li> </ol> <p>So, considering the example:</p> <ul> <li><code>sysObjectID: foo, sysDescr: ANYTHING</code> matches</li> <li><code>sysObjectID: bar, sysDescr: ANYTHING</code> does not match</li> <li><code>sysObjectID: bar, sysDescr: exodar</code> matches</li> <li><code>sysObjectID: bar, sysDescr: snafu</code> matches</li> </ul>"},{"location":"Developing/os/Initial-Detection/#os-discovery","title":"OS discovery","text":"<p>OS discovery collects additional standardized data about the OS.  These are specified in the discovery yaml <code>resources/definitions/os_discovery/&lt;os&gt;.yaml</code> or <code>LibreNMS/OS/&lt;os&gt;.php</code> if more complex collection is required.</p> <ul> <li><code>version</code> The version of the OS running on the device.</li> <li><code>hardware</code> The hardware version for the device. For example: 'WS-C3560X-24T-S'</li> <li><code>features</code> Features for the device, for example a list of enabled software features.</li> <li><code>serial</code> The main serial number of the device.</li> </ul>"},{"location":"Developing/os/Initial-Detection/#yaml-based-os-discovery","title":"Yaml based OS discovery","text":"<ul> <li><code>sysDescr_regex</code> apply a regex or list of regexes to the sysDescr to extract named groups, this data has the lowest precedence</li> <li><code>&lt;field&gt;</code> specify an oid or list of oids to attempt to pull the data from, the first non-empty response will be used</li> <li><code>&lt;field&gt;_regex</code> parse the value out of the returned oid data, must use a named group</li> <li><code>&lt;field&gt;_template</code> combine multiple oid results together to create a final string value.  The result is trimmed.</li> <li><code>&lt;field&gt;_replace</code> An array of replacements ['search regex', 'replace'] or regex to remove</li> <li><code>hardware_mib</code> MIB used to translate sysObjectID to get hardware. hardware_regex can process the result.</li> </ul> <pre><code>modules:\n    os:\n        sysDescr_regex: '/(?&lt;hardware&gt;MSM\\S+) .* Serial number (?&lt;serial&gt;\\S+) - Firmware version (?&lt;version&gt;\\S+)/'\n        features: UPS-MIB::upsIdentAttachedDevices.0\n        hardware:\n            - ENTITY-MIB::entPhysicalName.1\n            - ENTITY-MIB::entPhysicalHardwareRev.1\n        hardware_template: '{{ ENTITY-MIB::entPhysicalName.1 }} {{ ENTITY-MIB::entPhysicalHardwareRev.1 }}'\n        serial: ENTITY-MIB::entPhysicalSerialNum.1\n        version: ENTITY-MIB::entPhysicalSoftwareRev.1\n        version_regex: '/V(?&lt;version&gt;.*)/'\n</code></pre>"},{"location":"Developing/os/Initial-Detection/#php-based-os-discovery","title":"PHP based OS discovery","text":"<pre><code>public function discoverOS(\\App\\Models\\Device $device): void\n{\n    $response = SnmpQuery::next(['NAS-MIB::enclosureModel', 'NAS-MIB::enclosureSerialNum', 'ENTITY-MIB::entPhysicalFirmwareRev']);\n    $device-&gt;version = $response-&gt;value('ENTITY-MIB::entPhysicalFirmwareRev');\n    $device-&gt;hardware = $response-&gt;value('NAS-MIB::enclosureModel');\n    $device-&gt;serial = $response-&gt;value('NAS-MIB::enclosureSerialNum');\n}\n</code></pre>"},{"location":"Developing/os/Initial-Detection/#mibs","title":"MIBs","text":"<p>If the device has MIBs available and you use it in the detection then you can add these in. It is highly recommended that you add mibs to a vendor specific directory. For instance HP mibs are in <code>mibs/hp</code>. Please  ensure that these directories are specified in the yaml detection file, see <code>mib_dir</code> above.</p>"},{"location":"Developing/os/Initial-Detection/#icon-and-logo","title":"Icon and Logo","text":"<p>It is highly recommended to use SVG images where possible, these scale and provide a nice visual image for users with HiDPI screens. If you can't find SVG images then please use png.</p> <p>Create an SVG image of the icon and logo.  Legacy PNG bitmaps are also supported but look bad on HiDPI.</p> <ul> <li>A vector image should not contain padding.</li> <li>The file should not be larger than 20 Kb. Simplify paths to reduce large files.</li> <li>Use plain SVG without gzip compression.</li> <li>The SVG root element must not contain length and width attributes, only viewBox.</li> </ul>"},{"location":"Developing/os/Initial-Detection/#icon","title":"Icon","text":"<ul> <li>Save the icon SVG to <code>html/images/os/$os.svg</code>.</li> <li>Icons should look good when viewed at 32x32 px.</li> <li>Square icons are preferred to full logos with text.</li> <li>Remove small ornaments that are almost not visible when displayed with 32px width (e.g. \u00ae or \u2122).</li> </ul>"},{"location":"Developing/os/Initial-Detection/#logo","title":"Logo","text":"<ul> <li>Save the logo SVG to <code>html/images/logos/$os.svg</code>.</li> <li>Logos can be any dimension, but often are wide and contain the company name.</li> <li>If a logo is not present, the icon will be used.</li> </ul>"},{"location":"Developing/os/Initial-Detection/#hints","title":"Hints","text":"<p>Hints for Inkscape:</p> <ul> <li>You can open a PDF or EPS to extract the logo.</li> <li>Ungroup elements to isolate the logo.</li> <li>Use <code>Path -&gt; Simplify</code> to simplify paths of large files.</li> <li>Use <code>File -&gt; Document Properties\u2026 -&gt; Resize page to content\u2026</code> to remove padding.</li> <li>Use <code>File -&gt; Clean up document</code> to remove unused gradients, patterns, or markers.</li> <li>Use <code>File -&gt; Save As -&gt; Plain SVG</code> to save the final image.</li> </ul> <p>By optimizing the SVG you can shrink the file size in some cases to less than 20 %. SVG Optimizer does a great job. There is also an online version.</p>"},{"location":"Developing/os/Initial-Detection/#the-final-check","title":"The final check","text":"<p>Discovery</p> <pre><code>./discovery.php -d -h HOSTNAME\n</code></pre> <p>Polling</p> <pre><code>lnms device:poll HOSTNAME\n</code></pre> <p>At this step we should see all the values retrieved in LibreNMS.</p> <p>Note: If you have made a number of changes to either the OS's Discovery files, it's possible earlier edits have been cached. As such, if you do not get expected behaviour when completing the final check above, try removing the cache file first:</p> <pre><code>rm -f cache/os_defs.cache\n</code></pre>"},{"location":"Developing/os/Mem-CPU-Information/","title":"Mem/CPU Information","text":"<p>This document will guide you through adding detection for Memory / Processor for your new device.</p>"},{"location":"Developing/os/Mem-CPU-Information/#memory","title":"Memory","text":"<p>LibreNMS will attempt to detect memory statistics using the standard HOST-RESOURCES-MIB and UCD-SNMP-MIB MIBs. To detect non-standard MIBs, they can be defined via Yaml.</p>"},{"location":"Developing/os/Mem-CPU-Information/#yaml","title":"YAML","text":"<p>In order to successfully detect memory amount and usage, two of the for keys below are required.  Some OS only provide a usage percentage, which will work, but a total RAM amount will not be displayed.</p> <ul> <li>total</li> <li>used</li> <li>free</li> <li>percent_used</li> </ul> <p><code>resources/definitions/os_discovery/mempools/arubaos.yaml</code></p> <pre><code>mempools:\n    data:\n        -\n            total: WLSX-SWITCH-MIB::sysXMemorySize\n            used: WLSX-SWITCH-MIB::sysXMemoryUsed\n            precision: 1024\n</code></pre> <p>The code can also interpret table based OIDs and supports many of the same features as Health Sensors including {{ }} parsing, skip_values, and precache.</p> <p>Valid data entry keys:</p> <ul> <li><code>oid</code> oid to walk to collect processor data</li> <li><code>total</code> oid or integer total memory size in bytes (or precision)</li> <li><code>used</code> oid memory used in bytes (or precision)</li> <li><code>free</code> oid memory free in bytes (or precision)</li> <li><code>percent_used</code> oid of percentage of used memory</li> <li><code>descr</code> A visible description of the memory measurement defaults to \"Memory\"</li> <li><code>warn_percent</code> Usage percentage to used for alert purposes</li> <li><code>precision</code> precision for all byte values, typically a power of 2 (1024 for example)</li> <li><code>class</code>used to generate rrd filename, defaults to system.  If system, buffers, and cached exist they will be combined to calculate available memory.</li> <li><code>type</code> used to generate rrd filename, defaults to the os name</li> <li><code>index</code> used to generate rrd filename, defaults to the oid index</li> <li><code>skip_values</code> skip values see Health Sensors for specification</li> <li><code>snmp_flags</code> additional net-snmp flags</li> </ul>"},{"location":"Developing/os/Mem-CPU-Information/#custom-processor-discovery-and-polling","title":"Custom Processor Discovery and Polling","text":"<p>If you need to implement custom discovery or polling you can implement the MempoolsDiscovery interface and the MempoolsPolling interface in the OS class. MempoolsPolling is optional, standard polling will be used based on OIDs stored in the database.</p> <p>OS Class files reside under <code>LibreNMS\\OS</code></p> <pre><code>&lt;?php\n\nnamespace LibreNMS\\OS;\n\nuse LibreNMS\\Interfaces\\Discovery\\MempoolsDiscovery;\nuse LibreNMS\\Interfaces\\Polling\\MempoolsPolling;\n\nclass Example extends \\LibreNMS\\OS implements MempoolsDiscovery, MempoolsPolling\n{\n    /**\n     * Discover a Collection of Mempool models.\n     * Will be keyed by mempool_type and mempool_index\n     *\n     * @return \\Illuminate\\Support\\Collection \\App\\Models\\Mempool\n     */\n    public function discoverMempools()\n    {\n        // TODO: Implement discoverMempools() method.\n    }\n\n    /**\n     * @param \\Illuminate\\Support\\Collection $mempools \\App\\Models\\Mempool\n     * @return \\Illuminate\\Support\\Collection \\App\\Models\\Mempool\n     */\n    public function pollMempools($mempools)\n    {\n        // TODO: Implement pollMempools() method.\n    }\n}\n</code></pre>"},{"location":"Developing/os/Mem-CPU-Information/#processor","title":"Processor","text":"<p>Detection for processors is done via a yaml file unless custom processing of data is required.</p>"},{"location":"Developing/os/Mem-CPU-Information/#yaml_1","title":"YAML","text":"<p><code>resources/definitions/os_discovery/pulse.yaml</code></p> <pre><code>mib: PULSESECURE-PSG-MIB\nmodules:\n    processors:\n          data:\n              -\n                  oid: iveCpuUtil\n                  num_oid: '.1.3.6.1.4.1.12532.10.{{ $index }}'\n                  type: pulse\n</code></pre> <p>Available yaml data keys:</p> Key Default Description oid required The string based oid to fetch data, could be a table or a single value num_oid optional The numerical oid to fetch data from when polling, usually should be appended by {{ $index }}. Computed by discovery process if not provided. value optional Oid to retrieve data from, primarily used for tables precision 1 The multiplier to multiply the data by. If this is negative, the data will be multiplied then subtracted from 100. descr Processor Description of this processor, may be an oid or plain string.  Helpful values {{ $index }} and {{$count}} type Name of this sensor. This is used with the index to generate a unique id for this sensor. index {{ $index }} The index of this sensor, defaults to the index of the oid. skip_values optional Do not detect this sensor if the value matches <p>Accessing values within yaml:</p> {{ $index }} The index after the given oid {{ $count }} The count of entries (starting with 1) {{ $<code>oid</code> }} Any oid in the table or pre-fetched"},{"location":"Developing/os/Mem-CPU-Information/#custom-processor-discovery-and-polling_1","title":"Custom Processor Discovery and Polling","text":"<p>If you need to implement custom discovery or polling you can implement the ProcessorDiscovery interface and the ProcessorPolling interface in the OS class.</p> <p>OS Class files reside under <code>LibreNMS\\OS</code></p> <pre><code>&lt;?php\nnamespace LibreNMS\\OS;\n\nuse LibreNMS\\Device\\Processor;\nuse LibreNMS\\Interfaces\\Discovery\\ProcessorDiscovery;\nuse LibreNMS\\Interfaces\\Polling\\ProcessorPolling;\nuse LibreNMS\\OS;\n\nclass ExampleOS extends OS implements ProcessorDiscovery, ProcessorPolling\n{\n    /**\n     * Discover processors.\n     * Returns an array of LibreNMS\\Device\\Processor objects that have been discovered\n     *\n     * @return array Processors\n     */\n    public function discoverProcessors()\n    {\n        // discovery code here\n    }\n\n    /**\n     * Poll processor data.  This can be implemented if custom polling is needed.\n     *\n     * @param array $processors Array of processor entries from the database that need to be polled\n     * @return array of polled data\n     */\n    public function pollProcessors(array $processors)\n    {\n        // polling code here\n    }\n}\n</code></pre>"},{"location":"Developing/os/Settings/","title":"Optional OS Settings","text":"<p>This page documents settings that can be set in the os yaml files or in config.php. All settings listed here are optional. If they are not set, the global default will be used.</p>"},{"location":"Developing/os/Settings/#user-override-in-configphp","title":"User override in config.php","text":"<p>Users can override these settings in their config.php.</p> <p>For example, to set an alternate icon for ios:</p> <pre><code>$config['os']['ios']['icon'] = 'fuzzybunny';\n</code></pre>"},{"location":"Developing/os/Settings/#ignoring-sensors","title":"Ignoring Sensors","text":"<p>It is possible to filter some sensors from the configuration:</p> <ul> <li>Filter all 'current' sensors for Operating System 'vrp'.</li> </ul> <pre><code>$config['os']['vrp']['disabled_sensors']['current'] = true;\n</code></pre> <ul> <li>Filter all sensors with description matching regexp <code>'/PEM Iout/'</code> for Operating System iosxe.</li> </ul> <pre><code>$config['os']['iosxe']['disabled_sensors_regex'][] = '/PEM Iout/';\n</code></pre> <ul> <li>Filter all 'power' sensors with description matching regexp <code>'/ Power [TR]x /'</code> for Operating System iosxr.</li> </ul> <pre><code>$config['os']['iosxr']['disabled_sensors_regex']['power'][] = '/ Power [TR]x /';\n</code></pre> <ul> <li>Ignore all temperature sensors</li> </ul> <pre><code>$config['disabled_sensors']['temperature'] = true;\n</code></pre> <ul> <li>Filter all sensors matching with description regexp <code>'/PEM Iout/'</code>.</li> </ul> <pre><code>$config['disabled_sensors_regex'][] = '/PEM Iout/';\n</code></pre>"},{"location":"Developing/os/Settings/#ignoring-interfaces","title":"Ignoring Interfaces","text":"<p>See also: Global Ignoring Interfaces Config</p> <p>These settings are merged with the global settings, so you can only undo global ones with good_if</p> <pre><code>empty_ifdescr: false # allow empty ifDescr\nbad_if: # ifDescr (substring, case insensitive)\n    - lp0\nbad_if_regexp: # ifDescr (regex, case insensitive)\n    - \"/^ng[0-9]+$/\"\nbad_ifname_regexp: # ifName (regex, case insensitive)\n    - \"/^xdsl_channel /\"\nbad_ifalias_regexp: # ifAlias (regex, case insensitive)\n    - \"/^vlan/\"\nbad_iftype: # ifType (substring)\n    - sonet\ngood_if: # ignore all other bad_if settings ifDescr (substring, case insensitive)\n    - virtual\nbad_ifoperstatus # IfOperStatus (substring, case insensitive)\n    - notPresent\n</code></pre>"},{"location":"Developing/os/Settings/#controlling-interface-labels","title":"Controlling interface labels","text":"<p>By default we use ifDescr to label ports/interfaces. Setting either <code>ifname</code> or <code>ifalias</code> will override that.  Only set one of these.  ifAlias is user supplied. <code>ifindex</code> will append the ifindex to the port label.</p> <pre><code>ifname: true\nifalias: true\n\nifindex: true\n</code></pre>"},{"location":"Developing/os/Settings/#poller-and-discovery-modules","title":"Poller and Discovery Modules","text":"<p>The various discovery and poller modules can be enabled or disabled per OS.  The defaults are usually reasonable, so likely you won't want to change more than a few. These modules can be enabled or disabled per-device in the webui and per os or globally in config.php. Usually, a poller module will not work if it's corresponding discovery module is not enabled.</p> <p>You should avoid setting these to false in the OS definitions unless it has a significant negative impact on polling.  Setting modules in the definition reduces user control of modules.</p> <pre><code>poller_modules:\n    bgp-peers: true\ndiscovery_modules:\n    arp-table: false\n</code></pre>"},{"location":"Developing/os/Settings/#snmp-settings","title":"SNMP Settings","text":""},{"location":"Developing/os/Settings/#disable-snmpbulkwalk","title":"Disable snmpbulkwalk","text":"<p>Some devices have buggy snmp implementations and don't respond well to the more efficient snmpbulkwalk. To disable snmpbulkwalk and only use snmpwalk for an OS set the following.</p> <pre><code>snmp_bulk: false\n</code></pre> <p>If only some specific OIDs fail with snmpbulkwalk. You can disable just those OIDs. This needs to match exactly the OID being walked by LibreNMS. MIB::oid is preferred to prevent name collisions.</p> <pre><code>oids:\n    no_bulk:\n        - UCD-SNMP-MIB::laLoadInt\n</code></pre>"},{"location":"Developing/os/Settings/#limit-the-oids-per-snmpget","title":"Limit the oids per snmpget","text":"<pre><code>snmp_max_oid: 8\n</code></pre>"},{"location":"Developing/os/Settings/#storage-settings","title":"Storage Settings","text":"<p>See also: Global Storage Config</p> <pre><code>ignore_mount_array: # exact match\n    - /var/run\nignore_mount_string: # substring\n    - run\nignore_mount_regexp: # regex\n    - \"/^\\/var/\"\n</code></pre>"},{"location":"Developing/os/Test-Units/","title":"Tests","text":"<p>Tests ensure LibreNMS works as expected, now and in the future.  New OS should provide as much test data as needed and added test data for existing OS is welcome.</p> <p>Saved snmp data can be found in <code>tests/snmpsim/*.snmprec</code> and saved database data can be found in <code>tests/data/*.json</code>. Please review this for any sensitive data before submitting.  When replacing data, make sure it is modified in a consistent manner.</p> <p>We utilise snmpsim to do unit testing. For OS discovery, we can mock snmpsim, but for other tests you will need it installed and functioning.  We run snmpsim during our integration tests, but not by default when running <code>lnms dev:check</code>.  You can install snmpsim with the command <code>pip3 install snmpsim</code>.</p>"},{"location":"Developing/os/Test-Units/#capturing-test-data","title":"Capturing test data","text":"If test data already exists <p>If test data already exists, but is for a different device/configuration with the same OS. Then you should use the <code>--variant (-v)</code> option to specify a different variant of the OS, this will be tested completely separate from other variants. If there is only one variant, please do not specify one.</p>"},{"location":"Developing/os/Test-Units/#1-collect-snmp-data","title":"1. Collect SNMP data","text":"<p><code>./scripts/collect-snmp-data.php</code> is provided to make it easy to collect data for tests.  Running collect-snmp-data.php with the <code>--hostname (-h) -v ''</code> allows you to capture all data used to discover and poll a device already added to LibreNMS.  Make sure to re-run the script if you add additional support. Check the command-line help for more options.</p>"},{"location":"Developing/os/Test-Units/#2-save-test-data","title":"2. Save test data","text":"<p>After you have collected snmp data, run <code>./scripts/save-test-data.php</code> with the <code>--os (-o) -v ''</code> option to dump the post discovery and post poll database entries to json files. This step requires snmpsim, if you are having issues, the maintainers may help you generate it from the snmprec you created in the previous step.</p> <p>Generally, you will only need to collect data once. After you have the data you need in the snmprec file, you can just use save-test-data.php to update the database dump (json) after that.</p>"},{"location":"Developing/os/Test-Units/#running-tests","title":"Running tests","text":"<p>Note: To run tests, ensure you have executed <code>./scripts/composer_wrapper.php install</code> from your LibreNMS root directory. This will read composer.json and install any dependencies required.</p> <p>After you have saved your test data, you should run <code>lnms dev:check</code> verify they pass.</p> <p>To run the full suite of tests enable database and snmpsim reliant tests: <code>lnms dev:check unit --db --snmpsim</code></p>"},{"location":"Developing/os/Test-Units/#specific-os","title":"Specific OS","text":"<p><code>lnms dev:check unit -o osname</code></p>"},{"location":"Developing/os/Test-Units/#test-an-os-but-only-discovery-and-polling-modules-exluding-os-detection","title":"Test an OS, but only discovery and polling modules (exluding OS detection)","text":"<p><code>lnms dev:check unit --os osname --os-modules-only</code></p>"},{"location":"Developing/os/Test-Units/#specific-module","title":"Specific Module","text":"<p><code>lnms dev:check unit -m modulename</code></p>"},{"location":"Developing/os/Test-Units/#test-all-modules-for-all-os-and-stop-on-failure","title":"Test all modules for all os and stop on failure","text":"<p><code>lnms dev:check unit --db -snmpsim --os-modules-only -f</code></p>"},{"location":"Developing/os/Test-Units/#using-snmpsim-for-testing","title":"Using snmpsim for testing","text":"<p>You can run snmpsim to access test data by running</p> <pre><code>lnms dev:simulate\n</code></pre> <p>You may then run snmp queries against it using the os (and variant) as the community and 127.1.6.1:1161 as the host.</p> <pre><code>snmpget -v 2c -c ios_c3560e 127.1.6.1:1161 sysDescr.0\n</code></pre>"},{"location":"Developing/os/Test-Units/#simulate-specific-device-from-test-data","title":"Simulate specific device from test data","text":"<p>Add/update a device called \"snmpsim\" to your install and set to use a specific snmprec file</p> <pre><code>lnms dev:simulate ios_2960x\n</code></pre> <p>You can then run <code>./discovery.php -h snmpsim -d -v</code> and <code>lnms device:poll snmpsim -vvv</code> to discover and poll the simulated device.</p>"},{"location":"Developing/os/Test-Units/#snmprec-format","title":"Snmprec format","text":"<p>Snmprec files are simple files that store the snmp data. The data format is simple with three columns: numeric oid, type code, and data. Here is an example snippet.</p> <pre><code>1.3.6.1.2.1.1.1.0|4|Pulse Secure,LLC,MAG-2600,8.0R14 (build 41869)\n1.3.6.1.2.1.1.2.0|6|1.3.6.1.4.1.12532.254.1.1\n</code></pre> <p>During testing LibreNMS will use any info in the snmprec file for snmp calls.  This one provides sysDescr (<code>.1.3.6.1.2.1.1.1.0</code>, 4 = Octet String) and sysObjectID (<code>.1.3.6.1.2.1.1.2.0</code>, 6 = Object Identifier), which is the minimum that should be provided for new snmprec files.</p> <p>To look up the numeric OID and type of an string OID with snmptranslate:</p> <pre><code>snmptranslate -On -Td SNMPv2-MIB::sysDescr.0\n</code></pre> <p>List of SNMP data types:</p> Type Value OCTET STRING 4 HEX STRING 4x Integer32 2 NULL 5 OBJECT IDENTIFIER 6 IpAddress 64 Counter32 65 Gauge32 66 TimeTicks 67 Opaque 68 Counter64 70 <p>Hex encoded strings (4x) should be used for any strings that contain line returns.</p>"},{"location":"Developing/os/Test-Units/#new-discoverypoller-modules","title":"New discovery/poller modules","text":"<p>New discovery or poller modules should define database capture parameters in <code>/tests/module_tables.yaml</code>.</p>"},{"location":"Developing/os/Test-Units/#example-workflow","title":"Example workflow","text":"<p>If the base os (.snmprec) already contains test data for the module you are testing or that data conflicts with your new data, you must use a variant to store your test data (-v )."},{"location":"Developing/os/Test-Units/#add-initial-detection","title":"Add initial detection","text":"<ol> <li>Add device to LibreNMS. It is generic and device_id = 42</li> <li>Run <code>./scripts/collect-snmp-data.php -h 42 -v ''</code>, initial snmprec will be created</li> <li>Add initial detection for <code>example-os</code></li> <li>Run discovery to make sure it detects properly <code>./discovery.php -h 42</code></li> <li>Add any additional os items like version, hardware, features, or serial.</li> <li>If there is additional snmp data required, run    <code>./scripts/collect-snmp-data.php -h 42 -v ''</code></li> <li>Run <code>./scripts/save-test-data.php -o example-os</code> to update the    dumped database data.</li> <li>Review data. If you modified the snmprec or code (don't modify json    manually) run <code>./scripts/save-test-data.php -o example-os -m os -v ''</code></li> <li>Run <code>lnms dev:check unit --db --snmpsim</code></li> <li>If the tests succeed submit a pull request</li> </ol>"},{"location":"Developing/os/Test-Units/#additional-module-support-or-test-data","title":"Additional module support or test data","text":"<ol> <li>Add code to support module or support already exists.</li> <li><code>./scripts/collect-snmp-data.php -h 42 -v '' -m &lt;module&gt;</code>, this will add    more data to the snmprec file</li> <li>Review data. If you modified the snmprec (don't modify json    manually) run <code>./scripts/save-test-data.php -o example-os -v '' -m &lt;module&gt;</code></li> <li>Run <code>lnms dev:check unit --db --snmpsim</code></li> <li>If the tests succeed submit a pull request</li> </ol>"},{"location":"Developing/os/Test-Units/#json-application-test-writing-using-scriptsjson-app-toolphp","title":"JSON Application Test Writing Using ./scripts/json-app-tool.php","text":"<ol> <li>First you will need a good example JSON output produced via SNMP    extend in question.</li> <li>Read the help via <code>./scripts/json-app-tool.php -h</code>.</li> <li>Generate the SNMPrec data via <code>./scripts/json-app-tool.php -a    appName -s &gt; ./tests/snmpsim/linux_appName-v1.snmprec</code>. If the    SNMP extend name OID different than the application name, then you    will need to pass  the -S flag for over riding that.</li> <li>Generate the test JSON data via <code>./scripts/json-app-tool.php -a    appName -t &gt; ./tests/data/linux_appName-v1.json</code>.</li> <li>Update the generated './tests/data/linux_appName-v1.json' making    sure that all the expected metrics are present. This assumes that    everything under .data in the JSON will be collapsed and used.</li> </ol> <p>During test runs if it does not appear to be detecting the app and it has a different app name and SNMP extend name OID, make sure that -S is set properly and that 'includes/discovery/applications.inc.php' has been updated.</p>"},{"location":"Developing/os/Wireless-Sensors/","title":"Wireless Sensors","text":"<p>This document will guide you through adding wireless sensors for your new wireless device.</p> <p>Currently we have support for the following wireless metrics along with the values we expect to see the data in:</p> Type Measurement Interface Description ap-count % WirelessApCountDiscovery The number of APs attached to this controller capacity % WirelessCapacityDiscovery The % of operating rate vs theoretical max ccq % WirelessCcqDiscovery The Client Connection Quality channel count WirelessChannelDiscovery The channel, use of frequency is preferred cell count WirelessCellDiscovery The cell in a multicell technology clients count WirelessClientsDiscovery The number of clients connected to/managed by this device distance km WirelessDistanceDiscovery The distance of a radio link in Kilometers error-rate bps WirelessErrorRateDiscovery The rate of errored packets or bits, etc error-ratio % WirelessErrorRatioDiscovery The percent of errored packets or bits, etc errors count WirelessErrorsDiscovery The total bits of errored packets or bits, etc frequency MHz WirelessFrequencyDiscovery The frequency of the radio in MHz, channels can be converted mse dB WirelessMseDiscovery The Mean Square Error noise-floor dBm WirelessNoiseFloorDiscovery The amount of noise received by the radio power dBm WirelessPowerDiscovery The power of transmit or receive, including signal level quality % WirelessQualityDiscovery The % of quality of the link, 100% = perfect link rate bps WirelessRateDiscovery The negotiated rate of the connection (not data transfer) rssi dBm WirelessRssiDiscovery The Received Signal Strength Indicator snr dB WirelessSnrDiscovery The Signal to Noise ratio, which is signal - noise floor sinr dB WirelessSinrDiscovery The Signal-to-Interference-plus-Noise Ratio rsrq dB WirelessRsrqDiscovery The Reference Signal Received Quality rsrp dBm WirelessRsrpDiscovery The Reference Signals Received Power xpi dBm WirelessXpiDiscovery The Cross Polar Interference values ssr dB WirelessSsrDiscovery The Signal strength ratio, the ratio(or difference) of Vertical rx power to Horizontal rx power utilization % WirelessUtilizationDiscovery The % of utilization compared to the current rate <p>You will need to create a new OS class for your os if one doesn't exist under <code>LibreNMS/OS</code>.  The name of this file should be the os name in camel case for example <code>airos -&gt; Airos</code>, <code>ios-wlc -&gt; IosWlc</code>.</p> <p>Your new OS class should extend LibreNMS\\OS and implement the interfaces for the sensors your os supports.</p> <pre><code>namespace LibreNMS\\OS;\n\nuse LibreNMS\\Device\\WirelessSensor;\nuse LibreNMS\\Interfaces\\Discovery\\Sensors\\WirelessClientsDiscovery;\nuse LibreNMS\\OS;\n\nclass Airos extends OS implements WirelessClientsDiscovery\n{\n    public function discoverWirelessClients()\n    {\n        $oid = '.1.3.6.1.4.1.41112.1.4.5.1.15.1'; //UBNT-AirMAX-MIB::ubntWlStatStaCount.1\n        return array(\n            new WirelessSensor('clients', $this-&gt;getDeviceId(), $oid, 'airos', 1, 'Clients')\n        );\n    }\n}\n</code></pre> <p>All discovery interfaces will require you to return an array of WirelessSensor objects.</p> <p><code>new WirelessSensor()</code> Accepts the following arguments:</p> <ul> <li><code>$type =</code> Required. This is the sensor class from the table above (i.e humidity).</li> <li><code>$device_id =</code> Required. You can get this value with $this-&gt;getDeviceId()</li> <li><code>$oids =</code> Required. This must be the numerical OID for where the data   can be found, i.e .1.2.3.4.5.6.7.0. If this is an array of oids, you   should probably specify an $aggregator.</li> <li><code>$subtype =</code> Required. This should be the OS name, i.e airos.</li> <li><code>$index =</code> Required. This must be unique for this sensor type, device and subtype.   Typically it's the index from the table being walked or it could be   the name of the OID if it's a single value.</li> <li><code>$description =</code> Required. This is a descriptive value for the sensor.   Shown to the user, if this is a per-ssid statistic, using <code>SSID:   $ssid</code> here is appropriate</li> <li><code>$current =</code> Defaults to null. Can be used to set the current value on discovery.   If this is null the values will be polled right away and if they do   not return valid value(s), the sensor will not be   discovered. Supplying a value here implies you have already verified   this sensor is valid.</li> <li><code>$multiplier =</code> Defaults to 1. This is used to multiply the returned value.</li> <li><code>$divisor =</code> Defaults to 1. This is used to divided the returned value.</li> <li>$aggregator = Defaults to sum. Valid values: sum, avg. This will   combine multiple values from multiple oids into one.</li> <li><code>$access_point_id =</code> Defaults to null. If this is a wireless   controller, you can link sensors to entries in the access_points table.</li> <li><code>$high_limit =</code> Defaults to null. Sets the high limit for the sensor,   used in alerting to report out range sensors.</li> <li><code>$low_limit =</code> Defaults to null. Sets the low threshold limit for the   sensor, used in alerting to report out range sensors.</li> <li><code>$high_warn =</code> Defaults to null. Sets the high warning limit for the   sensor, used in alerting to report near out of range sensors.</li> <li><code>$low_warn =</code> Defaults to null. Sets the low warning limit for the   sensor, used in alerting to report near out of range sensors.</li> <li><code>$entPhysicalIndex =</code> Defaults to null. Sets the entPhysicalIndex to   be used to look up further hardware if available.</li> <li><code>$entPhysicalIndexMeasured =</code> Defaults to null. Sets the type of   entPhysicalIndex used, i.e ports.</li> </ul> <p>Polling is done automatically based on the discovered data.  If for some reason you need to override polling, you can implement the required polling interface in <code>LibreNMS/Interfaces/Polling/Sensors</code>. Using the polling interfaces should be avoided if possible.</p> <p>Graphing is performed automatically for wireless sensors, no custom graphing is required or supported.</p>"},{"location":"Extensions/Agent-Setup/","title":"Check_MK Setup","text":"<p>The agent can be used to gather data from remote systems you can use LibreNMS in combination with check_mk (found here). The agent can be extended to include data about applications on the remote system.</p>"},{"location":"Extensions/Agent-Setup/#installation","title":"Installation","text":""},{"location":"Extensions/Agent-Setup/#linux-bsd","title":"Linux / BSD","text":"<p>Make sure that systemd or xinetd is installed on the host you want to run the agent on.</p> <p>The agent uses TCP-Port 6556, please allow access from the LibreNMS host and poller nodes if you're using the Distributed Polling setup.</p> <p>On each of the hosts you would like to use the agent on, you need to do the following:</p> <p>1: Clone the <code>librenms-agent</code> repository:</p> <pre><code>cd /opt/\ngit clone https://github.com/librenms/librenms-agent.git\ncd librenms-agent\n</code></pre> <p>2: Copy the relevant check_mk_agent to <code>/usr/bin</code>:</p> linux freebsd <code>cp check_mk_agent /usr/bin/check_mk_agent</code> <code>cp check_mk_agent_freebsd /usr/bin/check_mk_agent</code> <pre><code>chmod +x /usr/bin/check_mk_agent\n</code></pre> <p>3: Copy the service file(s) into place.</p> xinetd systemd <code>cp check_mk_xinetd /etc/xinetd.d/check_mk</code> <code>cp check_mk@.service check_mk.socket /etc/systemd/system</code> <p>4: Create the relevant directories.</p> <pre><code>mkdir -p /usr/lib/check_mk_agent/plugins /usr/lib/check_mk_agent/local\n</code></pre> <p>5: Copy each of the scripts from <code>agent-local/</code> into <code>/usr/lib/check_mk_agent/local</code> that you require to be graphed.  You can find detail setup instructions for specific applications above.</p> <p>6: Make each one executable that you want to use with <code>chmod +x /usr/lib/check_mk_agent/local/$script</code></p> <p>7: Enable the check_mk service</p> xinetd systemd <code>/etc/init.d/xinetd restart</code> <code>systemctl enable check_mk.socket &amp;&amp; systemctl start check_mk.socket</code> <p>8: Login to the LibreNMS web interface and edit the device you want to monitor. Under the modules section, ensure that unix-agent is enabled.</p> <p>9: Then under Applications, enable the apps that you plan to monitor.</p> <p>10: Wait for around 10 minutes and you should start seeing data in your graphs under Apps for the device.</p>"},{"location":"Extensions/Agent-Setup/#restrict-the-devices-on-which-the-agent-listens-linux-systemd","title":"Restrict the devices on which the agent listens: Linux systemd","text":"<p>If you want to restrict which network adapter the agent listens on, do the following:</p> <p>1: Edit <code>/etc/systemd/system/check_mk.socket</code></p> <p>2: Under the <code>[Socket]</code> section, add a new line <code>BindToDevice=</code> and the name of your network adapter.</p> <p>3: If the script has already been enabled in systemd, you may need to issue a <code>systemctl daemon-reload</code> and then <code>systemctl restart check_mk.socket</code></p>"},{"location":"Extensions/Agent-Setup/#windows","title":"Windows","text":"<ol> <li>Grab version 1.2.6b5 of the check_mk agent from the check_mk github repo (exe/msi or compile it yourself depending on your usage): https://github.com/tribe29/checkmk/tree/v1.2.6b5/agents/windows</li> <li>Run the msi / exe</li> <li>Make sure your LibreNMS instance can reach TCP port 6556 on your target.</li> </ol>"},{"location":"Extensions/Applications/","title":"Applications","text":"<p>You can use Application support to graph performance statistics of many applications.</p> <p>Different applications support a variety of ways to collect data:</p> <ol> <li>By direct connection to the application</li> <li>snmpd extend</li> <li>The agent.</li> </ol> <p>The monitoring of applications could be added before or after the hosts have been added to LibreNMS.</p> <p>If multiple methods of collection are listed you only need to enable one.</p>"},{"location":"Extensions/Applications/#snmp-extend","title":"SNMP Extend","text":"<p>When using the <code>snmp extend</code> method, the application discovery module will pick up which applications you have set up for monitoring automatically, even if the device is already in LibreNMS. The application discovery module is enabled by default for most *nix operating systems, but in some cases you will need to manually enable the application discovery module.</p>"},{"location":"Extensions/Applications/#sudo","title":"SUDO","text":"<p>One major thing to keep in mind when using <code>SNMP extend</code> is these run as the <code>snmpd</code> user that can be an unprivileged user. In these situations you need to use <code>sudo</code>.</p> <p>To test if you need <code>sudo</code>, first check the user <code>snmpd</code> is running as. Then test if you can run the extend script as that user without issue.</p> <p>Example</p> <p>If <code>snmpd</code> is running as <code>Debian-snmp</code> and we want to run the extend for proxmox, we check that the following run without error:</p> <pre><code>sudo -u Debian-snmp /usr/local/bin/proxmox\n</code></pre> <p>If it doesn't work, then you will need to use sudo with the extend command. For the example above, that would mean adding the line below to the sudoers file:</p> <pre><code>Debian-snmp ALL = NOPASSWD: /usr/local/bin/proxmox\n</code></pre> <p>Finally we would need to add sudo to the extend command, which would look like that for proxmox:</p> <pre><code>extend proxmox /usr/bin/sudo /usr/local/bin/proxmox\n</code></pre>"},{"location":"Extensions/Applications/#restart-snmpd","title":"Restart snmpd","text":"SystemdXinetd <pre><code>sudo systemctl restart snmpd\n</code></pre> <pre><code>sudo service snmpd restart\n</code></pre>"},{"location":"Extensions/Applications/#json-return-optimization-using-librenms_return_optimizer","title":"JSON Return Optimization Using librenms_return_optimizer","text":"<p>While the <code>json_app_get</code> does allow for more complex and larger data to be easily returned by a extend and the data to then be worked with, this can also sometimes result in large returns that occasionally don't play nice with SNMP on some networks.</p> <p><code>librenms_return_optimizer</code> fixes this via taking the extend output piped to it, gzipping it, and then converting it to base64. The later is needed as net-snmp does not play that nice with binary data, converting most of the non-printable characters to <code>.</code>. This does add a bit of additional overhead to the gzipped data, but still tends to be result in a return that is usually a third of the size for JSONs items.</p> <p>The change required is fairly simply. So for the portactivity example below...</p> <pre><code>extend portactivity /etc/snmp/extends/portactivity smtps,http,imap,imaps,postgresql,https,ldap,ldaps,nfsd,syslog-conn,ssh,matrix,gitea\n</code></pre> <p>Would become this...</p> <pre><code>extend portactivity /usr/local/bin/lnms_return_optimizer -- /etc/snmp/extends/portactivity smtps,http,imap,imaps,postgresql,https,ldap,ldaps,nfsd,syslog-conn,ssh,matrix,gitea\n</code></pre> <p>The requirements for this are <code>Perl</code>, <code>MIME::Base64</code>, and <code>Gzip::Faster</code>.</p> FreeBSD <pre><code>pkg install p5-MIME-Base64 p5-Gzip-Faster wget\nwget https://raw.githubusercontent.com/librenms/librenms-agent/master/utils/librenms_return_optimizer -O /usr/local/bin/librenms_return_optimizer\nchmod +x /usr/local/bin/librenms_return_optimizer\n</code></pre> Debian/Ubuntu <pre><code>apt-get install zlib1g-dev cpanminus wget\ncpanm Gzip::Faster\ncpanm MIME::Base64\nwget https://raw.githubusercontent.com/librenms/librenms-agent/master/utils/librenms_return_optimizer -O /usr/local/bin/librenms_return_optimizer\nchmod +x /usr/local/bin/librenms_return_optimizer\n</code></pre> CentOS/RedHat <pre><code>yum install zlib-devel perl-CPAN wget\ncpan Gzip::Faster\ncpan MIME::Base64\nwget https://raw.githubusercontent.com/librenms/librenms-agent/master/utils/librenms_return_optimizer -O /usr/local/bin/librenms_return_optimizer\nchmod +x /usr/local/bin/librenms_return_optimizer\n</code></pre> <p>Currently supported applications as are below.</p> <ul> <li>backupninja</li> <li>certificate</li> <li>chronyd</li> <li>dhcp-stats</li> <li>docker</li> <li>fail2ban</li> <li>fbsd-nfs-client</li> <li>fbsd-nfs-server</li> <li>gpsd</li> <li>mailcow-postfix</li> <li>mdadm</li> <li>ntp-client</li> <li>ntp-server</li> <li>portactivity</li> <li>powerdns</li> <li>powermon</li> <li>puppet-agent</li> <li>pureftpd</li> <li>redis</li> <li>seafile</li> <li>supervisord</li> <li>ups-apcups</li> <li>zfs</li> </ul> <p>The following apps have extends that have native support for this, if congiured to do so.</p> <ul> <li>suricata</li> </ul>"},{"location":"Extensions/Applications/#enable-the-application-discovery-module","title":"Enable the application discovery module","text":"<ol> <li>Edit the device for which you want to add this support</li> <li>Click on the Modules tab and enable the <code>applications</code> module.</li> <li>This will be automatically saved, and you should get a green    confirmation pop-up message.</li> </ol> <p>After you have enabled the application module, it would be wise to then also enable which applications you want to monitor, in the rare case where LibreNMS does not automatically detect it.</p> <p>Note: Only do this if an application was not auto-discovered by LibreNMS during discovery and polling.</p>"},{"location":"Extensions/Applications/#enable-the-applications-to-be-discovered","title":"Enable the application(s) to be discovered","text":"<ol> <li>Go to the device you have just enabled the application module for.</li> <li>Click on the Applications tab and select the applications you    want to monitor.</li> <li>This will also be automatically saved, and you should get a green    confirmation pop-up message.</li> </ol>"},{"location":"Extensions/Applications/#agent","title":"Agent","text":"<p>The unix-agent does not have a discovery module, only a poller module. That poller module is always disabled by default. It needs to be manually enabled if using the agent. Some applications will be automatically enabled by the unix-agent poller module. It is better to ensure that your application is enabled for monitoring. You can check by following the steps under the <code>SNMP Extend</code> heading.</p>"},{"location":"Extensions/Authentication/","title":"Authentication Options","text":"<p>LibreNMS supports multiple authentication modules along with Two Factor Auth. Here we will provide configuration details for these modules. Alternatively, you can use Socialite Providers which supports a wide variety of social/OAuth/SAML authentication methods.</p>"},{"location":"Extensions/Authentication/#available-authentication-modules","title":"Available authentication modules","text":"<ul> <li> <p>MySQL: mysql</p> </li> <li> <p>Active Directory: active_directory</p> </li> <li> <p>LDAP: ldap</p> </li> <li> <p>Radius: radius</p> </li> <li> <p>HTTP Auth: http-auth,   ad_authorization,   ldap_authorization</p> </li> <li> <p>Single Sign-on: sso</p> </li> </ul> <p>\u26a0\ufe0f When enabling a new authentication module, the local users will no longer be available to log in.</p>"},{"location":"Extensions/Authentication/#enable-authentication-module","title":"Enable authentication module","text":"<p>To enable a particular authentication module you need to set this up in config.php. Please note that only ONE module can be enabled. LibreNMS doesn't support multiple authentication mechanisms at the same time.</p> <p>auth/general</p> <pre><code>lnms config:set auth_mechanism mysql\n</code></pre>"},{"location":"Extensions/Authentication/#built-in-user-roles-and-user-account-type","title":"Built-in user roles and User account type","text":"<ul> <li> <p>user: You will need to assign device / port   permissions for users in this role.</p> </li> <li> <p>global-read: Read only Administrator.</p> </li> <li> <p>admin: This is a global read/write admin account.</p> </li> <li> <p>demo: Provides full read/write with certain   restrictions (i.e can't delete devices). Do not use this role.</p> </li> </ul> <p>Note Oxidized configs can often contain sensitive data. Because of that only Administrator account type can see configs.</p>"},{"location":"Extensions/Authentication/#note-for-selinux-users","title":"Note for SELinux users","text":"<p>When using SELinux on the LibreNMS server, you need to allow Apache (httpd) to connect LDAP/Active Directory server, this is disabled by default. You can use SELinux Booleans to allow network access to LDAP resources with this command:</p> <pre><code>setsebool -P httpd_can_connect_ldap=1\n</code></pre>"},{"location":"Extensions/Authentication/#testing-authentication","title":"Testing authentication","text":"<p>You can test authentication with this script:</p> <pre><code>./scripts/auth_test.php\n</code></pre> <p>Enable debug output to troubleshoot issues</p>"},{"location":"Extensions/Authentication/#mysql-authentication","title":"MySQL Authentication","text":"<p>auth/general</p> <pre><code>lnms config:set auth_mechanism mysql\n</code></pre> <p>This is default option with LibreNMS so you should have already have the following configuration setup in your environment file (.env).</p> <pre><code>DB_HOST=HOSTNAME\nDB_DATABASE=DBNAME\nDB_USERNAME=DBUSER\nDB_PASSWORD=\"DBPASS\"\n</code></pre>"},{"location":"Extensions/Authentication/#active-directory-authentication","title":"Active Directory Authentication","text":"<p>auth/general</p> <pre><code>lnms config:set auth_mechanism active_directory\n</code></pre> <p>Install php-ldap  or php8.1-ldap, making sure to install the same version as PHP.</p> <p>If you have issues with secure LDAP try setting</p> <p>auth/ad</p> <pre><code>lnms config:set auth_ad_check_certificates 0\n</code></pre> <p>this will ignore certificate errors.</p>"},{"location":"Extensions/Authentication/#require-actual-membership-of-the-configured-groups","title":"Require actual membership of the configured groups","text":"<p>auth/ad</p> <pre><code>lnms config:set auth_ad_require_groupmembership 1\n</code></pre> <p>If you set <code>auth_ad_require_groupmembership</code> to 1, the authenticated user has to be a member of the specific group. Otherwise all users can authenticate, and will have no default roles or you may set <code>auth_ad_global_read</code> to 1 and all users will have the role 'global-read' and have read only access to all devices.</p>"},{"location":"Extensions/Authentication/#old-account-cleanup","title":"Old account cleanup","text":"<p>Cleanup of old accounts is done by checking the authlog. You will need to set the number of days when old accounts will be purged AUTOMATICALLY by daily.sh.</p> <p>Please ensure that you set the <code>authlog_purge</code> value to be greater than <code>active_directory.users_purge</code> otherwise old users won't be removed.</p>"},{"location":"Extensions/Authentication/#sample-configuration","title":"Sample configuration","text":"<p>auth/general</p> <pre><code>lnms config:set auth_mechanism active_directory\nlnms config:set auth_ad_url ldaps://server.example.com\nlnms config:set auth_ad_domain\nlnms config:set auth_ad_base_dn dc=example,dc=com\nlnms config:set auth_ad_check_certificates true\nlnms config:set auth_ad_binduser examplebinduser\nlnms config:set auth_ad_bindpassword examplepassword\nlnms config:set auth_ad_timeout 5\nlnms config:set auth_ad_debug false\nlnms config:set active_directory.users_purge 30\nlnms config:set auth_ad_require_groupmembership true\nlnms config:set auth_ad_groups.ad-admingroup.roles [\"admin\"]\nlnms config:set auth_ad_groups.ad-usergroup.roles [\"global-read\"]\n</code></pre> <p>Replace <code>ad-admingroup</code> with your Active Directory admin-user group and <code>ad-usergroup</code> with your standard user group. It is highly suggested to create a bind user, otherwise \"remember me\", alerting users, and the API will not work.</p>"},{"location":"Extensions/Authentication/#active-directory-redundancy","title":"Active Directory redundancy","text":"<p>You can set two Active Directory servers by editing the <code>auth_ad_url</code> setting like this example:</p> <p>auth/ad</p> <pre><code>lnms config:set auth_ad_url \"ldaps://dc1.example.com ldaps://dc2.example.com\"\n</code></pre>"},{"location":"Extensions/Authentication/#active-directory-ldap-filters","title":"Active Directory LDAP filters","text":"<p>You can add an LDAP filter to be ANDed with the builtin user filter (<code>(sAMAccountName=$username)</code>).</p> <p>The defaults are:</p> <p>auth/ad</p> <pre><code>lnms config:set auth_ad_user_filter \"(objectclass=user)\"\nlnms config:set auth_ad_group_filter \"(objectclass=group)\"\n</code></pre> <p>This yields <code>(&amp;(objectclass=user)(sAMAccountName=$username))</code> for the user filter and <code>(&amp;(objectclass=group)(sAMAccountName=$group))</code> for the group filter.</p>"},{"location":"Extensions/Authentication/#selinux-configuration","title":"SELinux configuration","text":"<p>On RHEL / CentOS / Fedora, in order for LibreNMS to reach Active Directory, you need to allow LDAP requests in SELinux: <pre><code>setsebool -P httpd_can_connect_ldap 1\n</code></pre></p>"},{"location":"Extensions/Authentication/#ldap-authentication","title":"LDAP Authentication","text":"<p>auth/general</p> <pre><code>lnms config:set auth_mechanism ldap\n</code></pre> <p>Install php_ldap or php7.0-ldap, making sure to install the same version as PHP.</p> <p>For the below, keep in mind the auth DN is composed using a string join of <code>auth_ldap_prefix</code>, the username, and <code>auth_ldap_suffix</code>. This means it needs to include <code>=</code> in the prefix and <code>,</code> in the suffix. So lets say we have a prefix of <code>uid=</code>, the user <code>derp</code>, and the suffix of <code>,ou=users,dc=foo,dc=bar</code>, then the result is <code>uid=derp,ou=users,dc=foo,dc=bar</code>.</p>"},{"location":"Extensions/Authentication/#standard-config","title":"Standard config","text":"<p>auth/ldap</p> <pre><code>lnms config:set auth_ldap_server ldap.example.com\nlnms config:set auth_ldap_suffix ',ou=People,dc=example,dc=com'\nlnms config:set auth_ldap_groupbase 'ou=groups,dc=example,dc=com'\nlnms config:set auth_ldap_groups.admin.roles [\"admin\"]\nlnms config:set auth_ldap_groups.pfy.roles [\"global-read\"]\nlnms config:set auth_ldap_groups.support.roles [\"user\"]\n</code></pre>"},{"location":"Extensions/Authentication/#additional-options-usually-not-needed","title":"Additional options (usually not needed)","text":"<p>auth/ldap</p> <pre><code>lnms config:set auth_ldap_version 3\nlnms config:set auth_ldap_port 389\nlnms config:set auth_ldap_starttls true\nlnms config:set auth_ldap_prefix 'uid='\nlnms config:set auth_ldap_group 'cn=groupname,ou=groups,dc=example,dc=com'\nlnms config:set auth_ldap_groupmemberattr memberUid\nlnms config:set auth_ldap_groupmembertype username\nlnms config:set auth_ldap_uid_attribute uidnumber\nlnms config:set auth_ldap_timeout 5\nlnms config:set auth_ldap_emailattr mail\nlnms config:set auth_ldap_attr.uid uid\nlnms config:set auth_ldap_debug false\nlnms config:set auth_ldap_userdn true\nlnms config:set auth_ldap_userlist_filter service=informatique\nlnms config:set auth_ldap_wildcard_ou false\nlnms config:set auth_ldap_cacertfile /opt/librenms/ldap-ca-cert\nlnms config:set auth_ldap_ignorecert false\n</code></pre>"},{"location":"Extensions/Authentication/#ldap-bind-user-optional","title":"LDAP bind user (optional)","text":"<p>If your ldap server does not allow anonymous bind, it is highly suggested to create a bind user, otherwise \"remember me\", alerting users, and the API will not work.</p> <p>auth/ldap</p> <pre><code>lnms config:set auth_ldap_binduser ldapbind\nlnms config:set auth_ldap_binddn 'CN=John.Smith,CN=Users,DC=MyDomain,DC=com'\nlnms config:set auth_ldap_bindpassword password\n</code></pre>"},{"location":"Extensions/Authentication/#ldap-server-redundancy","title":"LDAP server redundancy","text":"<p>You can set two LDAP servers by editing the <code>auth_ldap_server</code> like this example:</p> <p>auth/ldap</p> <pre><code>lnms config:set auth_ldap_server ldaps://dir1.example.com ldaps://dir2.example.com\n</code></pre> <p>An example config setup for use with Jumpcloud LDAP as a service is:</p> <p>auth/ldap</p> <pre><code>lnms config:set auth_mechanism ldap\nlnms config:set auth_ldap_version 3\nlnms config:set auth_ldap_server ldap.jumpcloud.com\nlnms config:set auth_ldap_port 389\nlnms config:set auth_ldap_prefix 'uid=';\nlnms config:set auth_ldap_suffix ',ou=Users,o={id},dc=jumpcloud,dc=com'\nlnms config:set auth_ldap_groupbase 'ou=Users,o={id},dc=jumpcloud,dc=com'\nlnms config:set auth_ldap_groupmemberattr member\nlnms config:set auth_ldap_groups.{group}.roles [\"admin\"]\nlnms config:set auth_ldap_userdn true\n</code></pre> <p>Replace {id} with the unique ID provided by Jumpcloud.  Replace {group} with the unique group name created in Jumpcloud.  This field is case sensitive.</p> <p>Note: If you have multiple user groups to define individual access roles replace the <code>auth_ldap_groups</code> line with the following:</p> <p>auth/ldap</p> <pre><code>lnms config:set auth_ldap_groups.{admin_group}.roles [\"admin\"]\nlnms config:set auth_ldap_groups.{global_readonly_group}.roles [\"global-read\"]\n</code></pre>"},{"location":"Extensions/Authentication/#selinux-configuration_1","title":"SELinux configuration","text":"<p>On RHEL / CentOS / Fedora, in order for LibreNMS to reach LDAP, you need to allow LDAP requests in SELinux: <pre><code>setsebool -P httpd_can_connect_ldap 1\n</code></pre></p>"},{"location":"Extensions/Authentication/#radius-authentication","title":"Radius Authentication","text":"<p>Please note that a mysql user is created for each user the logs in successfully. Users are assigned the <code>user</code> role by default, unless radius sends a reply attribute with a role.</p> <p>You can change the default role(s) by setting</p> <p>auth/radius</p> <pre><code>lnms config:set radius.default_roles '[\"csr\"]'\n</code></pre> <p>The attribute <code>Filter-ID</code> is a standard Radius-Reply-Attribute (string) that can be assigned a specially formatted string to assign a single role to the user.</p> <p>The string to send in <code>Filter-ID</code> reply attribute must start with <code>librenms_role_</code> followed by the role name. For example to set the admin role send <code>librenms_role_admin</code>.</p> <p>The following strings correspond to the built-in roles, but any defined role can be used: - <code>librenms_role_normal</code> - Sets the normal user . - <code>librenms_role_admin</code> - Sets the administrator role. - <code>librenms_role_global-read</code> - Sets the global-read role</p> <p>LibreNMS will ignore any other strings sent in <code>Filter-ID</code> and revert to default role that is set in your config.</p> <p>auth/radius</p> <pre><code>lnms config:set radius.hostname localhost\nlnms config:set radius.port 1812\nlnms config:set radius.secret testing123\nlnms config:set radius.timeout 3\nlnms config:set radius.users_purge 14\nlnms config:set radius.default_roles [\"admin\"]\n</code></pre>"},{"location":"Extensions/Authentication/#radius-huntgroup","title":"Radius Huntgroup","text":"<p>Freeradius has a function called <code>Radius Huntgroup</code> which allows to send different attributes based on NAS. This may be utilized if you already use <code>Filter-ID</code> in your environment and also want to use radius with LibreNMS.</p>"},{"location":"Extensions/Authentication/#old-account-cleanup_1","title":"Old account cleanup","text":"<p>Cleanup of old accounts is done by checking the authlog. You will need to set the number of days when old accounts will be purged AUTOMATICALLY by daily.sh.</p> <p>Please ensure that you set the <code>authlog_purge</code> value to be greater than <code>radius.users_purge</code> otherwise old users won't be removed.</p>"},{"location":"Extensions/Authentication/#http-authentication","title":"HTTP Authentication","text":"<p>Config option: <code>http-auth</code></p> <p>LibreNMS will expect the user to have authenticated via your webservice already. At this stage it will need to assign a local user for that user which is done in one of two ways:</p> <ul> <li> <p>A user exists in MySQL still where the usernames match up.</p> </li> <li> <p>A global guest user (which still needs to be added into MySQL:</p> </li> </ul> <p>auth/http</p> <pre><code>lnms config:set http_auth_guest guest\n</code></pre> <p>This will then assign the guest user to all authenticated users.</p>"},{"location":"Extensions/Authentication/#http-authentication-ad-authorization","title":"HTTP Authentication / AD Authorization","text":"<p>Config option: <code>ad-authorization</code></p> <p>This module is a combination of http-auth and active_directory</p> <p>LibreNMS will expect the user to have authenticated via your webservice already (e.g. using Kerberos Authentication in Apache) but will use Active Directory lookups to determine and assign the role(s) of a user. The roles will be calculated by using AD group membership information as the active_directory module does.</p> <p>The configuration is the same as for the active_directory module with two extra, optional options: auth_ad_binduser and auth_ad_bindpassword. These should be set to a AD user with read capabilities in your AD Domain in order to be able to perform searches. If these options are omitted, the module will attempt an anonymous bind (which then of course must be allowed by your Active Directory server(s)).</p> <p>There is also one extra option for controlling user information caching: auth_ldap_cache_ttl. This option allows to control how long user information (user_exists, userid, roles) are cached within the PHP Session. The default value is 300 seconds. To disable this caching (highly discourage) set this option to 0.</p> <p>auth/ad</p> <pre><code>lnms config:set auth_ad_binduser ad_binduser\nlnms config:set auth_ad_bindpassword ad_bindpassword\nlnms config:set auth_ldap_cache_ttl 300\n</code></pre>"},{"location":"Extensions/Authentication/#http-authentication-ldap-authorization","title":"HTTP Authentication / LDAP Authorization","text":"<p>Config option: <code>ldap-authorization</code></p> <p>This module is a combination of http-auth and ldap</p> <p>LibreNMS will expect the user to have authenticated via your webservice already (e.g. using Kerberos Authentication in Apache) but will use LDAP to determine and assign the role(s) of a user. The roles will be calculated by using LDAP group membership information as the ldap module does.</p> <p>The configuration is similar to the ldap module with one extra option: auth_ldap_cache_ttl. This option allows to control how long user information (user_exists, userid, roles) are cached within the PHP Session. The default value is 300 seconds. To disabled this caching (highly discourage) set this option to 0.</p>"},{"location":"Extensions/Authentication/#standard-config_1","title":"Standard config","text":"<p>auth/ldap</p> <pre><code>lnms config:set auth_mechanism authorization\nlnms config:set auth_ldap_server ldap.example.com\nlnms config:set auth_ldap_suffix ,ou=People,dc=example,dc=com\nlnms config:set auth_ldap_groupbase ou=groups,dc=example,dc=com\nlnms config:set auth_ldap_groups.admin.roles [\"admin\"]\nlnms config:set auth_ldap_groups.pfy.roles [\"global-read\"]\nlnms config:set auth_ldap_groups.support.roles [\"user\"]\n</code></pre> <p>auth_ldap_server: set server(s), space separated. Prefix with ldaps:// for ssl auth_ldap_suffix: appended to usernames auth_ldap_groupbase: all groups must be inside this auth_ldap_groups: set roles by group name</p>"},{"location":"Extensions/Authentication/#additional-options-usually-not-needed_1","title":"Additional options (usually not needed)","text":"<p>auth/ldap</p> <pre><code>lnms config:set auth_ldap_version 3\nlnms config:set auth_ldap_port 389\nlnms config:set auth_ldap_starttls true\nlnms config:set auth_ldap_prefix uid=\nlnms config:set auth_ldap_group cn=groupname,ou=groups,dc=example,dc=com\nlnms config:set auth_ldap_groupmemberattr memberUid\nlnms config:set auth_ldap_groupmembertype username\nlnms config:set auth_ldap_userlist_filter service=informatique\nlnms config:set auth_ldap_cache_ttl 300\n</code></pre> <p>auth_ldap_port: 389 or 636 for ssl auth_ldap_prefix: prepended to usernames auth_ldap_group: generic group with no roles auth_ldap_groupmemberattr: attribute to use to see if a user is a member of a group auth_ldap_groupmembertype: username type to find group members by, either username (default), fulldn or puredn auth_ldap_userlist_filter: Replace 'service=informatique' by your ldap filter to limit the number of responses if you have an ldap directory with thousand of users</p>"},{"location":"Extensions/Authentication/#ldap-bind-user-optional_1","title":"LDAP bind user (optional)","text":"<p>If your ldap server does not allow anonymous bind, it is highly suggested to create a bind user, otherwise \"remember me\", alerting users, and the API will not work.</p> <p>auth/ldap</p> <pre><code>lnms config:set auth_ldap_binduser ldapbind\nlnms config:set auth_ldap_binddn CN=John.Smith,CN=Users,DC=MyDomain,DC=com\nlnms config:set auth_ldap_bindpassword password\n</code></pre> <p>auth_ldap_binddn: overrides auth_ldap_binduser with a dn</p>"},{"location":"Extensions/Authentication/#viewembedded-graphs-without-being-logged-into-librenms","title":"View/embedded graphs without being logged into LibreNMS","text":"<p>webui/graph</p> <pre><code>lnms config:set allow_unauth_graphs_cidr '[\"127.0.0.1/32\"]'\nlnms config:set allow_unauth_graphs true\n</code></pre>"},{"location":"Extensions/Authentication/#single-sign-on","title":"Single Sign-on","text":"<p>The single sign-on mechanism is used to integrate with third party authentication providers that are managed outside of LibreNMS - such as ADFS, Shibboleth, EZProxy, BeyondCorp, and others. A large number of these methods use SAML the module has been written assuming the use of SAML, and therefore these instructions contain some SAML terminology, but it should be possible to use any software that works in a similar way.</p> <p>In order to make use of the single sign-on module, you need to have an Identity Provider up and running, and know how to configure your Relying Party to pass attributes to LibreNMS via header injection or environment variables. Setting these up is outside of the scope of this documentation.</p> <p>As this module deals with authentication, it is extremely careful about validating the configuration - if it finds that certain values in the configuration are not set, it will reject access rather than try and guess.</p>"},{"location":"Extensions/Authentication/#basic-configuration","title":"Basic Configuration","text":"<p>To get up and running, all you need to do is configure the following values:</p> <pre><code>$config['auth_mechanism']        = \"sso\";\n$config['sso']['mode']           = \"env\";\n$config['sso']['group_strategy'] = \"static\";\n$config['sso']['static_level']   = 10;\n</code></pre> <p>This, along with the defaults, sets up a basic Single Sign-on setup that:</p> <ul> <li>Reads values from environment variables</li> <li>Automatically creates users when they're first seen</li> <li>Automatically updates users with new values</li> <li>Gives everyone privilege level 10</li> </ul> <p>This happens to mimic the behaviour of http-auth, so if this is the kind of setup you want, you're probably better of just going and using that mechanism.</p>"},{"location":"Extensions/Authentication/#security","title":"Security","text":"<p>If there is a proxy involved (e.g. EZProxy, Azure AD Application Proxy, NGINX, mod_proxy) it's essential that you have some means in place to prevent headers being injected between the proxy and the end user, and also prevent end users from contacting LibreNMS directly.</p> <p>This should also apply to user connections to the proxy itself - the proxy must not be allowed to blindly pass through HTTP headers. modsecurity_ should be considered a minimum, with a full WAF being strongly recommended. This advice applies to the IDP too.</p> <p>The mechanism includes very basic protection, in the form of an IP whitelist with should contain the source addresses of your proxies:</p> <pre><code>$config['sso']['trusted_proxies'] = ['127.0.0.1/8', '::1/128', '192.0.2.0', '2001:DB8::'];\n</code></pre> <p>This configuration item should contain an array with a list of IP addresses or CIDR prefixes that are allowed to connect to LibreNMS and supply environment variables or headers.</p>"},{"location":"Extensions/Authentication/#advanced-configuration-options","title":"Advanced Configuration Options","text":""},{"location":"Extensions/Authentication/#user-attribute","title":"User Attribute","text":"<p>If for some reason your relying party doesn't store the username in REMOTE_USER, you can override this choice.</p> <pre><code>$config['sso']['user_attr'] = 'HTTP_UID';\n</code></pre> <p>Note that the user lookup is a little special - normally headers are prefixed with HTTP_, however this is not the case for remote user - it's a special case. If you're using something different you need to figure out of the HTTP_ prefix is required or not yourself.</p>"},{"location":"Extensions/Authentication/#automatic-user-createupdate","title":"Automatic User Create/Update","text":"<p>These are enabled by default:</p> <pre><code>$config['sso']['create_users'] = true;\n$config['sso']['update_users'] = true;\n</code></pre> <p>If these are not enabled, user logins will be (somewhat silently) rejected unless an administrator has created the account in advance. Note that in the case of SAML federations, unless release of the users true identity has been negotiated with the IDP, the username (probably ePTID) is not likely to be predicable.</p>"},{"location":"Extensions/Authentication/#personalisation","title":"Personalisation","text":"<p>If the attributes are being populated, you can instruct the mechanism to add additional information to the user's database entry:</p> <pre><code>$config['sso']['email_attr']    = \"mail\";\n$config['sso']['realname_attr'] = \"displayName\";\n$config['sso']['descr_attr']    = \"unscoped-affiliation\n</code></pre>"},{"location":"Extensions/Authentication/#group-strategies","title":"Group Strategies","text":"<p>SSO currently uses legacy levels instead of roles. Here is a map: 1. user 5. global-read 10. admin 11. demo</p>"},{"location":"Extensions/Authentication/#static","title":"Static","text":"<p>As used above, static gives every single user the same privilege level. If you're working with a small team, or don't need access control, this is probably suitable.</p>"},{"location":"Extensions/Authentication/#attribute","title":"Attribute","text":"<pre><code>$config['sso']['group_strategy'] = \"attribute\";\n$config['sso']['level_attr']     = \"entitlement\";\n</code></pre> <p>If your Relying Party is capable of calculating the necessary privilege level, you can configure the module to read the privilege number straight from an attribute. sso_level_attr should contain the name of the attribute that the Relying Party exposes to LibreNMS - as long as sso_mode is correctly set, the mechanism should find the value.</p>"},{"location":"Extensions/Authentication/#group-map","title":"Group Map","text":"<p>This is the most flexible (and complex) way of assigning privileges.</p> <pre><code>$config['sso']['group_strategy']  = \"map\";\n$config['sso']['group_attr']      = \"member\";\n$config['sso']['group_level_map'] = ['librenms-admins' =&gt; 10, 'librenms-readers' =&gt; 1, 'librenms-billingcontacts' =&gt; 5];\n$config['sso']['group_delimiter'] = ';';\n</code></pre> <p>This mechanism expects to find a delimited list of groups within the attribute that sso_group_attr points to. This should be an associative array of group name keys, with privilege levels as values. The mechanism will scan the list and find the highest privilege level that the user is entitled to, and assign that value to the user.</p> <p>If there are no matches between the user's groups and the sso_group_level_map, the user will be assigned the privilege level specified in the sso_static_level variable, with a default of 0 (no access). This feature can be used to provide a default access level (such as read-only) to all authenticated users.</p> <p>Additionally, this format may be specific to Shibboleth; other relying party software may need changes to the mechanism (e.g. mod_auth_mellon may create pseudo arrays).</p> <p>There is an optional value for sites with large numbers of groups:</p> <pre><code>$config['sso']['group_filter']  = \"/librenms-(.*)/i\";\n</code></pre> <p>This filter causes the mechanism to only consider groups matching a regular expression.</p>"},{"location":"Extensions/Authentication/#logout-behaviour","title":"Logout Behaviour","text":"<p>LibreNMS has no capability to log out a user authenticated via Single Sign-On - that responsibility falls to the Relying Party.</p> <p>If your Relying Party has a magic URL that needs to be called to end a session, you can configure LibreNMS to direct the user to it:</p> <pre><code># Example for Shibboleth\n$config['auth_logout_handler'] = '/Shibboleth.sso/Logout';\n\n# Example for oauth2-proxy\n$config['auth_logout_handler'] = '/oauth2/sign_out';\n</code></pre> <p>This option functions independently of the Single Sign-on mechanism.</p>"},{"location":"Extensions/Authentication/#complete-configuration","title":"Complete Configuration","text":"<p>This configuration works on my deployment with a Shibboleth relying party, injecting environment variables, with the IDP supplying a list of groups.</p> <pre><code>$config['auth_mechanism'] = 'sso';\n$config['auth_logout_handler'] = '/Shibboleth.sso/Logout';\n$config['sso']['mode'] = 'env';\n$config['sso']['create_users'] = true;\n$config['sso']['update_users'] = true;\n$config['sso']['realname_attr'] = 'displayName';\n$config['sso']['email_attr'] = 'mail';\n$config['sso']['group_strategy'] = 'map';\n$config['sso']['group_attr'] = 'member';\n$config['sso']['group_filter'] = '/(librenms-.*)/i';\n$config['sso']['group_delimiter'] = ';';\n$config['sso']['group_level_map'] = ['librenms-demo' =&gt; 11, 'librenms-globaladmin' =&gt; 10, 'librenms-globalread' =&gt; 5, 'librenms-lowpriv'=&gt; 1];\n</code></pre>"},{"location":"Extensions/Auto-Discovery/","title":"Auto Discovery Support","text":""},{"location":"Extensions/Auto-Discovery/#getting-started","title":"Getting Started","text":"<p>LibreNMS provides the ability to automatically add devices on your network, we can do this via a few methods which will be explained below and also indicate if they are enabled by default.</p> <p>All discovery methods run when discovery runs (every 6 hours by default and within 5 minutes for new devices).</p> <p>Please note that you need at least ONE device added before auto-discovery will work.</p> <p>The first thing to do though is add the required configuration options.</p>"},{"location":"Extensions/Auto-Discovery/#snmp-details","title":"SNMP Details","text":"<p>To add devices automatically we need to know your snmp details, examples of SNMP v1, v2c and v3 are below:</p> <p>poller/snmp</p> <pre><code>lnms config:set snmp.community.+ my_custom_community\nlnms config:set snmp.community.+ another_community\n\nlnms config:set snmp.v3.+ '{\n    \"authlevel\": \"authPriv\",\n    \"authname\": \"my_username\",\n    \"authpass\": \"my_password\",\n    \"authalgo\": \"SHA\",\n    \"cryptopass\": \"my_crypto\",\n    \"cryptoalgo\": \"AES\"\n}'\n</code></pre> <p>These details will be attempted when adding devices, you can specify any mixture of these.</p>"},{"location":"Extensions/Auto-Discovery/#allowed-networks","title":"Allowed Networks","text":""},{"location":"Extensions/Auto-Discovery/#your-networks","title":"Your Networks","text":"<p>To add devices, we need to know what are your subnets so we don't go blindly attempting to add devices not under your control.</p> <p>discovery/networks</p> <pre><code>lnms config:set nets.+ '192.168.0.0/24'\nlnms config:set nets.+ '172.2.4.0/22'\n</code></pre>"},{"location":"Extensions/Auto-Discovery/#exclusions","title":"Exclusions","text":"<p>If you have added a network as above but a single device exists within it that you can't auto add, then you can exclude this with the following:</p> <p>discovery/networks</p> <pre><code>lnms config:set autodiscovery.nets-exclude.+ '192.168.0.1/32'\n</code></pre>"},{"location":"Extensions/Auto-Discovery/#additional-options","title":"Additional Options","text":""},{"location":"Extensions/Auto-Discovery/#discovering-devices-by-ip","title":"Discovering devices by IP","text":"<p>By default we don't add devices by IP address, we look for a reverse dns name to be found and add with that. If this fails and you would like to still add devices automatically then you will need to set <code>$config['discovery_by_ip'] = true;</code></p>"},{"location":"Extensions/Auto-Discovery/#short-hostnames","title":"Short hostnames","text":"<p>If your devices only return a short hostname such as lax-fa0-dc01 but the full name should be lax-fa0-dc01.example.com then you can set</p> <p>discovery/general</p> <pre><code>lnms config:set mydomain example.com\n</code></pre>"},{"location":"Extensions/Auto-Discovery/#allow-duplicate-sysname","title":"Allow Duplicate sysName","text":"<p>By default we require unique sysNames when adding devices (this is returned over snmp by your devices). If you would like to allow devices to be added with duplicate sysNames then please set</p> <p>discovery/discovery_modules</p> <pre><code>lnms config:set allow_duplicate_sysName true\n</code></pre>"},{"location":"Extensions/Auto-Discovery/#discovery-methods","title":"Discovery Methods","text":"<p>Below are the methods for auto discovering devices.  Each one can be enabled or disabled and may have additional configuration options.</p>"},{"location":"Extensions/Auto-Discovery/#arp","title":"ARP","text":"<p>Disabled by default.</p> <p>Adds devices that are listed in another device's arp table.  This module depends on the arp-table module being enabled and returning data.</p> <p>To enable, switch on globally the <code>discovery_modules.discovery-arp</code> or per device within the Modules section.</p> <p>discovery/discovery_modules</p> <pre><code>lnms config:set discovery_modules.discovery-arp true\n</code></pre>"},{"location":"Extensions/Auto-Discovery/#xdp","title":"XDP","text":"<p>Enabled by default. Can be disabled with:</p> <p>discovery/autodiscovery</p> <pre><code>lnms config:set autodiscovery.xdp false\n</code></pre> <p>This includes FDP, CDP and LLDP support based on the device type.</p> <p>The LLDP/xDP links with neighbours will always be discovered as soon as the discovery module is enabled. However, LibreNMS will only try to add the new devices discovered with LLDP/xDP if <code>$config['autodiscovery']['xdp'] = true;</code>.</p> <p>Devices may be excluded from xdp discovery by sysName and sysDescr.</p> <p>discovery/autodiscovery</p> <pre><code>lnms config:set autodiscovery.xdp_exclude.sysname_regexp.+ '/host1/'\nlnms config:set autodiscovery.xdp_exclude.sysname_regexp.+ '/^dev/'\n\nlnms config:set autodiscovery.xdp_exclude.sysdescr_regexp.+ '/-K9W8/'\nlnms config:set autodiscovery.xdp_exclude.sysdescr_regexp.+ '/Vendor X/'\n</code></pre> <p>Devices may be excluded from cdp discovery by platform. (CDP only)</p> <p>discovery/autodiscovery</p> <pre><code>lnms config:set autodiscovery.cdp_exclude.platform_regexp.+ '/WS-C3750G/'\nlnms config:set autodiscovery.cdp_exclude.platform_regexp.+ '/^Cisco IP Phone/'\n</code></pre>"},{"location":"Extensions/Auto-Discovery/#ospf","title":"OSPF","text":"<p>Enabled by default.</p> <p>discovery/autodiscovery</p> <pre><code>lnms config:set autodiscovery.ospf false\n</code></pre>"},{"location":"Extensions/Auto-Discovery/#ospfv3","title":"OSPFv3","text":"<p>Enabled by default.</p> <p>discovery/autodiscovery</p> <pre><code>lnms config:set autodiscovery.ospfv3 false\n</code></pre>"},{"location":"Extensions/Auto-Discovery/#bgp","title":"BGP","text":"<p>Enabled by default.</p> <p>discovery/autodiscovery</p> <pre><code>lnms config:set autodiscovery.bgp false\n</code></pre> <p>This module is invoked from bgp-peers discovery module.</p>"},{"location":"Extensions/Auto-Discovery/#snmp-scan","title":"SNMP Scan","text":"<p>Apart from the aforementioned Auto-Discovery options, LibreNMS is also able to proactively scan a network for SNMP-enabled devices using the configured version/credentials.</p> <p>SNMP Scan will scan <code>nets</code> by default and respects <code>autodiscovery.nets-exclude</code>.</p> <p>To run the SNMP-Scanner you need to execute the <code>snmp-scan.py</code> from within your LibreNMS installation directory.</p> <p>Here the script's help-page for reference:</p> <pre><code>usage: snmp-scan.py [-h] [-t THREADS] [-g GROUP] [-l] [-v] [--ping-fallback] [--ping-only] [-P] [network ...]\n\nScan network for snmp hosts and add them to LibreNMS.\n\npositional arguments:\n  network          CIDR noted IP-Range to scan. Can be specified multiple times\n                   This argument is only required if 'nets' config is not set\n                   Example: 192.168.0.0/24\n                   Example: 192.168.0.0/31 will be treated as an RFC3021 p-t-p network with two addresses, 192.168.0.0 and 192.168.0.1\n                   Example: 192.168.0.1/32 will be treated as a single host address\n\noptional arguments:\n  -h, --help       show this help message and exit\n  -t THREADS       How many IPs to scan at a time.  More will increase the scan speed, but could overload your system. Default: 32\n  -g GROUP         The poller group all scanned devices will be added to. Default: The first group listed in 'distributed_poller_group', or 0 if not specificed\n  -l, --legend     Print the legend.\n  -v, --verbose    Show debug output. Specifying multiple times increases the verbosity.\n  --ping-fallback  Add the device as an ICMP only device if it replies to ping but not SNMP.\n  --ping-only      Always add the device as an ICMP only device.\n  -P, --ping       Deprecated. Use --ping-fallback instead.\n</code></pre>"},{"location":"Extensions/Auto-Discovery/#discovered-devices","title":"Discovered devices","text":"<p>Newly discovered devices will be added to the <code>default_poller_group</code>, this value defaults to 0 if unset.</p> <p>When using distributed polling, this value can be changed locally by setting <code>default_poller_group</code></p> <p>To set per-poller, set this in each poller's config.php file: <pre><code>$config['default_poller_group'] = 3;\n</code></pre></p> <p>Set globally</p> <p>poller/distributed</p> <pre><code>lnms config:set default_poller_group 3\n</code></pre>"},{"location":"Extensions/Availability-Map/","title":"Availability Map","text":"<p>LibreNMS has the following page to show an availability map:</p> <ul> <li>Overview -&gt; Maps -&gt; Availability</li> </ul> <p>This map will show all devices on a single page, with each device having either a box or a coloured square representing its status.</p>"},{"location":"Extensions/Availability-Map/#widget","title":"Widget","text":"<p>There is an availability map widget that can be added to a dashboard to give a quick overview of the status of all devices on the network.</p>"},{"location":"Extensions/Availability-Map/#settings","title":"Settings","text":"<pre><code># Set the compact view mode for the availability map\nlnms config:set webui.availability_map_compact false\n\n# Size of the box for each device in the availability map (not compact)\nlnms config:set webui.availability_map_box_size 165\n\n# Sort by status instead of hostname\nlnms config:set webui.availability_map_sort_status false\n\n# Show the device group drop-down on the availabiltiy map page\nlnms config:set webui.availability_map_use_device_groups true\n</code></pre>"},{"location":"Extensions/Billing-Module/","title":"Billing Module","text":"<p>With the billing module you can create a bill, assign a quota to it and add ports to it. It then tracks the ports usage and shows you the usage in the bill, including any overage. Accounting by both total transferred data and 95th percentile is supported.</p> <p>To enable and use the billing module you need to perform the following steps:</p> <p>system/billing</p> <pre><code>lnms config:set enable_billing true\n</code></pre> CronDispatcher Service <p>Edit <code>/etc/cron.d/librenms</code> and add the following: <pre><code>*/5 * * * * librenms /opt/librenms/poll-billing.php &gt;&gt; /dev/null 2&gt;&amp;1\n01  * * * * librenms /opt/librenms/billing-calculate.php &gt;&gt; /dev/null 2&gt;&amp;1\n</code></pre></p> <p>Go to Settings -&gt; Poller -&gt; Settings And for each poller, ensure <code>Billing Enabled</code> is selected.</p>"},{"location":"Extensions/Billing-Module/#adding-a-bill","title":"Adding a bill","text":"<p>To create a new bill, from the LibreNMS menu select Ports -&gt; Traffic Bills and select <code>+ Create Bill</code>.</p> <p>Enter the relevant details within the form, ensuring that you select at least one device and port.</p>"},{"location":"Extensions/Billing-Module/#95th-percentile-calculation","title":"95th Percentile Calculation","text":"<p>For 95th Percentile billing, the default behavior is to use the highest of the input or output 95th Percentile calculation.</p> <p>To instead use the combined total of inout + output to derive the 95th percentile, This can be changed on a per bill basis by setting 95th Calculation to \"Aggregate\".</p> <p>system/billing</p> <pre><code>lnms config:set billing.95th_default_agg true\n</code></pre> <p>This configuration setting is cosmetic and only changes the default selected option when adding a new bill.</p>"},{"location":"Extensions/Component/","title":"About","text":"<p>The Component extension provides a generic database storage mechanism for discovery and poller modules. The Driver behind this extension was to provide the features of ports, in a generic manner to discovery/poller modules.</p> <p>It provides a status (Nagios convention), the ability to Disable (do not poll), or Ignore (do not Alert).</p>"},{"location":"Extensions/Component/#database-structure","title":"Database Structure","text":"<p>The database structure contains the component table:</p> <pre><code>mysql&gt; select * from component limit 1;\n+----+-----------+------+------------+--------+----------+--------+-------+\n| id | device_id | type | label      | status | disabled | ignore | error |\n+----+-----------+------+------------+--------+----------+--------+-------+\n|  9 |         1 | TEST | TEST LABEL |      0 |        1 |      1 |       |\n+----+-----------+------+------------+--------+----------+--------+-------+\n1 row in set (0.00 sec)\n</code></pre> <p>These fields are described below:</p> <ul> <li><code>id</code> - ID for each component, unique index</li> <li><code>device_id</code> - device_id from the devices table</li> <li><code>type</code> - name from the component_type table</li> <li><code>label</code> - Display label for the component</li> <li><code>status</code> - The status of the component, retrieved from the device</li> <li><code>disabled</code> - Should this component be polled?</li> <li><code>ignore</code> - Should this component be alerted on</li> <li><code>error</code> - Error message if in Alert state</li> </ul> <p>The component_prefs table holds custom data in an Attribute/Value format:</p> <pre><code>mysql&gt; select * from component_prefs limit 1;\n+----+-----------+-----------+-----------+\n| id | component | attribute | value     |\n+----+-----------+-----------+-----------+\n|  4 |         9 | TEST_ATTR | TEST_ATTR |\n+----+-----------+-----------+-----------+\n2 rows in set (0.00 sec)\n</code></pre>"},{"location":"Extensions/Component/#reserved-fields","title":"Reserved Fields","text":"<p>When this data from both the <code>component</code> and <code>component_prefs</code> tables is returned in one single consolidated array, there is the potential for someone to attempt to set an attribute (in the <code>component_prefs</code>) table that is used in the <code>component</code> table. Because of this all fields of the <code>component</code> table are reserved, they cannot be used as custom attributes, if you update these the module will attempt to write them to the <code>component</code> table, not the <code>component_prefs</code> table.</p>"},{"location":"Extensions/Component/#using-components","title":"Using Components","text":"<p>Create an instance of the component class:</p> <pre><code>$COMPONENT = new LibreNMS\\Component();\n</code></pre>"},{"location":"Extensions/Component/#retrieving-components","title":"Retrieving Components","text":"<p>Now you can retrieve an array of the available components:</p> <pre><code>$ARRAY = $COMPONENT-&gt;getComponents($DEVICE_ID, $OPTIONS);\n</code></pre> <p><code>getComponents</code> takes 2 arguments:</p> <ul> <li><code>DEVICE_ID</code> or null for all devices.</li> <li><code>OPTIONS</code> - an array of various options.</li> </ul> <p><code>getComponents</code> will return an array containing components in the following format:</p> <pre><code>Array\n(\n    [X] =&gt; Array\n    (\n        [Y1] =&gt; Array\n        (\n            [device_id] =&gt; 1\n            [TEST_ATTR] =&gt; TEST_ATTR\n            [type] =&gt; TEST\n            [label] =&gt; TEST LABEL\n            [status] =&gt; 0\n            [ignore] =&gt; 1\n            [disabled] =&gt; 1\n            [error] =&gt;\n        ),\n        [Y2] =&gt; Array\n        (\n            [device_id] =&gt; 1\n            [TEST_ATTR] =&gt; TEST_ATTR\n            [type] =&gt; TESTING\n            [label] =&gt; TEST LABEL\n            [status] =&gt; 0\n            [ignore] =&gt; 1\n            [disabled] =&gt; 0\n            [error] =&gt;\n        ),\n    )\n)\n</code></pre> <p>Where X is the Device ID and Y1/Y2 is the Component ID. In the example above, <code>TEST_ATTR</code> is a custom field, the rest are reserved fields.</p>"},{"location":"Extensions/Component/#options","title":"Options","text":"<p>Options can be supplied to <code>getComponents</code> to influence which and how components are returned.</p>"},{"location":"Extensions/Component/#filtering","title":"Filtering","text":"<p>You can filter on any of the reserved fields. Filters are created in the following format:</p> <pre><code>$options['filter']['FIELD'] = array ('OPERATOR', 'CRITERIA');\n</code></pre> <p>Where:</p> <ul> <li><code>FIELD</code> - The reserved field to filter on</li> <li><code>OPERATOR</code> - 'LIKE' or '=', are we checking if the FIELD equals or   contains the CRITERIA.</li> <li><code>CRITERIA</code> - The criteria to search on</li> </ul> <p>There are 2 filtering shortcuts:</p> <p><code>$DEVICE_ID</code> is a synonym for:</p> <pre><code>$OPTIONS['filter']['device_id'] = array ('=', $DEVICE_ID);\n</code></pre> <p><code>$OPTIONS['type'] = $TYPE</code> is a synonym for:</p> <pre><code>$OPTIONS['filter']['type'] = array ('=', $TYPE);\n</code></pre>"},{"location":"Extensions/Component/#sorting","title":"Sorting","text":"<p>You can sort the records that are returned by specifying the following option:</p> <pre><code>$OPTIONS['sort'][FIELD] = 'DIRECTION';\n</code></pre> <p>Where Direction is one of:</p> <ul> <li><code>ASC</code> - Ascending, from Low to High</li> <li><code>DESC</code> - Descending, from High to Low</li> </ul>"},{"location":"Extensions/Component/#creating-components","title":"Creating Components","text":"<p>To create a new component, run the <code>createComponent</code> function.</p> <pre><code>$ARRAY = $COMPONENT-&gt;createComponent($DEVICE_ID, $TYPE);\n</code></pre> <p><code>createComponent</code> takes 2 arguments:</p> <ul> <li><code>DEVICE_ID</code> - The ID of the device to attach the component to.</li> <li><code>TYPE</code> - The unique type for your module.</li> </ul> <p>This will return a new, empty array with a component ID and Type set, all other fields will be set to defaults.</p> <pre><code>Array\n(\n    [1] =&gt; Array\n    (\n        [type] =&gt; TESTING\n        [label] =&gt;\n        [status] =&gt; 1\n        [ignore] =&gt; 0\n        [disabled] =&gt; 0\n        [error] =&gt;\n    )\n)\n</code></pre>"},{"location":"Extensions/Component/#deleting-components","title":"Deleting Components","text":"<p>When a component is no longer needed, it can be deleted.</p> <pre><code>$COMPONENT-&gt;deleteComponent($COMPONENT_ID)\n</code></pre> <p>This will return <code>True</code> on success or <code>False</code> on failure.</p>"},{"location":"Extensions/Component/#editing-components","title":"Editing Components","text":"<p>To edit a component, the procedure is:</p> <ol> <li>Get the Current Components</li> <li>Edit the array</li> <li>Write the components</li> </ol>"},{"location":"Extensions/Component/#edit-the-array","title":"Edit the Array","text":"<p>Once you have a component array from <code>getComponents</code> the first thing to do is extract the components for only the single device you are editing. This is required because the <code>setComponentPrefs</code> function only saves a single device at a time.</p> <pre><code>$ARRAY = $COMPONENT-&gt;getComponents($DEVICE_ID, $OPTIONS);\n$ARRAY = $ARRAY[$DEVICE_ID];\n</code></pre> <p>Then simply edit this array to suit your needs. If you need to add a new Attribute/Value pair you can:</p> <pre><code>$ARRAY[COMPONENT_ID]['New Attribute'] = \"Value\";\n</code></pre> <p>If you need to delete a previously set Attribute/Value pair you can:</p> <pre><code>unset($ARRAY[COMPONENT_ID]['New Attribute']);\n</code></pre> <p>If you need to edit a previously set Attribute/Value pair you can:</p> <pre><code>$ARRAY[COMPONENT_ID]['Existing Attribute'] = \"New Value\";\n</code></pre>"},{"location":"Extensions/Component/#write-the-components","title":"Write the components","text":"<p>To write component changes back to the database simply:</p> <pre><code>$COMPONENT-&gt;setComponentPrefs($DEVICE_ID, $ARRAY)\n</code></pre> <p>When writing the component array there are several caveats to be aware of, these are:</p> <ul> <li><code>$ARRAY</code> must be in the format of a single device ID -   <code>$ARRAY[$COMPONENT_ID][Attribute] = 'Value';</code> NOT in the multi   device format returned by <code>getComponents</code> -   <code>$ARRAY[$DEVICE_ID][$COMPONENT_ID][Attribute] = 'Value';</code></li> <li>You cannot edit the Component ID or the Device ID</li> <li>reserved fields can not be removed</li> <li>if a change is found an entry will be written to the eventlog.</li> </ul>"},{"location":"Extensions/Component/#api","title":"API","text":"<p>Component details are available via the API. Please see the API-Docs for details.</p>"},{"location":"Extensions/Component/#alerting","title":"Alerting","text":"<p>It is intended that discovery/poller modules will detect the status of a component during the polling cycle. Status is logged using the Nagios convention for status codes, where:</p> <pre><code>0 = Ok,\n1 = Warning,\n2 = Critical\n</code></pre> <p>If you are creating a poller module which can detect a fault condition simply set STATUS to something other than 0 and ERROR to a message that indicates the problem.</p> <p>To actually raise an alert, the user will need to create an alert rule. To assist with this several Alerting Macro's have been created:</p> <ul> <li><code>%macro.component_normal</code> - A component that is not disabled or   ignored and in a Normal state.</li> <li><code>%macro.component_warning</code> - A component that is not disabled or   ignored and NOT in a Warning state.</li> <li><code>%macro.component_critical</code> - A component that is not disabled or   ignored and NOT in a Critical state.</li> </ul> <p>To raise alerts for components, the following rules could be created:</p> <ul> <li><code>%macros.component_critical = \"1\"</code> - To alert on all Critical   components</li> <li><code>%macros.component_critical = \"1\" &amp;&amp; %component.type = \"&lt;Type of   Component&gt;\"</code> - To alert on all Critical components of a particular   type.</li> </ul> <p>If there is a particular component you would like excluded from alerting, simply set the ignore field to 1.</p> <p>The data that is written to each alert when it is raised is in the following format:</p> <p><code>COMPONENT_TYPE - LABEL - ERROR</code></p>"},{"location":"Extensions/Component/#example-code","title":"Example Code","text":"<p>To see an example of how the component module can used, please see the following modules:</p> <ul> <li>Cisco OTV</li> <li><code>includes/discovery/cisco-otv.inc.php</code></li> <li><code>includes/polling/cisco-otv.inc.php</code></li> <li><code>html/includes/graphs/device/cisco-otv-mac.inc.php</code></li> <li><code>html/pages/routing/cisco-otv.inc.php</code></li> </ul>"},{"location":"Extensions/Custom-Map/","title":"Custom Map","text":"<p>LibreNMS has the ability to create custom maps to give a quick overview of parts of the network including up/down status of devices and link utilisation.  These are also referred to as weather maps.</p>"},{"location":"Extensions/Custom-Map/#viewer","title":"Viewer","text":"<p>Once some maps have been created, they will be visible to any users who have read access to all devices on a given map.  Custom maps are available through the Overview -&gt; Maps -&gt; Custom Maps menu.</p> <p>Some key points about the viewer are:</p> <ul> <li>Nodes will change colour if they are down or disabled</li> <li>Links are only associated with a single network interface</li> <li>Link utilisation can only be shown if the link speed is known</li> <li>Link speed is decoded from SNMP if possible (Upload/Download) and defaults    to the physical speed if SNMP data is not available, or cannot be decoded</li> <li>Links will change colour as follows:</li> <li>Black if the link is down, or the max speed is unknown</li> <li>Green at 0% utilisation, with a gradual change to</li> <li>Yellow at 50% utilisation, with a gradual change to</li> <li>Orange at 75% utilisation, with a gradual change to</li> <li>Red at 100% utilisation, with a gradual change to</li> <li>Purple at 150% utilisation and above</li> </ul>"},{"location":"Extensions/Custom-Map/#viewer-url-options","title":"Viewer URL options","text":"<p>You can manually add the following parameters to a URL to alter the display of a custom map.</p> <p>The following URL options are available:</p> <ul> <li>bare=yes : Removes the control bar from the top of the page.</li> <li>screenshot=yes : Removes all labels from the nodes and links</li> </ul> <p>e.g. If you want bare and screenshot enabled, https://nmsserver/maps/custom/2 becomes https://nmsserver/maps/custom/2?bare=yes&amp;screenshot=yes</p>"},{"location":"Extensions/Custom-Map/#editor","title":"Editor","text":"<p>To access the custom map editor, a user must be an admin.  The editor is accessed through the Overview -&gt; Maps -&gt; Custom Map Editor menu.</p> <p>Once you are in the editor, you will be given a drop-down list of all the custom maps so you can choose one to edit, or select \"Create New Map\" to create a new map.</p>"},{"location":"Extensions/Custom-Map/#map-settings","title":"Map Settings","text":"<p>When you create a new map, you will be presented with a page to set some global map settings.  These are:</p> <ul> <li>Name: The name for the map</li> <li>Width: The width of the map in pixels</li> <li>Height: The height of the map in pixels</li> <li>Node Alignment: When devices are added to the map, this will align     the devices to an invisible grid this many pixels wide, which can help    to make the maps look better.  This can be set to 0 to disable.</li> <li>Background: An image (PNG/JPG) up to 2MB can be uploaded as a background.</li> </ul> <p>These settings can be changed at any stage by clicking on the \"Edit Map Settings\" button in the top-left of the editor.</p>"},{"location":"Extensions/Custom-Map/#nodes","title":"Nodes","text":"<p>Once you have a map, you can start by adding \"nodes\" to the map.  A node represents a device, or an external point in the network (e.g. the internet) To add a node, you click on the \"Add Node\" button in the control bar, then click on the map area where you want to add the node.  You will then be aked for the following information:</p> <ul> <li>Label: The text to display on this point in the network</li> <li>Device: If this node represents a device, you can select the device from    the drop-down.  This will overwrite the label, which you can then change if    you want to.</li> <li>Style: You can select the style of the node.  If a device has been selected    you can choose the LibreNMS icon by choosing \"Device Image\".  You can also    choose \"Icon\" to select an image for the device.</li> <li>Icon: If you choose \"Icon\" in the style box, you can select from a list of    images to represent this node</li> </ul> <p>There are also options to choose the size and colour of the node and the font.</p> <p>Once you have finished choosing the options for the node, you can press Save to add it to the map.  NOTE: This does not save anything to the database immediately. You need to click on the \"Save Map\" button in the top-right to save your changes to the database.</p> <p>You can edit a node at any time by selecting it on the map and clicking on the \"Edit Node\" button in the control bar.</p> <p>You can also modify the default settings for all new nodes by clicking on the \"Edit Node Default\" button at the top of the page.</p>"},{"location":"Extensions/Custom-Map/#edges","title":"Edges","text":"<p>Once you have 2 or more nodes, you can add links between the nodes.  These are called edges in the editor.  To add a link, click on the \"Add Edge\" button in the control bar, then click on one of the nodes you want to link and drag the cursor to the second node that you want to link.  You will then be prompted for the following information:</p> <ul> <li>From: The node that the link runs from (it will default to first node you selected)</li> <li>To: The node that the link runs to (it will default to the second node you selected)</li> <li>Port: If the From or To node is linked to a device, you can select an interface    from one of the devices and the custom map will show traffic utilisation for    the selected interface.</li> <li>Reverse Port Direction: If the selected port displays data in the wrong    direction for the link, you can reverse it by toggling this option.</li> <li>Line Style: You can try different line styles, especially if you are running    multiple links between the same 2 nodes</li> <li>Show percent usage: Choose whether to have text on the lines showing the link    utilisation as a percentage</li> <li>Recenter Line: If you tick this box, the centre point of the line will be moved    back to half way between the 2 nodes when you click on the save button.</li> </ul> <p>Once you have finished choosing the options for the node, you can press Save to add it to the map.  NOTE: This does not save anything to the database immediately. You need to click on the \"Save Map\" button in the top-right to save your changes to the database.</p> <p>Once you press save, you it will create 3 objects on the screen, 2 arrows and a round node in the middle.  Having the 3 objects allows you to move the mid point of the line off centre, and also allows us to display bandwidth information for both directions of the link.</p> <p>You can edit an edge at any time by selecting it on the map and clicking on the \"Edit Edge\" button in the control bar.</p> <p>You can also modify the default settings for all new edges by clicking on the \"Edit Edge Default\" button at the top of the page.</p>"},{"location":"Extensions/Custom-Map/#re-render","title":"Re-Render","text":"<p>When you drag items around the map, some of the lines will bend. This will cause a \"Re-Render Map\" button to appear at the top-right of the page.  This button can be clicked on to cause all lines to be re-drawn the way they will be shown in the viewer.</p>"},{"location":"Extensions/Custom-Map/#save-map","title":"Save Map","text":"<p>Once you are happy with a set of changes that you have made, you can click on the \"Save Map\" button in the top-right of the page to commit changes to the database. This will cause anyone viewing the map to see the new version the next time their page refreshes.</p>"},{"location":"Extensions/Custom-Map/#adding-images","title":"Adding Images","text":"<p>You can add your own images to use on the custom map by copying files into the html/images/custommap/icons/ directory.  Any files with a .svg, .png or .jpg extension will be shown in the image selection drop-down in the custom map editor.</p>"},{"location":"Extensions/Custom-Map/#default-configuration","title":"Default configuration","text":"<p>The default configuration for all new maps can be set with the following commands:</p> <pre><code>lnms config:set custom_map.background_type\nlnms config:set custom_map.background_data.color \"#badaee\"\nlnms config:set custom_map.background_data.lat 40\nlnms config:set custom_map.background_data.layer\nlnms config:set custom_map.background_data.lng \"-20\"\nlnms config:set custom_map.background_data.zoom 3\nlnms config:set custom_map.edge_font_color \"#343434\"\nlnms config:set custom_map.edge_font_face arial\nlnms config:set custom_map.edge_font_size 12\nlnms config:set custom_map.edge_seperation 10\nlnms config:set custom_map.height \"800px\"\nlnms config:set custom_map.legend_colours '{ \"0\": \"#0000ff\", \"10\": \"#00ff00\" }'\nlnms config:set custom_map.node_align 10\nlnms config:set custom_map.node_background \"#D2E5FF\"\nlnms config:set custom_map.node_border \"#2B7CE9\"\nlnms config:set custom_map.node_font_color \"#343434\"\nlnms config:set custom_map.node_font_face arial\nlnms config:set custom_map.node_font_size 14\nlnms config:set custom_map.node_size 25\nlnms config:set custom_map.node_type\nlnms config:set custom_map.reverse_arrows false\nlnms config:set custom_map.width \"1800px\"\n</code></pre> <p>All options can be reset to default by excluding the value argument.</p> <p>Options with special requirements are as follows:  - All colours should be specified using the hex representation, and not colour names  - background_type background_data.layer and node_type will only accept valid values (see resources/definitions/config_definition.json)  - custom_map.legend_colours is an array of lower percent and colour.  This means in the example above, lines will be green from 0-10%, then blue above 10%.    - There is a special value of \"-1\" in the legend colours for when the interface is offline, or the port speed could not be determined    - There is a special value of \"-2\" in the legend colours for when the device an interface is connected to is offline    - The default legend_colours config is null, which means lines will change gradually from green-&gt;orange-&gt;red-&gt;purple as they go from 0-50-100-150%.</p>"},{"location":"Extensions/Customizing-the-Web-UI/","title":"Customizing the Web UI","text":""},{"location":"Extensions/Customizing-the-Web-UI/#custom-menu-entry","title":"Custom menu entry","text":"<p>Create the file <code>resources/views/menu/custom.blade.php</code></p> <p>Example contents:</p> <pre><code>&lt;li class=\"dropdown\"&gt;\n    &lt;a href=\"#\" class=\"dropdown-toggle\" data-hover=\"dropdown\" data-toggle=\"dropdown\"&gt;&lt;i class=\"fa fa-star fa-fw fa-lg fa-nav-icons hidden-md\" aria-hidden=\"true\"&gt;&lt;/i&gt;\n        &lt;span class=\"hidden-sm\"&gt;Custom Menu&lt;/span&gt;&lt;/a&gt;\n    &lt;ul class=\"dropdown-menu\"&gt;\n        @admin\n            &lt;li&gt;&lt;a href=\"plugins/Weathermap/output/history/index.html\"&gt;&lt;i class=\"fa fa-film fa-fw fa-lg\" aria-hidden=\"true\"&gt;&lt;/i&gt; Weathermap Animation&lt;/a&gt;&lt;/li&gt;\n            &lt;li role=\"presentation\" class=\"divider\"&gt;&lt;/li&gt;\n            &lt;li&gt;&lt;a href=\"#\"&gt;&lt;i class=\"fa fa-database fa-fw fa-lg\" aria-hidden=\"true\"&gt;&lt;/i&gt; Item 1&lt;/a&gt;&lt;/li&gt;\n            &lt;li&gt;&lt;a href=\"#\"&gt;&lt;i class=\"fa fa-smile-o fa-fw fa-lg\" aria-hidden=\"true\"&gt;&lt;/i&gt; Item 2&lt;/a&gt;&lt;/li&gt;\n            &lt;li&gt;&lt;a href=\"#\"&gt;&lt;i class=\"fa fa-anchor fa-fw fa-lg\" aria-hidden=\"true\"&gt;&lt;/i&gt; Item 3&lt;/a&gt;&lt;/li&gt;\n            &lt;li&gt;&lt;a href=\"#\"&gt;&lt;i class=\"fa fa-plug fa-fw fa-lg\" aria-hidden=\"true\"&gt;&lt;/i&gt; Item 4&lt;/a&gt;&lt;/li&gt;\n            &lt;li&gt;&lt;a href=\"#\"&gt;&lt;i class=\"fa fa-code-fork fa-fw fa-lg\" aria-hidden=\"true\"&gt;&lt;/i&gt; Item 5&lt;/a&gt;&lt;/li&gt;\n            &lt;li&gt;&lt;a href=\"#\"&gt;&lt;i class=\"fa fa-truck fa-fw fa-lg\" aria-hidden=\"true\"&gt;&lt;/i&gt; Item 63&lt;/a&gt;&lt;/li&gt;\n        @else\n            &lt;li&gt;&lt;a href=\"#\"&gt;You need admin rights to see this&lt;/a&gt;&lt;/li&gt;\n        @endadmin\n    &lt;/ul&gt;\n&lt;/li&gt;\n</code></pre>"},{"location":"Extensions/Customizing-the-Web-UI/#custom-device-menu-action","title":"Custom device menu action","text":"<p>You can add custom external links in the menu on the device page.</p> <p>This feature allows you to easily link applications to related systems, as shown in the example of Open-audIT.</p> <p>The url value is parsed by the Laravel Blade templating engine. You can access device variables such as <code>$device-&gt;hostname</code>, <code>$device-&gt;sysName</code> and use full PHP.</p> <p>settings/webui/device</p> <pre><code>lnms config:set html.device.links.+ '{\"url\": \"http://atssrv/open-audit/index/devices/{{ $device-&gt;sysName }}\", \"title\": \"Open-AudIT\"}'\n</code></pre> Field Description url Url blade template resulting in valid url. Required. title Title text displayed in the menu. Required. icon Font Awesome icon class. Default: fa-external-link external Open link in new window. Default: true action Show as action on device list. Default: false"},{"location":"Extensions/Customizing-the-Web-UI/#launching-windows-programs-from-the-librenms-device-menu","title":"Launching Windows programs from the LibreNMS device menu","text":"<p>You can launch windows programs from links in LibreNMS, but it does take some registry entries on the client device. Save the following as winbox.reg,  edit for your winbox.exe path and double click to add to your registry.</p> <pre><code>Windows Registry Editor Version 5.00\n[HKEY_CLASSES_ROOT\\winbox]\n@=\"URL:Winbox Protocol\"\n\"URL Protocol\"=\"\"\n[HKEY_CLASSES_ROOT\\winbox\\shell]\n[HKEY_CLASSES_ROOT\\winbox\\shell\\open]\n[HKEY_CLASSES_ROOT\\winbox\\shell\\open\\command]\n@=\"C:\\Windows\\System32\\WindowsPowerShell\u000b1.0\\powershell.exe -Command \"$val='%l'; $val = $val.TrimEnd('/');if ($val.StartsWith('winbox://' { $val = $val.SubString(9) }; &amp; 'C:\\Program Files\\winbox64.exe' \"$val\"\"\"\n</code></pre> <p>Now we can use that in the device menu entry to open winbox.</p> <p>settings/webui/device</p> <pre><code>lnms config:set html.device.links.+ '{\"url\": \"winbox://{{ $device-&gt;hostname }}\", \"title\": \"Winbox\"}'\n</code></pre>"},{"location":"Extensions/Customizing-the-Web-UI/#setting-the-primary-device-menu-action","title":"Setting the primary device menu action","text":"<p>You can change the icon that is clickable in the device without having to open the dropdown menu. The primary button is edit device by default.</p> <p>settings/webui/device</p> <pre><code>lnms config:set html.device.primary_link web\n</code></pre> Value Description edit Edit device web Connect to the device via https/http ssh launch ssh:// protocol to the device, make sure you have a handler registered telnet launch telnet:// protocol to the device capture Link to the device capture page custom1 Custom Link 1 custom2 Custom Link 2 custom3 Custom Link 3 custom4 Custom Link 4 custom5 Custom Link 5 custom6 Custom Link 6 custom7 Custom Link 7 custom8 Custom Link 8 <p>!!! Custom http, ssh, telnet ports</p> <p>Custom ports can be set through the device setting misc tab and will be appended to the Uri. Empty value will not append anything and automatically default to the standard.     - custom ssh port set to 2222 will result in ssh://10.0.0.0:2222     - custom telnet port set to 2323 will result in telnet://10.0.0.0:2323</p>"},{"location":"Extensions/Dashboards/","title":"Dashboards","text":"<p>Create customised dashboards in LibreNMS per user. You can share dashboards with other users. You can also make a custom dashboard and default it for all users in LibreNMS.</p> <p>Example Dashboard </p>"},{"location":"Extensions/Dashboards/#widgets","title":"Widgets","text":"<p>LibreNMS has a whole list of Widgets to select from.</p> <ul> <li>Alerts Widget: Displays all alert notifications.</li> <li>Availability Map: Displays all devices with colored tiles, green up,   yellow for warning (device has been restarted in last 24 hours), red   for down. You can also list all services and ignored/disabled   devices in this widget.</li> <li>Components Status: List all components Ok state, Warning state, Critical state.</li> <li>Device Summary horizontal: List device totals, up, down, ignored,   disabled. Same for ports and services.</li> <li>Device Summary vertical: List device totals, up, down, ignored,   disabled. Same for ports and services.</li> <li>Eventlog: Displays all events with your devices and LibreNMS.</li> <li>External Image: can be used to show external images on your   dashboard. Or images from inside LibreNMS.</li> <li>Globe Map: Will display map of the globe.</li> <li>Graph: Can be used to display graphs from devices.</li> <li>Graylog: Displays all Graylog's syslog entries.</li> <li>Notes: use for html tags, embed links and external web pages. Or   just notes in general.</li> <li>Server Stats: Will display gauges for CPU, Memory, Storage   usage. Note the device type has to be listed as \"Server\".</li> <li>Syslog: Displays all syslog entries.</li> <li>Top Devices: By Traffic, or  Uptime, or Response time, or Poller   Duration, or Processor load, or Memory Usage, or Storage Usage.</li> <li>Top Interfaces: Lists top interfaces by traffic utilization.</li> <li>World Map: displays all your devices locations. From syslocation or   from override sysLocation.</li> </ul> <p>List of Widgets:</p> <p> </p>"},{"location":"Extensions/Dashboards/#dashboard-permissions","title":"Dashboard Permissions","text":"<ul> <li>Private: Sets the dashboard to only the user that created the   dashboard can view and edit.</li> <li>Shared Read: Sets the dashboard to allow other users to view the   dashboard, but can't make changes to the dashboard.</li> <li>Shared Admin RW: Sets the dashboard to allow other users to view   the dashboard, but allows Admins to makes changes.</li> <li>Shared: Allows all users to view the dashboard and make changes.</li> </ul>"},{"location":"Extensions/Dashboards/#setting-a-global-default-dashboard","title":"Setting a global default dashboard","text":"<p>Step 1: Set the dashboard to either shared read or shared, depending on what you want the users access to change.</p> <p>Step 2: Then go to Settings -&gt; WebUI settings -&gt; Dashboard Settings and set the global default dashboard.</p>"},{"location":"Extensions/Dashboards/#setting-embedded-webpage","title":"Setting embedded webpage","text":"<p>Using the Notes Widget.</p> <pre><code>&lt;iframe src=\"your_url\" frameBorder=\"0\" width=\"100%\" height = \"100%\"&gt;\n  &lt;p&gt;Your browser does not support iframes.&lt;/p&gt;\n&lt;/iframe&gt;\n</code></pre> <p>Note you may need to play with the width and height and also size your widget properly.</p> <p><code>src=\"url\"</code> needs to be URL to webpage you are linking to. Also some web pages may not support html embedded or iframe. </p>"},{"location":"Extensions/Dashboards/#how-to-create-ports-graph","title":"How to create ports graph","text":"<p>In the dashboard, you want to create an interface graph select the widget called</p> <p>'Graph' then select \"Port\" -&gt; \"Bits\" </p> <p>Note: you can map the port by description or the alias or by port id. You will need to know this in order to map the port to the graph.</p> <p></p>"},{"location":"Extensions/Dashboards/#dimension-parameter-replacement-for-generic-image-widget","title":"Dimension parameter replacement for Generic-image widget","text":"<p>When using the Generic-image widget you can provide the width and height of the widget with your request. This will ensure that the image will fit nicely with the dimensions if the Generic-image widget. You can add <code>@AUTO_HEIGHT@</code> and <code>@AUTO_WIDTH@</code> to the Image URL as parameters.</p> <p>Examples:</p> <ul> <li>http://librenms.example.com/graph.php?id=333%2C444&amp;type=multiport_bits_separate&amp;legend=no&amp;absolute=1&amp;from=-14200&amp;width=@AUTO_WIDTH@&amp;height=@AUTO_HEIGHT@</li> <li>http://example.com/myimage.php?size=@AUTO_WIDTH@x@AUTO_HEIGHT@</li> </ul>"},{"location":"Extensions/Dell-OpenManage/","title":"Dell OpenManage Support","text":"<p>For Dell OpenManage support you will need to install Dell OpenManage (yeah - really :)) (minimum 5.1) onto the device you want to monitor. Ensure that net-snmp is using srvadmin, you should see something similar to:</p> <pre><code>master agentx\nview all included .1\naccess notConfigGroup \"\" any noauth exact all none none\nsmuxpeer .1.3.6.1.4.1.674.10892.1\n</code></pre> <p>Restart net-snmp:</p> <pre><code>service snmpd restart\n</code></pre> <p>Ensure that srvadmin is started, this is usually done by executing:</p> <pre><code>/opt/dell/srvadmin/sbin/srvadmin-services.sh start\n</code></pre> <p>Once this has been done, add the device to LibreNMS as normal and you will start to receive Temperatures and Fan speed data.</p>"},{"location":"Extensions/Dell-OpenManage/#windows","title":"Windows","text":"<p>Download OpenManage from Dell's support page Link and install OpenManage on your windows server. Make sure you have SNMP setup and running on your windows server.</p>"},{"location":"Extensions/Dependency-Map/","title":"Dependency Map","text":"<p>LibreNMS has the ability to show you a dynamic network map based on device dependencies that have been configure. These maps are accessed through the following menu options:</p> <ul> <li>Overview -&gt; Maps -&gt; Device Dependency</li> <li>Overview -&gt; Maps -&gt; Device Groups Dependencies</li> </ul>"},{"location":"Extensions/Dependency-Map/#settings","title":"Settings","text":"<p>The map display can be configured by altering the Vis JS Options</p>"},{"location":"Extensions/Device-Groups/","title":"Grouping Devices","text":"<p>LibreNMS supports grouping your devices together in much the same way as you can configure alerts. This document will hopefully help you get started.</p>"},{"location":"Extensions/Device-Groups/#dynamic-groups","title":"Dynamic Groups","text":""},{"location":"Extensions/Device-Groups/#rule-editor","title":"Rule Editor","text":"<p>Just like our alerting system, dynamic groups are based on the MySQL structure your data is in and uses QueryBuilder to generate SQL queries to build your groups.</p> <p>You can browse around inside MySQL using <code>show tables</code> to view all of the tables within LibreNMS and then run <code>desc &lt;tablename&gt;</code> to be able to see the table structure. Both of these then form the basic format for the QueryBuilder interface such as tablename.columnname.</p> <p>To see the data within the table, you can then run <code>select * from &lt;tablename&gt; limit 5;</code>. This way, you can get an idea of what data will be returned for your dynamic group.</p> <p>As a working example and a common question, let's assume you want to group devices by hostname. If your hostname format is dcX.[devicetype].example.com.</p> <p>If you want to group them by the device type of <code>rtr</code>, you would add a rule for routers of <code>devices.hostname</code> <code>endswith</code> <code>rtr.example.com</code>. This would match dcX.<code>rtr.example.com</code></p> <p>If you want to group them by DC, you could use the rule <code>devices.hostname</code> regex <code>dc1\\..*\\.example\\.com</code> (Don't forget to escape periods in the regex). This would match <code>dc1.rtr.example.com</code>.</p>"},{"location":"Extensions/Device-Groups/#static-groups","title":"Static Groups","text":"<p>You can create static groups (and convert dynamic groups to static) to put specific devices in a group. Just select static as the type and select the devices you want in the group.</p> <p></p> <p>You can now select this group from the Devices -&gt; All Devices link in the navigation at the top. You can also use map your device groups to an alert rule in the section <code>Match devices, groups and locations list</code> against any alert rule.</p>"},{"location":"Extensions/Dispatcher-Service/","title":"Dispatcher Service","text":"<p>Status: Release Candidate</p> <p>The LibreNMS dispatcher service (<code>librenms-service.py</code>) is a new method of running the poller service at set times. It does not replace the php scripts, just the cron entries running them.</p>"},{"location":"Extensions/Dispatcher-Service/#external-requirements","title":"External Requirements","text":""},{"location":"Extensions/Dispatcher-Service/#a-recent-version-of-python","title":"A recent version of Python","text":"<p>The LibreNMS service requires Python 3 and some features require behaviour only found in Python3.4+.</p>"},{"location":"Extensions/Dispatcher-Service/#python-modules","title":"Python modules","text":"<ul> <li>PyMySQL is recommended as it requires no C compiler to   install. MySQLclient can also be used, but does require compilation.</li> <li>python-dotenv .env loader</li> <li>redis-py 4.0+ and Redis 5.0+ server (if using distributed polling)</li> <li>psutil</li> </ul> <p>These can be obtained from your OS package manager, or from PyPI with the below commands.</p> <pre><code>pip3 install -r requirements.txt\n</code></pre>"},{"location":"Extensions/Dispatcher-Service/#redis-distributed-polling","title":"Redis (distributed polling)","text":"<p>If you want to use distributed polling, you'll need a Redis instance to coordinate the nodes. It's recommended that you do not share the Redis database with any other system - by default, Redis supports up to 16 databases (numbered 0-15). You can also use Redis on a single host if you want</p> <p>It's strongly recommended that you deploy a resilient cluster of redis systems, and use redis-sentinel.</p> <p>You should not rely on the password for the security of your system. See https://redis.io/topics/security</p>"},{"location":"Extensions/Dispatcher-Service/#memcached-distributed-polling","title":"Memcached (distributed polling)","text":"<p>LibreNMS can still use memcached as a locking mechanism when using distributed polling.  So you can configure memcached for this purpose unless you have updates disabled.</p> <p>See <code>Locking Mechanisms</code> at https://docs.librenms.org/Extensions/Distributed-Poller/</p>"},{"location":"Extensions/Dispatcher-Service/#mysql","title":"MySQL","text":"<p>You should already have this, but the pollers do need access to the SQL database. The LibreNMS service runs faster and more aggressively than the standard poller, so keep an eye on the number of open connections and other important health metrics.</p>"},{"location":"Extensions/Dispatcher-Service/#configuration","title":"Configuration","text":"<p>Connection settings are required in <code>.env</code>. The <code>.env</code> file is generated after composer install and <code>APP_KEY</code> and <code>NODE_ID</code> are set. Remember that the APP_KEY value must be the same on all your pollers.</p> <pre><code>#APP_KEY=   #Required, generated by composer install\n#NODE_ID=   #Required, generated by composer install\n\nDB_HOST=localhost\nDB_DATABASE=librenms\nDB_USERNAME=librenms\nDB_PASSWORD=\n</code></pre>"},{"location":"Extensions/Dispatcher-Service/#distributed-polling-configuration","title":"Distributed Polling Configuration","text":"<p>Once you have your Redis database set up, configure it in the .env file on each node. Configure the redis cache driver for distributed locking.</p> <p>There are a number of options - most of them are optional if your redis instance is standalone and unauthenticated (neither recommended).</p> <pre><code>##\n## Standalone\n##\nREDIS_HOST=127.0.0.1\nREDIS_PORT=6379\nREDIS_DB=0\nREDIS_TIMEOUT=60\n\n# If requirepass is set in redis set everything above as well as: (recommended)\nREDIS_PASSWORD=PasswordGoesHere\n\n# If ACL's are in use, set everything above as well as: (highly recommended)\nREDIS_USERNAME=UsernameGoesHere\n\n##\n## Sentinel\n##\nREDIS_SENTINEL=redis-001.example.org:26379,redis-002.example.org:26379,redis-003.example.org:26379\nREDIS_SENTINEL_SERVICE=mymaster\n\n# If requirepass is set in sentinel, set everything above as well as: (recommended)\nREDIS_SENTINEL_PASSWORD=SentinelPasswordGoesHere\n\n# If ACL's are in use, set everything above as well as: (highly recommended)\nREDIS_SENTINEL_USERNAME=SentinelUsernameGoesHere\n</code></pre> <p>For more information on ACL's, see https://redis.io/docs/management/security/acl/ </p> <p>Note that if you use Sentinel, you may still need <code>REDIS_PASSWORD</code>, <code>REDIS_USERNAME</code>, <code>REDIS_DB</code> and <code>REDIS_TIMEOUT</code> - Sentinel just provides the address of the instance currently accepting writes and manages failover. It's possible (and recommended) to have authentication both on Sentinel and the managed Redis instances.</p>"},{"location":"Extensions/Dispatcher-Service/#basic-configuration","title":"Basic Configuration","text":"<p>Additional configuration settings can be set in your config.</p> <p>The defaults are shown here - it's recommended that you at least tune the number of workers.</p> <p>Workers</p> <p>The number of workers configured will be evenly split amongst the number of poller groups configured. I.e if you have 4 groups and 24 workers then each group will get  6 workers. If you have an uneven distribution of devices between the groups then you should consider setting the workers value higher.</p> <p>poller/dispatcherservice</p> <pre><code>lnms config:set service_poller_workers 24\nlnms config:set service_services_workers 8\nlnms config:set service_discovery_workers 16\nlnms config:set schedule_type.poller dispatcher\nlnms config:set schedule_type.services dispatcher\nlnms config:set schedule_type.discovery dispatcher\n</code></pre> <p>Optional Settings</p> <p>poller/dispatcherservice</p> <pre><code>lnms config:set service_poller_frequency 300\nlnms config:set service_services_frequency 300\nlnms config:set service_discovery_frequency 21600\nlnms config:set schedule_type.alerting dispatcher\nlnms config:set schedule_type.billing dispatcher\nlnms config:set service_billing_frequency 300\nlnms config:set service_billing_calculate_frequency 60\nlnms config:set service_poller_down_retry 60\nlnms config:set service_loglevel INFO\nlnms config:set service_update_frequency 86400\n</code></pre> <p>There are also some SQL options, but these should be inherited from your LibreNMS web UI configuration.</p> <p>Logs are sent to the system logging service (usually <code>journald</code> or <code>rsyslog</code>) - see https://docs.python.org/3/library/logging.html#logging-levels for the options available.</p> <pre><code>$config['distributed_poller']                    = true;            # Set to true to enable distributed polling\n$config['distributed_poller_name']               = php_uname('n');  # Uniquely identifies the poller instance\n$config['distributed_poller_group']              = 0;               # Which group to poll\n</code></pre>"},{"location":"Extensions/Dispatcher-Service/#tuning-the-number-of-workers","title":"Tuning the number of workers","text":"<p>See https://your_librenms_install/poller</p> <p>You want to keep Consumed Worker Seconds comfortably below Maximum Worker Seconds. The closer the values are to each other, the flatter the CPU graph of the poller machine. Meaning that you are utilizing your CPU resources well. As long as Consumed WS stays below Maximum WS and Devices Pending is 0, you should be ok.</p> <p>If Consumed WS is below Maximum WS and Devices Pending is &gt; 0, your hardware is not up to the task.</p> <p>Maximum WS equals the number of workers multiplied with the number of seconds in the polling period. (default 300)</p>"},{"location":"Extensions/Dispatcher-Service/#fast-ping","title":"Fast Ping","text":"<p>The fast ping scheduler is disabled by default. You can enable it by setting the following:</p> <p>poller/scheduledtasks</p> <pre><code>lnms config:set schedule_type.ping dispatcher\n</code></pre>"},{"location":"Extensions/Dispatcher-Service/#watchdog","title":"Watchdog","text":"<p>The watchdog scheduler is disabled by default. You can enable it by setting the following:</p> <pre><code>$config['service_watchdog_enabled'] = true;\n</code></pre> <p>The watchdog scheduler will check that the poller log file has been written to within the last poll period. If there is no change to the log file since, the watchdog will restart the polling service. The poller log file is set by <code>$config['log_file']</code> and defaults to <code>./logs/librenms.log</code></p>"},{"location":"Extensions/Dispatcher-Service/#cron-scripts","title":"Cron Scripts","text":"<p>Once the LibreNMS service is installed, the cron scripts used by LibreNMS to start alerting, polling, discovery and maintenance tasks are no longer required and must be disabled either by removing or commenting them out. The service handles these tasks when enabled.</p>"},{"location":"Extensions/Dispatcher-Service/#service-installation","title":"Service Installation","text":"<p>A systemd unit file is provided - You must adapt <code>ExecStart</code> and <code>WorkingDirectory</code> if you did not install librenms in <code>/opt/librenms</code></p> <p>The sysv and upstart init scripts could also be used with a little modification.</p>"},{"location":"Extensions/Dispatcher-Service/#systemd-service","title":"systemd service","text":"<p>A systemd unit file can be found in <code>misc/librenms.service</code>. To install run: <pre><code>cp /opt/librenms/misc/librenms.service /etc/systemd/system/librenms.service &amp;&amp; systemctl enable --now librenms.service\n</code></pre></p>"},{"location":"Extensions/Dispatcher-Service/#systemd-service-with-watchdog","title":"systemd service with watchdog","text":"<p>This service file is an alternative to the above service file. It uses the systemd WatchdogSec= option to restart the service if it does not receive a keep-alive from the running process.</p> <p>A systemd unit file can be found in <code>misc/librenms-watchdog.service</code>. To install run: <pre><code>cp /opt/librenms/misc/librenms-watchdog.service /etc/systemd/system/librenms.service &amp;&amp; systemctl enable --now librenms.service\n</code></pre></p> <p>This requires: python3-systemd (or python-systemd on older systems) or https://pypi.org/project/systemd-python/ If you run this systemd service without python3-systemd it will restart every 30 seconds.</p>"},{"location":"Extensions/Dispatcher-Service/#os-specific-instructions","title":"OS-Specific Instructions","text":""},{"location":"Extensions/Dispatcher-Service/#rhelcentos","title":"RHEL/CentOS","text":"<p>To get the LibreNMS service running under python3.4+ on RHEL-derivatives with minimal fuss, you can use the software collections build:</p> <p>First, enable SCL's on your system:</p>"},{"location":"Extensions/Dispatcher-Service/#centos-7","title":"CentOS 7","text":"<pre><code># yum install centos-release-scl\n</code></pre>"},{"location":"Extensions/Dispatcher-Service/#rhel-7","title":"RHEL 7","text":"<pre><code># subscription-manager repos --enable rhel-server-rhscl-7-rpms\n</code></pre> <p>Then install and configure the runtime and service:</p> <pre><code># yum install gcc rh-python36 rh-python36-python-devel epel-release\n# yum --enablerepo=remi install redis\n# vi /opt/librenms/config.php\n# vi /etc/redis.conf\n# systemctl enable --now redis.service\n# scl enable rh-python36 bash\n# change directory to librenms (default /opt/librenms)\n# pip3 install -r requirements.txt\n# cp /opt/librenms/misc/librenms.service.scl /etc/systemd/system/librenms.service\n# systemctl enable --now librenms.service\n</code></pre> <p>If you want to use another version of python 3, change <code>rh-python36</code> in the unit file and the commands above to match the name of the replacement scl.</p>"},{"location":"Extensions/Dispatcher-Service/#debianubuntu","title":"Debian/Ubuntu","text":""},{"location":"Extensions/Dispatcher-Service/#debian-11-bullseye","title":"Debian 11 (Bullseye)","text":"<p>Warning: Bullseye provide PHP 7.4 that is too old to run LibreNMS.</p>"},{"location":"Extensions/Dispatcher-Service/#debian-12-bookworm","title":"Debian 12 (Bookworm)","text":"<p>Install dependancies <pre><code>apt install python3 python3-mysqldb python3-dotenv\n</code></pre></p> <p>Add the <code>python3-systemd</code> package for service with watchdog.</p>"},{"location":"Extensions/Distributed-Poller/","title":"Distributed Poller","text":"<p>A normal install contains all parts of LibreNMS:</p> <ul> <li>Poller/Discovery/etc workers</li> <li>RRD (Time series data store) *</li> <li>Database *</li> <li>Webserver (Web UI/API) *</li> </ul> <p>* may only be installed on one server (however, some can be clustered)</p> <p>Distributed Polling allows the workers to be spread across additional servers for horizontal scaling. Distributed polling is not intended for remote polling.</p> <p>Devices can be grouped together into a <code>poller_group</code> to pin these devices to a single or a group of designated pollers.</p> <p>All pollers need to write to the same set of RRD files, preferably via RRDcached.</p> <p>It is also a requirement that at least one locking service is in place to which all pollers can connect. There are currently three locking mechanisms available</p> <ul> <li>memcached</li> <li>redis (preferred)</li> <li>sql locks (default)</li> </ul> <p>All of the above locking mechanisms are natively supported in LibreNMS. If none are specified, it will default to using SQL.</p>"},{"location":"Extensions/Distributed-Poller/#requirements-for-distributed-polling","title":"Requirements for distributed polling","text":"<p>These requirements are above the normal requirements for a full LibreNMS install.</p> <ul> <li>rrdtool version 1.4 or above</li> <li>At least one locking mechanism configured</li> <li>a rrdcached install</li> </ul> <p>By default, all hosts are shared and have the <code>poller_group = 0</code>. To pin a device to a poller, set it to a value greater than 0 and set the same value in the poller's config with <code>distributed_poller_group</code>. One can also specify a comma separated string of poller groups in <code>distributed_poller_group</code>.  The poller will then poll devices from any of the groups listed.  If new devices get added from the poller they will be assigned to the first poller group in the list unless the group is specified when adding the device.</p> <p>The following is a standard config, combined with a locking mechanism below:</p> <p>poller/distributed</p> <pre><code>lnms config:set distributed_poller true\nlnms config:set distributed_poller_group 0\n</code></pre> <p>If you want to customise the hostname for the poller then you will need to set this in <code>config.php</code>:</p> <pre><code>$config['distributed_poller_name']           = php_uname('n');\n</code></pre>"},{"location":"Extensions/Distributed-Poller/#locking-mechanisms","title":"Locking mechanisms","text":"<p>Pick one of the following setups, do not use all of them at the same time.</p>"},{"location":"Extensions/Distributed-Poller/#using-redis","title":"Using REDIS","text":"<p>In your <code>.env</code> file you will need to specify a redis server, port and the driver. You can choose to either configure redis OR redis + sentinel for distributed polling.</p>"},{"location":"Extensions/Distributed-Poller/#standalone-redis","title":"Standalone Redis","text":"<p>A single Redis server, this is the simplest setup.</p> <pre><code>REDIS_HOST=HOSTNAME or IP\nREDIS_PORT=6379\nCACHE_STORE=redis\n</code></pre>"},{"location":"Extensions/Distributed-Poller/#redis-sentinel","title":"Redis Sentinel","text":"<p>Redis sentinel provides high availability for Redis. This is more complex, but recommended for production environments.</p> <p>See Redis Sentinel for more information.</p> <pre><code>REDIS_SENTINEL=redis-001.example.org:26379,redis-002.example.org:26379,redis-003.example.org:26379\nREDIS_SENTINEL_SERVICE=mymaster\n\n# If requirepass is set in sentinel, set everything above as well as: (recommended)\nREDIS_SENTINEL_PASSWORD=SentinelPasswordGoesHere\n\n# If ACL's are in use, set everything above as well as: (highly recommended)\nREDIS_SENTINEL_USERNAME=SentinelUsernameGoesHere\n</code></pre>"},{"location":"Extensions/Distributed-Poller/#using-memcached","title":"Using Memcached","text":"<p>Preferably you should set the memcached server settings via the web UI. Under Settings &gt; Global Settings &gt; Distributed poller, you fill out the memcached host and port, and then in your <code>.env</code> file you will need to add:</p> <p><pre><code>CACHE_STORE=memcached\n</code></pre> If you want to use memcached, you will also need to install an additional Python 3 python-memcached package.</p>"},{"location":"Extensions/Distributed-Poller/#example-setups","title":"Example Setups","text":""},{"location":"Extensions/Distributed-Poller/#openstack","title":"OpenStack","text":"<p>Below is an example setup based on a real deployment which at the time of writing covers over 2,500 devices and 50,000 ports. The setup is running within an OpenStack environment with some commodity hardware for remote pollers. Here's a diagram of how you can scale LibreNMS out:</p> <p></p>"},{"location":"Extensions/Distributed-Poller/#esxi","title":"ESXi","text":"<p>This is a distributed setup that I created for a regional hybrid ISP  (fixed wireless/fiber optic backhaul). It was created at around the  ~4,000 device mark to transition from multiple separate instances to one more central. When I left the company, it was monitoring: * 10,800 devices * 307,700 ports * 37,000 processors * 17,000 wireless sensors * ~480,000 other objects/sensors.</p> <p>As our goal was more to catch alerts and monitor overall trends we went with a 10 minute polling cycle. Polling the above would take roughly 8 minutes and 120GHz worth of CPU across all VMs.  CPUs were older Xeons (E5). The diagram below shows the CPU and RAM utilization of each VM during polling. Disk space utilization for SQL/RRD is also included.</p> <p>Device discovery was split off into its own VM as that process would take multiple hours.</p> <p></p> <p>Workers were assigned in the following way:</p> <ul> <li>Web/RRD Server:</li> <li>alerting: 1</li> <li>billing: 2</li> <li>discovery: 0</li> <li>ping: 1</li> <li>poller: 10</li> <li>services: 16</li> <li>Discovery Server:</li> <li>alerting: 1</li> <li>billing: 2</li> <li>discovery: 60</li> <li>ping: 1</li> <li>poller: 5</li> <li>services: 8</li> <li>Pollers</li> <li>alerting: 1</li> <li>billing: 2</li> <li>discovery: 0</li> <li>ping: 1</li> <li>poller: 40</li> <li>services: 8</li> </ul> <p>Each poller had on average 19,500/24,000 worker seconds consumed.</p> <p>RRDCached is incredibly important; this setup ran on spinning disks due to the wonders of caching.</p> <p>I very strongly recommend setting up recursive DNS on your discovery  and polling servers. While I used DNSMASQ there are many options.</p> <p>SQL tuner will help you quite a bit. You'll also want to increase your  maximum connections amount to support the pollers. This setup was at 500. Less important, but putting ~12GB of the database in RAM was reported to  have helped web UI performance as well as some DB-heavy Tableau reports. RAM was precious in this environment or it would've been more, but it wasn't necessary either.</p> <p>Be careful with keeping the default value for 'Device Down Retry' as it can eat up quite a lot of poller activity. I freed up over 20,000 worker seconds when setting this to only happen once or twice per 10-minute polling cycle.  The impact of this will vary depending on the percentage of down device in your system. This example had it set at 400 seconds.</p> <p>Also be wary of keeping event log and syslog entries for too long as it can have a pretty negative effect on web UI performance.</p> <p>To resolve an issue with large device groups the php fpm max input vars was increased to 20000.</p> <p>All of these VMs were within the same physical data center so latency was minimal.</p> <p>The decision of redis over the other locking methods was arbitrary but in over 2 years  I never had to touch that VM aside from security updates.</p> <p>This install used the service instead of cron.</p>"},{"location":"Extensions/Distributed-Poller/#architecture","title":"Architecture","text":"<p>How you set the distribution up is entirely up to you. You can choose to host the majority of the required services on a single virtual machine or server and then a poller to actually query the devices being monitored, all the way through to having a dedicated server for each of the individual roles. Below are notes on what you need to consider both from the software layer, but also connectivity.</p>"},{"location":"Extensions/Distributed-Poller/#web-api-layer","title":"Web / API Layer","text":"<p>This is typically Apache but we have setup guides for both Nginx and Lighttpd which should work perfectly fine. There is nothing unique about the role this service is providing except that if you are adding devices from this layer then the web service will need to be able to connect to the end device via SNMP and perform an ICMP test.</p> <p>It is advisable to run RRDCached within this setup so that you don't need to share the rrd folder via a remote file share such as NFS. The web service can then generate rrd graphs via RRDCached. If RRDCached isn't an option then you can mount the rrd directory to read the RRD files directly.</p>"},{"location":"Extensions/Distributed-Poller/#database-server","title":"Database Server","text":"<p>MySQL / MariaDB - At the moment these are the only database servers that are supported.</p> <p>The pollers, web and API layers should all be able to access the database server directly.</p>"},{"location":"Extensions/Distributed-Poller/#rrd-storage","title":"RRD Storage","text":"<p>Central storage should be provided so all RRD files can be read from and written to in one location. As suggested above, it's recommended that RRD Cached is configured and used.</p> <p>For this example, we are running RRDCached to allow all pollers and web/api servers to read/write to the rrd files with the rrd directory also exported by NFS for simple access and maintenance.</p>"},{"location":"Extensions/Distributed-Poller/#pollers","title":"Pollers","text":"<p>Pollers can be installed and run from anywhere, the only requirements are:</p> <ul> <li>They can access the Memcache instance</li> <li>They can create RRD files via some method such as a shared   filesystem or RRDTool &gt;=1.5.5</li> <li>They can access the MySQL server</li> </ul> <p>You can either assign pollers into groups and set a poller group against certain devices, this will mean that those devices will only be processed by certain pollers (default poller group is 0) or you can assign all pollers to the default poller group for them to process any and all devices.</p> <p>This will provide the ability to have a single poller behind a NAT firewall monitor internal devices and report back to your central system. You will then be able to monitor those devices from the Web UI as normal.</p> <p>Another benefit to this is that you can provide N+x pollers, i.e if you know that you require three pollers to process all devices within 300 seconds then adding a 4th poller will mean that should any one single poller fail then the remaining three will complete polling in time. You could also use this to take a poller out of service for maintenance, i.e OS updates and software updates.</p> <p>It is extremely advisable to either run a central recursive dns server such as pdns-recursor and have all of your pollers use this or install a recursive dns server on each poller - the volume of DNS requests on large installs can be significant and will slow polling down enough to cause issues with a large number of devices.</p> <p>A last note to make sure of, is that all pollers writing to the same DB need to have the same <code>APP_KEY</code> value set in the <code>.env</code> file.</p>"},{"location":"Extensions/Distributed-Poller/#discovery","title":"Discovery","text":"<p>Depending on your setup will depend on how you configure your discovery processes.</p> <p>Cron based polling</p> <p>It's not necessary to run discovery services on all pollers. In fact, you should only run one discovery process per poller group. Designate a single poller to run discovery (or a separate server if required).</p> <p>If you run billing, you can do this in one of two ways:</p> <ol> <li>Run poll-billing.php and calculate-billing.php on a single poller which will  create billing information for all bills. Please note this poller must have  snmp access to all of your devices which have ports within a bill.</li> <li>The other option is to enable <code>$config['distributed_billing'] = true;</code> in  config.php. Then run poll-billing.php on a single poller per group. You can run  calculate-billing.php on any poller but only one poller overall.</li> </ol> <p>Dispatcher service When using the dispatcher service, discovery can run on all nodes.</p>"},{"location":"Extensions/Distributed-Poller/#configuration","title":"Configuration","text":"<p>Settings in config.php should be copied to all servers as they only apply locally.</p> <p>One way around this is to set settings in the database via the web ui or <code>./lnms config:set</code></p>"},{"location":"Extensions/Distributed-Poller/#config-sample","title":"Config sample","text":"<p>The following config is taken from a live setup which consists of a Web server, DB server, RRDCached server and 3 pollers.</p> <p>Web Server:</p> <p>Running Apache and an install of LibreNMS in /opt/librenms</p> <p>poller/distributed</p> <pre><code>lnms config:set distributed_poller true\n</code></pre> <p>poller/rrdtool</p> <pre><code>lnms config:set rrdcached \"example.com:42217\"\n</code></pre> <p>Database Server: Running Memcache and MariaDB</p> <ul> <li>Memcache</li> </ul> <p>Ubuntu (/etc/memcached.conf)</p> <pre><code>-d\n-m 64\n-p 11211\n-u memcache\n-l ip.ip.ip.ip\n</code></pre> <p>RRDCached Server: Running RRDCached</p> <ul> <li>RRDCached</li> </ul> <p>Ubuntu (/etc/default/rrdcached)</p> <pre><code>OPTS=\"-l 0:42217\"\nOPTS=\"$OPTS -j /var/lib/rrdcached/journal/ -F\"\nOPTS=\"$OPTS -b /opt/librenms/rrd -B\"\nOPTS=\"$OPTS -w 1800 -z 900\"\n</code></pre> <p>Ubuntu (/etc/default/rrdcached) - RRDCached 1.5.5 and above.</p> <pre><code>BASE_OPTIONS=\"-l 0:42217\"\nBASE_OPTIONS=\"$BASE_OPTIONS -R -j /var/lib/rrdcached/journal/ -F\"\nBASE_OPTIONS=\"$BASE_OPTIONS -b /opt/librenms/rrd -B\"\nBASE_OPTIONS=\"$BASE_OPTIONS -w 1800 -z 900\"\n</code></pre> <p>Poller 1: Running an install of LibreNMS in /opt/librenms</p> <p><code>config.php</code></p> <pre><code>$config['distributed_poller_name']           = php_uname('n');\n$config['distributed_poller_group']          = '0';\n$config['distributed_billing']               = true;\n</code></pre> <p>poller/distributed</p> <pre><code>lnms config:set distributed_poller_memcached_host \"example.com\"\nlnms config:set distributed_poller_memcached_port 11211\nlnms config:set distributed_poller true\n</code></pre> <p>poller/rrdtool</p> <pre><code>lnms config:set rrdcached \"example.com:42217\"\n</code></pre> <p><code>/etc/cron.d/librenms</code></p> <p>Runs discovery and polling for group 0, daily.sh to deal with notifications and DB cleanup and alerts.</p> <pre><code>33   */6  * * *   librenms    /opt/librenms/cronic /opt/librenms/discovery-wrapper.py 1\n*/5  *    * * *   librenms    /opt/librenms/discovery.php -h new &gt;&gt; /dev/null 2&gt;&amp;1\n*/5  *    * * *   librenms    /opt/librenms/cronic /opt/librenms/poller-wrapper.py 16\n15   0    * * *   librenms    /opt/librenms/daily.sh &gt;&gt; /dev/null 2&gt;&amp;1\n*    *    * * *   librenms    /opt/librenms/alerts.php &gt;&gt; /dev/null 2&gt;&amp;1\n</code></pre> <p>Poller 2: Running an install of LibreNMS in /opt/librenms</p> <p><code>config.php</code></p> <pre><code>$config['distributed_poller_name']           = php_uname('n');\n$config['distributed_poller_group']          = '0';\n$config['distributed_billing']               = true;\n</code></pre> <p>poller/distributed</p> <pre><code>lnms config:set distributed_poller_memcached_host \"example.com\"\nlnms config:set distributed_poller_memcached_port 11211\nlnms config:set distributed_poller true\n</code></pre> <p>poller/rrdtool</p> <pre><code>lnms config:set rrdcached \"example.com:42217\"\n</code></pre> <p><code>/etc/cron.d/librenms</code></p> <p>Runs billing as well as polling for group 0.</p> <pre><code>*/5 * * * * librenms /opt/librenms/poller-wrapper.py 16 &gt;&gt; /opt/librenms/logs/wrapper.log\n*/5 * * * * librenms /opt/librenms/poll-billing.php &gt;&gt; /dev/null 2&gt;&amp;1\n01  * * * * librenms /opt/librenms/billing-calculate.php &gt;&gt; /dev/null 2&gt;&amp;1\n15  0 * * * librenms    /opt/librenms/daily.sh &gt;&gt; /dev/null 2&gt;&amp;1\n</code></pre> <p>Poller 3: Running an install of LibreNMS in /opt/librenms</p> <p><code>config.php</code></p> <pre><code>$config['distributed_poller_name']           = php_uname('n');\n$config['distributed_poller_group']          = '2,3';\n$config['distributed_billing']               = true;\n</code></pre> <p>poller/distributed</p> <pre><code>lnms config:set distributed_poller_memcached_host \"example.com\"\nlnms config:set distributed_poller_memcached_port 11211\nlnms config:set distributed_poller true\n</code></pre> <p>poller/rrdtool</p> <pre><code>lnms config:set rrdcached \"example.com:42217\"\n</code></pre> <p><code>/etc/cron.d/librenms</code> Runs discovery and polling for groups 2 and 3.</p> <pre><code>33  */6 * * *   librenms    /opt/librenms/cronic /opt/librenms/discovery-wrapper.py 1\n*/5 *   * * *   librenms    /opt/librenms/discovery.php -h new &gt;&gt; /dev/null 2&gt;&amp;1\n*/5 *   * * *   librenms    /opt/librenms/poll-billing.php &gt;&gt; /dev/null 2&gt;&amp;1\n*/5 *   * * *   librenms    /opt/librenms/cronic /opt/librenms/poller-wrapper.py 16\n15  0   * * *   librenms    /opt/librenms/daily.sh &gt;&gt; /dev/null 2&gt;&amp;1\n</code></pre>"},{"location":"Extensions/Fast-Ping-Check/","title":"Fast up/down checking","text":"<p>Normally, LibreNMS sends an ICMP ping to the device before polling to check if it is up or down. This check is tied to the poller frequency, which is normally 5 minutes.  This means it may take up to 5 minutes to find out if a device is down.</p> <p>Some users may want to know if devices stop responding to ping more quickly than that. LibreNMS offers a ping.php script to run ping checks as quickly as possible without increasing snmp load on your devices by switching to 1 minute polling.</p> <p>WARNING: If you do not have an alert rule that alerts on device status, enabling this will be a waste of resources. You can find one in the Alert Rules Collection.</p>"},{"location":"Extensions/Fast-Ping-Check/#setting-the-ping-check-to-1-minute","title":"Setting the ping check to 1 minute","text":"<p>1: If you are using RRDCached, stop the service.</p> <pre><code>- This will flush all pending writes so that the rrdstep.php script can change the steps.\n</code></pre> <p>2: Change the ping_rrd_step setting in config.php</p> <p>poller/rrdtool</p> <pre><code>lnms config:set ping_rrd_step 60\n</code></pre> <p>3: Update the rrd files to change the step (step is hardcoded at file creation in rrd files)</p> <pre><code>./scripts/rrdstep.php -h all\n</code></pre> <p>4: Add the following line to /etc/cron.d/librenms to allow 1 minute ping checks</p> <pre><code>*    *    * * *   librenms    /opt/librenms/ping.php &gt;&gt; /dev/null 2&gt;&amp;1\n</code></pre> <p>5: If applicable: Start the RRDCached service</p> <p>NOTE: If you are using distributed pollers you can restrict a poller to a group by appending <code>-g</code> to the cron entry.  Alternatively, you should only run ping.php on a single node.</p>"},{"location":"Extensions/Fast-Ping-Check/#sub-minute-ping-check","title":"Sub minute ping check","text":"<p>Cron only has a resolution of one minute, so for sub-minute ping checks we need to adapt both <code>ping</code> and <code>alerts</code> entries. We add two entries per function, but add a delay before one of these entries.</p> <p>Remember, you need to remove the original <code>ping.php</code> and <code>alerts.php</code> entries in crontab before proceeding!</p> <p>1: Set ping_rrd_step</p> <p>poller/rrdtool</p> <pre><code>lnms config:set ping_rrd_step 30\n</code></pre> <p>2: Update the rrd files</p> <pre><code>./scripts/rrdstep.php -h all\n</code></pre> <p>3: Update cron (removing any other ping.php or alert.php entries)</p> <pre><code>*    *    * * *   librenms    /opt/librenms/ping.php &gt;&gt; /dev/null 2&gt;&amp;1\n*    *    * * *   librenms    sleep 30 &amp;&amp; /opt/librenms/ping.php &gt;&gt; /dev/null 2&gt;&amp;1\n*    *    * * *   librenms    sleep 15 &amp;&amp; /opt/librenms/alerts.php &gt;&gt; /dev/null 2&gt;&amp;1\n*    *    * * *   librenms    sleep 45 &amp;&amp; /opt/librenms/alerts.php &gt;&gt; /dev/null 2&gt;&amp;1\n</code></pre>"},{"location":"Extensions/Fast-Ping-Check/#device-dependencies","title":"Device dependencies","text":"<p>The ping.php script respects device dependencies, but the main poller does not (for technical reasons). However, using this script does not disable the icmp check in the poller and a child may be reported as down before the parent.</p>"},{"location":"Extensions/Fast-Ping-Check/#settings","title":"Settings","text":"<p><code>ping.php</code> uses much the same settings as the poller fping with one exception: retries is used instead of count. <code>ping.php</code> does not measure loss and avg response time, only up/down, so once a device responds it stops pinging it.</p> <p>poller/ping</p> <pre><code>lnms config:set fping_options.retries 2\nlnms config:set fping_options.timeout 500\nlnms config:set fping_options.interval 500\n</code></pre>"},{"location":"Extensions/Galera-Cluster/","title":"MariaDB Galera Cluster","text":"<p>This is currently being tested, use at your own risk.</p> <p>LibreNMS can be used with a MariaDB Galera Cluster. This is a Multi Master cluster, meaning each node in the cluster can read and write to the database. They all have the same ability. LibreNMS will randomly choose a working node to read and write requests to.</p> <p>For more information see https://laravel.com/docs/database#read-and-write-connections</p>"},{"location":"Extensions/Galera-Cluster/#getting-started","title":"Getting Started","text":"<ul> <li>It is best practice to have a minimum of 3 nodes in the cluster, A odd number of nodes is recommended in the event nodes have a disagreement on data, they will have a tie breaker.</li> <li>It's recommended that all servers be similar in hardware performance, cluster performance can be affected by the slowest server in the cluster.</li> <li>Backup the database before starting, and backing up the database regularly is still recommended even in a working cluster environment.</li> </ul>"},{"location":"Extensions/Galera-Cluster/#install-and-configure-galera","title":"Install and Configure Galera","text":""},{"location":"Extensions/Galera-Cluster/#install-galera4-and-mariadb-server","title":"Install Galera4 and MariaDB Server","text":"<p>These can be obtained from your OS package manager. For example in Ubuntu. <pre><code>sudo apt-get install mariadb-server mariadb-client galera-4\n</code></pre></p>"},{"location":"Extensions/Galera-Cluster/#create-galera-config","title":"Create Galera Config","text":"<p>Create a new file /etc/mysql/conf.d/galera.conf on each node</p> <p><pre><code>[mysqld]\nbinlog_format=ROW\ndefault-storage-engine=innodb\ninnodb_autoinc_lock_mode=2\nbind-address=0.0.0.0\n\n# Galera Provider Configuration\nwsrep_on=ON\nwsrep_provider=/usr/lib/galera/libgalera_smm.so\n\n# Galera Cluster Configuration\nwsrep_cluster_name=\"librenms_cluster\"\nwsrep_cluster_address=\"gcomm://192.168.1.35,192.168.1.36,192.168.1.37,192.168.1.38,192.168.1.39\"\n\n# Galera Synchronization Configuration\nwsrep_sst_method=rsync\n\n# Galera Node Configuration\nwsrep_node_address=\"192.168.1.35\"\nwsrep_node_name=\"librenms1.35\"\n</code></pre> Change the following values for your environment. * wsrep_cluster_address -  All the IP address's of your nodes. * wsrep_cluster_name - Name of cluster, should be the same for all nodes * wsrep_node_address - IP address of this node. * wsrep_node_name - Name of this node.</p>"},{"location":"Extensions/Galera-Cluster/#edit-librenms-env","title":"Edit LibreNMS .env","text":"<p>LibreNMS supports up to 9 galera nodes, you define these nodes in the .env file. For each node we have the ability to define if this librenms installation/poller is able to write, read or both to that node. The galera nodes you define here can be the same or differnt for each librenms poller. If you have a poller you only want to write/read to one galera node, you would simply add one DB_HOST, and omit all the rest. This allows you to precisely control what galera nodes a librenms poller is reading and or writing too.</p> <ul> <li>DB_HOST is always set to read/write.</li> <li>DB_HOST must be set, however, it does not have to be the same on each poller, it can be different as long as it's part of the same galera cluster.</li> <li>If the node that is set to DB_HOST is down, things like <code>lnms db</code> command no longer work, as they only use DB_HOST and don't failover to other nodes.</li> <li>Set DB_CONNECTION=mysql_cluster to enable</li> <li>DB_STICKY can be used if you are pulling out of sync data form the database in a read request. For more information see https://laravel.com/docs/database#the-sticky-option</li> </ul> <p>The below example setting up 5 nodes</p> <p><pre><code>DB_HOST=192.168.1.35\nDB_HOST_R2=192.168.1.36\nDB_HOST_R3=192.168.1.37\nDB_HOST_R4=192.168.1.38\nDB_HOST_R5=192.168.1.39\nDB_HOST_W2=192.168.1.36\nDB_HOST_W3=192.168.1.37\n\nDB_STICKY=true\nDB_CONNECTION=mysql_cluster\nDB_DATABASE=librenms\nDB_USERNAME=librenms\nDB_PASSWORD=password\n</code></pre> The above .env on a librenms installation/poller would communicate to each galera node as follows.</p> <ul> <li>192.168.1.35 - Read/Write</li> <li>192.168.1.36 - Read/Write</li> <li>192.168.1.37 - Read/Write</li> <li>192.168.1.38 - Read Only</li> <li>192.168.1.39 - Read Only</li> </ul>"},{"location":"Extensions/Galera-Cluster/#starting-galera-cluster-for-the-first-time","title":"Starting Galera Cluster for the first time.","text":"<p>1) Shutdown MariaDB server on ALL nodes.     <pre><code>sudo systemctl stop mariadb-server\n</code></pre> 2) On the server with your existing database or any mariadb server if you are starting without existing data, run the following command     <pre><code>sudo galera_new_cluster\n</code></pre> 3) Start the rest of the nodes normally.     <pre><code>sudo systemctl start mariadb-server\n</code></pre></p>"},{"location":"Extensions/Galera-Cluster/#galera-cluster-status","title":"Galera Cluster Status","text":"<p>To see some stats on how the Galera cluster is preforming run the following.</p> <p><pre><code>lnms db\n</code></pre> In the database run following mysql query <pre><code>SHOW GLOBAL STATUS LIKE 'wsrep_%';\n</code></pre></p> Variable Name Value Notes ----------------------------------- ---------------------------------------------------------------- --------------------------------------------------------- wsrep_cluster_size 2 Current number of nodes in Cluster wsrep_cluster_state_uuid e71582f3-cf14-11eb-bcf6-a23029e16405 Last Transaction UUID, Should be the same for each node wsrep_connected On On = Connected with other nodes wsrep_local_state_comment Synced Synced with other nodes"},{"location":"Extensions/Galera-Cluster/#restarting-the-entire-cluster","title":"Restarting the Entire Cluster","text":"<p>In a cluster environment, steps should be taken to ensure that ALL nodes are not offline at the same time. Failed nodes can recover without issue as long as one node remains online. In the event that ALL nodes are offline, the following should be done to ensure you are starting the cluster with the most up-to-date database. To do this login to each node and running the following</p> <pre><code>sudo cat /var/lib/data/grastate.dat\n</code></pre> <pre><code># GALERA saved state\nversion: 2.1\nuuid:    e71582f3-cf14-11eb-bcf6-a23029e16405\nseqno:   -1\nsafe_to_bootstrap: 1\n</code></pre> <p>If the safe_to_bootstrap = 1, then Galera determined that this node has the most up-to-date database and can be safeley used to start the cluster.</p> <p>Once you have found a node that can be used for starting the cluster, follow the steps in starting for the first time.</p>"},{"location":"Extensions/Gateone/","title":"GateOne integration","text":"<p>We have simple integration for GateOne, you will be redirected to your Gateone command line frontend to access your equipment. (Currently this only works with SSH)</p> <p>GateOne itself isn't included within LibreNMS, you will need to install this separately either on the same infrastructure as LibreNMS or as a totally  standalone appliance. The installation is beyond the scope of this document.</p> <p>Config is simple, include the following in your <code>config.php</code>:</p> <pre><code>$config['gateone']['server'] = 'http://&lt;your_gateone_url/';\n</code></pre> <p>Note: You must use the full url including the trailing <code>/</code>!</p> <p>We also support prefixing the currently logged in Librenms user to the SSH connection URL that is created, eg. <code>ssh://admin@localhost</code> To enable this, put the following in your <code>config.php</code>:</p> <pre><code>$config['gateone']['use_librenms_user'] = true;\n</code></pre>"},{"location":"Extensions/Graylog/","title":"Graylog integration","text":"<p>We have simple integration for Graylog, you will be able to view any logs from within LibreNMS that have been parsed by the syslog input from within Graylog itself. This includes logs from devices which aren't in LibreNMS still, you can also see logs for a specific device under the logs section for the device.</p> <p>Currently, LibreNMS does not associate shortnames from Graylog with full FQDNS. If you have your devices in LibreNMS using full FQDNs, such as hostname.example.com, be aware that rsyslogd, by default, sends the shortname only. To fix this, add</p> <p><code>$PreserveFQDN on</code></p> <p>to your rsyslog config to send the full FQDN so device logs will be associated correctly in LibreNMS. Also see near the bottom of this document for tips on how to enable/suppress the domain part of hostnames in syslog-messages for some platforms.</p> <p>Graylog itself isn't included within LibreNMS, you will need to install this separately either on the same infrastructure as LibreNMS or as a totally standalone appliance.</p> <p>Config is simple, here's an example based on Graylog 2.4:</p> <p>external/graylog</p> <pre><code>lnms config:set graylog.server 'http://127.0.0.1'\nlnms config:set graylog.port 9000\nlnms config:set graylog.username admin\nlnms config:set graylog.password 'admin'\nlnms config:set graylog.version 2.4\n</code></pre>"},{"location":"Extensions/Graylog/#timezone","title":"Timezone","text":"<p>Graylog messages are stored using GMT timezone. You can display graylog messages in LibreNMS webui using your desired timezone by setting the following option using <code>lnms config:set</code>:</p> <p>external/graylog</p> <pre><code>lnms config:set graylog.timezone 'Europe/Bucharest'\n</code></pre> <p>Timezone must be PHP supported timezones, available at: https://php.net/manual/en/timezones.php</p>"},{"location":"Extensions/Graylog/#graylog-version","title":"Graylog Version","text":"<p>If you are running a version earlier than Graylog then please set</p> <p>external/graylog</p> <pre><code>lnms config:set graylog.version 2.1\n</code></pre> <p>to the version  number of your Graylog install. Earlier versions than 2.1 use the default port <code>12900</code></p>"},{"location":"Extensions/Graylog/#uri","title":"URI","text":"<p>If you have altered the default uri for your Graylog setup then you can override the default of <code>/api/</code> using</p> <p>external/graylog</p> <pre><code>lnms config:set graylog.base_uri '/somepath/'\n</code></pre>"},{"location":"Extensions/Graylog/#user-credentials","title":"User Credentials","text":"<p>If you don't want to use an admin account for connection to Graylog Log into http:///api/api-browser/global/index.html using graylog admin credentials Browse to: Roles: User roles Click on: Create a new role In JSON body paste this: <p><pre><code>{\n    \"name\": \"LibreNMS-Read\",\n    \"description\": \"Extended reading permissions for LibreNMS\",\n    \"permissions\" : [\n        \"searches:relative\",\n        \"streams:read\"\n    ]\n}\n</code></pre> Press \u201cTry it out\u201d Log into graylog web ui as admin and add the role to the user</p> <p>Otherwise you must give the user \"admin\" permissions from within Graylog, \"read\" permissions alone are not sufficient.</p>"},{"location":"Extensions/Graylog/#tls-certificate","title":"TLS Certificate","text":"<p>If you have enabled TLS for the Graylog API and you are using a self-signed certificate, please make sure that the certificate is trusted by your LibreNMS host, otherwise the connection will fail. Additionally, the certificate's Common Name (CN) has to match the FQDN or IP address specified in</p> <p>external/graylog</p> <pre><code>lnms config:set graylog.server example.com\n</code></pre>"},{"location":"Extensions/Graylog/#match-any-address","title":"Match Any Address","text":"<p>If you want to match the source address of the log entries against any IP address of a device instead of only against the primary address and the host name to assign the log entries to a device, you can activate this function using</p> <pre><code>lnms config:set graylog.match-any-address true\n</code></pre>"},{"location":"Extensions/Graylog/#recent-devices","title":"Recent Devices","text":"<p>There are 2 configuration parameters to influence the behaviour of the \"Recent Graylog\" table on the overview page of the devices.</p> <p>external/graylog</p> <pre><code>lnms config:set graylog.device-page.rowCount 10\n</code></pre> <p>Sets the maximum number of rows to be displayed (default: 10)</p> <p>external/graylog</p> <pre><code>lnms config:set graylog.device-page.loglevel 7\n</code></pre> <p>You can set which loglevels that should be displayed on the overview page. (default: 7, min: 0, max: 7)</p> <p>external/graylog</p> <pre><code>lnms config:set graylog.device-page.loglevel 4\n</code></pre> <p>Shows only entries with a log level less than or equal to 4 (Emergency, Alert, Critical, Error, Warning).</p> <p>You can set a default Log Level Filter with <pre><code>lnms config:set graylog.loglevel 7\n</code></pre>  (applies to  /graylog and /device/device=/tab=logs/section=graylog/ (min: 0, max: 7)</p>"},{"location":"Extensions/Graylog/#domain-and-hostname-handling","title":"Domain and hostname handling","text":"<p>Suppressing/enabling the domain part of a hostname for specific platforms</p> <p>You should see if what you get in syslog/Graylog matches up with your configured hosts first. If you need to modify the syslog messages from specific platforms, this may be of assistance:</p>"},{"location":"Extensions/Graylog/#ios-cisco","title":"IOS (Cisco)","text":"<pre><code>router(config)# logging origin-id hostname\n</code></pre> <p>or</p> <pre><code>router(config)# logging origin-id string\n</code></pre>"},{"location":"Extensions/Graylog/#junos-juniper-networks","title":"JunOS (Juniper Networks)","text":"<pre><code>set system syslog host yourlogserver.corp log-prefix YOUR_PREFERRED_STRING\n</code></pre>"},{"location":"Extensions/Graylog/#panos-palo-alto-networks","title":"PanOS (Palo Alto Networks)","text":"<pre><code>set deviceconfig setting management hostname-type-in-syslog hostname\n</code></pre> <p>or</p> <pre><code>set deviceconfig setting management hostname-type-in-syslog FQDN\n</code></pre>"},{"location":"Extensions/IRC-Bot-Extensions/","title":"IRC Bot Extensions","text":"<p>Okay this is a very quick walk-through in writing your own <code>commands</code> for the IRC-Bot.</p> <p>First of all, create a file in <code>includes/ircbot</code>, the file-name should be in this format: <code>command.inc.php</code>.</p> <p>When editing the file, do not open nor close PHP-tags. Any variable you assign will be discarded as soon as your command returns. Some variables, specially all listed under <code>$this-&gt;</code>, have special meanings or effects. Before a command is executed, the IRC-Bot ensures that the MySQL-Socket is working, that <code>$this-&gt;user</code> points to the right user and that the user is authenticated. Below you will find a table with related functions and attributes. You can chain-load any built-in command by calling <code>$this-&gt;_command(\"My Parameters\")</code>. You cannot chain-load external commands.</p> <p>To enable your command, edit your <code>config.php</code> and add something like this:</p> <pre><code>   ...\n   $config['irc_external'][] = \"mycommand\";\n   ...\n</code></pre> <p>See: Example</p>"},{"location":"Extensions/IRC-Bot-Extensions/#functions-and-attributes","title":"Functions and Attributes","text":"<p>... that are accessible from within an extension</p>"},{"location":"Extensions/IRC-Bot-Extensions/#functions","title":"Functions","text":"Function( (Type) $Variable [= Default] [,...] ) Returns Description <code>$this-&gt;getChan( )</code> <code>String</code> Returns <code>channel</code> of current event. <code>$this-&gt;getData( (boolean) $Block = false )</code> <code>String/Boolean</code> Returns a <code>line</code> from the IRC-Buffer if it's not matched against any other <code>command</code>. If <code>$Block</code> is <code>true</code>, wait until a suitable line is returned. <code>$this-&gt;getUser( )</code> <code>String</code> Returns <code>nick</code> of current user. Not to confuse with <code>$this-&gt;user</code>! <code>$this-&gt;get_user( )</code> <code>Array</code> See <code>$this-&gt;user</code> in Attributes. <code>$this-&gt;irc_raw( (string) $Protocol )</code> <code>Boolean</code> Sends raw IRC-Protocol. <code>$this-&gt;isAuthd( )</code> <code>Boolean</code> <code>true</code> if the user is authenticated. <code>$this-&gt;joinChan( (string) $Channel )</code> <code>Boolean</code> Joins given <code>$Channel</code>. <code>$this-&gt;log( (string) $Message )</code> <code>Boolean</code> Logs given <code>$Message</code> into <code>STDOUT</code>. <code>$this-&gt;read( (string) $Buffer )</code> <code>String/Boolean</code> Returns a <code>line</code> from given <code>$Buffer</code> or <code>false</code> if there's nothing suitable inside the Buffer. Please use <code>$this-&gt;getData()</code> for handler-safe data retrieval. <code>$this-&gt;respond( (string) $Message )</code> <code>Boolean</code> Responds to the <code>request</code> auto-detecting channel or private message."},{"location":"Extensions/IRC-Bot-Extensions/#attributes","title":"Attributes","text":"Attribute Type Description <code>$params</code> <code>String</code> Contains all arguments that are passed to the <code>.command</code>. <code>$this-&gt;chan</code> <code>Array</code> Channels that are configured. <code>$this-&gt;commands</code> <code>Array</code> Contains accessible <code>commands</code>. <code>$this-&gt;config</code> <code>Array</code> Contains <code>$config</code> from <code>config.php</code>. <code>$this-&gt;data</code> <code>String</code> Contains raw IRC-Protocol. <code>$this-&gt;debug</code> <code>Boolean</code> Debug-Flag. <code>$this-&gt;external</code> <code>Array</code> Contains loaded extra <code>commands</code>. <code>$this-&gt;nick</code> <code>String</code> Bot's <code>nick</code> on the IRC. <code>$this-&gt;pass</code> <code>String</code> IRC-Server's passphrase. <code>$this-&gt;port</code> <code>Int</code> IRC-Server's port-number. <code>$this-&gt;server</code> <code>String</code> IRC-Server's hostname. <code>$this-&gt;ssl</code> <code>Boolean</code> SSL-Flag. <code>$this-&gt;tick</code> <code>Int</code> Interval to check buffers in microseconds. <code>$this-&gt;user</code> <code>Array</code> Array containing details about the <code>user</code> that sent the <code>request</code>."},{"location":"Extensions/IRC-Bot-Extensions/#example","title":"Example","text":"<p><code>includes/ircbot/join-ng.inc.php</code></p> <pre><code>   if( $this-&gt;user['level'] != 10 ) {\n      return $this-&gt;respond(\"Sorry only admins can make me join.\");\n   }\n   if( $this-&gt;getChan() == \"#noc\") {\n      $this-&gt;respond(\"Joining $params\");\n      $this-&gt;joinChan($params);\n   } else {\n      $this-&gt;respond(\"Sorry, only people from #noc can make join.\");\n   }\n</code></pre> <p><code>config.php</code></p> <pre><code>   ...\n   $config['irc_external'][] = \"join-ng\";\n   ...\n</code></pre>"},{"location":"Extensions/IRC-Bot/","title":"IRC Bot","text":"<p>LibreNMS has an easy to use IRC-Interface for basic tasks like viewing last log-entry, current device/port status and such.</p> <p>By default the IRC-Bot will not start when executed and will return an error until at least <code>$config['irc_host']</code> and <code>$config['irc_port']</code> has been specified inside <code>config.php</code>. (To start the IRC-Bot run ./irc.php )</p> <p>If no channel has been specified with <code>$config['irc_chan']</code>, <code>##librenms</code> will be used. The default Nick for the bot is <code>LibreNMS</code>.</p> <p>The Bot will reply the same way it's being called. If you send it the commands via Query, it will respond in the Query. If you send the commands via a Channel, then it will respond in the Channel.</p>"},{"location":"Extensions/IRC-Bot/#configuration-defaults","title":"Configuration &amp; Defaults","text":"Option Default-Value Notes <code>$config['irc_alert']</code> <code>false</code> Optional; Enables Alerting-Socket. <code>EXPERIMENTAL</code> <code>$config['irc_alert_chan']</code> <code>false</code> Optional; Multiple channels can be defined as Array or delimited with <code>,</code>. <code>EXPERIMENTAL</code> <code>$config['irc_alert_utf8']</code> <code>false</code> Optional; Enables use of strikethrough in alerts via UTF-8 encoded characters. Might cause trouble for some clients. <code>$config['irc_alert_short']</code> <code>false</code> Optional; Send a one line alert summary instead of multi-line detailed alert. <code>$config['irc_authtime']</code> <code>3</code> Optional; Defines how long in Hours an auth-session is valid. <code>$config['irc_chan']</code> <code>##librenms</code> Optional; Multiple channels can be defined as Array or delimited with <code>,</code>. Passwords are defined after a <code>space-character</code>. <code>$config['irc_debug']</code> <code>false</code> Optional; Enables debug output (Wall of text) <code>$config['irc_external']</code> Optional; Array or <code>,</code> delimited string with commands to include from <code>includes/ircbot/*.inc.php</code> <code>$config['irc_host']</code> Required; Domain or IP to connect. If it's an IPv6 Address, embed it in <code>[]</code>.  (Example: <code>[::1]</code>) <code>$config['irc_maxretry']</code> <code>5</code> Optional; How many connection attempts should be made before giving up <code>$config['irc_nick']</code> <code>LibreNMS</code> Optional; <code>$config['irc_pass']</code> Optional; This sends the IRC-PASS Sequence to IRC-Servers that require Password on Connect <code>$config['irc_port']</code> <code>6667</code> Required; To enable SSL append a <code>+</code> before the Port. (Example: <code>+6697</code>) <code>$config['irc_ctcp']</code> <code>false</code> Optional; Enable/disable ctcp-replies from the bot (currently VERSION, PING and TIME). <code>$config['irc_ctcp_version']</code> <code>LibreNMS IRCbot. https://www.librenms.org/</code> Optional; Reply-string to CTCP VERSION requests <code>$config['irc_auth']</code> Optional; Array of hostmasks that are automatically authenticated."},{"location":"Extensions/IRC-Bot/#irc-commands","title":"IRC-Commands","text":"Command Description <code>.auth &lt;User/Token&gt;</code> If <code>&lt;user&gt;</code>: Request an Auth-Token. If <code>&lt;token&gt;</code>: Authenticate session. <code>.device &lt;hostname&gt;</code> Prints basic information about given <code>hostname</code>. <code>.down</code> List hostnames that are down, if any. <code>.help</code> List available commands. <code>.join &lt;channel&gt;</code> Joins <code>&lt;channel&gt;</code> if user has admin-level. <code>.listdevices</code> Lists the hostnames of all known devices. <code>.log [&lt;N&gt;]</code> Prints <code>N</code> lines or last line of the eventlog. <code>.port &lt;hostname&gt; &lt;ifname&gt;</code> Prints Port-related information from <code>ifname</code> on given <code>hostname</code>. <code>.quit</code> Disconnect from IRC and exit. <code>.reload</code> Reload configuration. <code>.status &lt;type&gt;</code> Prints status information for given <code>type</code>. Type can be <code>devices</code>, <code>services</code>, <code>ports</code>. Shorthands are: <code>dev</code>,<code>srv</code>,<code>prt</code> <code>.version</code> Prints <code>$this-&gt;config['project_name_version']</code>. <p>( /!\\ All commands are case-insensitive but their arguments are case-sensitive)</p>"},{"location":"Extensions/IRC-Bot/#examples","title":"Examples","text":""},{"location":"Extensions/IRC-Bot/#server-examples","title":"Server examples","text":"<p>Unencrypted Connection to <code>irc.libera.chat</code>:</p> <pre><code>   ...\n   $config['irc_host'] = \"irc.libera.chat\";\n   $config['irc_port'] = 6667;\n   ...\n</code></pre> <p>SSL-Encrypted Connection to <code>irc.libera.chat</code>:</p> <pre><code>   ...\n   $config['irc_host'] = \"irc.libera.chat\";\n   $config['irc_port'] = \"+6697\";\n   ...\n</code></pre> <p>SSL-Encrypted Connection to <code>irc.localdomain</code> with Server-Password and odd port:</p> <pre><code>   ...\n   $config['irc_host'] = \"irc.localdomain\";\n   $config['irc_port'] = \"+12345\";\n   $config['irc_pass'] = \"Super Secret Passphrase123\";\n   ...\n</code></pre>"},{"location":"Extensions/IRC-Bot/#channel-notations","title":"Channel notations","text":"<p>Channels can be defined using Array-Notation like:</p> <pre><code>   ...\n   $config['irc_chan'][] = \"#librenms\";\n   $config['irc_chan'][] = \"#otherchan\";\n   $config['irc_chan'][] = \"#noc\";\n   ...\n</code></pre> <p>Or using a single string using <code>,</code> as delimiter between various channels:</p> <pre><code>   ...\n   $config['irc_chan'] = \"#librenms,#otherchan,#noc\";\n   ...\n</code></pre>"},{"location":"Extensions/IRC-Bot/#hostmask-authentication","title":"Hostmask authentication","text":"<pre><code>   ...\n   $config['irc_auth']['admin'][] = \"*!root@nms.host.invalid\";\n   $config['irc_auth']['admin'][] = \"*!*peter@peters.computer.invalid\";\n   $config['irc_auth']['john][] = \"john!doe@login.server.invalid\";\n   ...\n</code></pre> <p>Any client matching one of the first two hostmasks will automatically be authenticated as the \"admin\" user in LibreNMS, and clients matching the last line will be authenticated as the user \"john\" in LibreNMS, without using .auth and a waiting for a valid token.</p>"},{"location":"Extensions/IRC-Bot/#extensions","title":"Extensions?!","text":"<p>The bot is coded in a unified way. This makes writing extensions by far less painful. Simply add your <code>command</code> to the <code>$config['irc_external']</code> directive and create a file called <code>includes/ircbot/command.inc.php</code> containing your code. The string behind the call of <code>.command</code> is passed as <code>$params</code>. The user who requested something is accessible via <code>$this-&gt;user</code>. Send your reply/ies via <code>$this-&gt;respond($string)</code>.</p> <p>A more detailed documentation of the functions and variables available for extensions can be found at IRC-Bot Extensions;</p> <p>Confused? Here an Echo-Example:</p> <p>File: config.php</p> <pre><code>   ...\n   $config['irc_external'][] = \"echo\";\n   ...\n</code></pre> <p>File: includes/ircbot/echo.inc.php</p> <pre><code>   //Prefix everything with `You said: '...'`  and return what was sent.\n   if( $this-&gt;user['name'] != \"root\" ) {\n      return $this-&gt;respond(\"You said: '\".$params.\"'\");\n   } else {\n      return $this-&gt;respond(\"root shouldn't be online so late!\");\n   }\n</code></pre>"},{"location":"Extensions/IRC-Bot/#systemd-start-up-script","title":"Systemd start up script","text":"<p>Basic systemd start up script to be placed in /etc/systemd/system/ to start irc service at boot.</p> <p>librenms-irc.service script is located at /opt/librenms/misc/</p> <p>Once copied to /etc/systemd/system/ you must run the following commands:</p> <p>a) chmod 664 /etc/systemd/system/librenms-irc.service</p> <p>b) systemctl daemon-reload</p> <p>c) systemctl enable librenms-irc.service</p> <p>d) systemctl start librenms-irc.service</p> <p>It can be stopped or started just like any other systemd script such as systemctl start librenms-irc.service</p>"},{"location":"Extensions/Interface-Description-Parsing/","title":"Interface Description Parsing","text":"<p>Librenms can interpret, display and group certain additional information on ports. This is done based on the format that the port description is written although it's possible  to customise the parser to be specific for your setup.</p>"},{"location":"Extensions/Interface-Description-Parsing/#keywords","title":"Keywords","text":"<p>See examples for formats.</p> <ul> <li>Keywords</li> <li><code>Cust</code>    - Customer</li> <li><code>Transit</code> - Transit link</li> <li><code>Peering</code> - Peering link</li> <li><code>Core</code>    - Infrastructure link (non-customer)</li> <li>Info-keywords</li> <li><code>()</code> contains a note</li> <li><code>{}</code> contains your circuit id</li> <li><code>[]</code> contains the service type or speed</li> </ul>"},{"location":"Extensions/Interface-Description-Parsing/#examples","title":"Examples","text":"<p>Cisco IOS / NXOS / IOSXR:</p> <pre><code>interface Gi0/1\ndescr Transit: Example Provider (AS65000)\ninterface Gi0/2\ndescr Peering: Peering Exchange\ninterface Gi0/3\ndescr Core: core.router01 FastEthernet0/0 (Telco X CCID023141)\ninterface Gi0/4\ndescr Cust: Example Customer [10Mbit] (T1 Telco Y CCID129031) {EXAMP0001}\n</code></pre> <p>Unix / Linux:</p> <p>This requires an additional script to be setup</p> <pre><code># eth3: Cust: Example Customer [10Mbit] (T1 Telco Y CCID129031) {EXAMP0001}\n# eth0: Transit: Example Provider (AS65000)\n# eth1: Core: core.router01 FastEthernet0/0 (Telco X CCID023141)\n# eth2: Peering: Peering Exchange\n</code></pre>"},{"location":"Extensions/Interface-Description-Parsing/#customisation","title":"Customisation","text":"<p>The following config options can be set to enable more custom types:</p> <p>webui/port-descr</p> <pre><code>lnms config:set customers_descr.+ 'cust'\nlnms config:set transit_descr.+ 'transit'\nlnms config:set peering_descr.+ 'peering'\";'\nlnms config:set core_descr.+ 'core'\nlnms config:set custom_descr.+ 'something_made_up'\n</code></pre>"},{"location":"Extensions/Interface-Description-Parsing/#custom-interface-parser","title":"Custom interface parser","text":"<p>It's also possible to write your own parser, the existing one is: includes/port-descr-parser.inc.php</p> <p>Once you've created your own then you can enable it with:</p> <pre><code>$config['port_descr_parser'] = \"includes/custom/my-port-descr-parser.inc.php\";\n</code></pre>"},{"location":"Extensions/Interface-Description-Parsing/#setup","title":"Setup","text":"<p>For Unix / Linux based systems, you need to run an additional script to support the parsing of interface information.</p> <ul> <li>Add <code>ifAlias</code> from <code>/opt/librenms/scripts/</code> or download it from   here   to the Server and make it executable <code>chmod +x /path/to/ifAlias</code></li> <li>Add to <code>snmpd.conf</code> something like:     <code>pass .1.3.6.1.2.1.31.1.1.1.18 /path/to/ifAlias</code></li> <li>Add aliasses with</li> <li><code>iproute2</code> package like:     <code>ip link set eth0.427 alias 'Cust: CustomerA'</code></li> <li> <p>in <code>/etc/network/interfaces</code> or <code>/etc/network/interfaces.d/*</code> with a comment like:     <code># eth0.427: Cust CustomerA</code></p> </li> <li> <p>Restart <code>snmpd</code> - <code>systemctl restart snmpd</code></p> </li> </ul> <p>There are no changes to be made or additions to install for the polling librenms.</p> <p>Now you can set up your keywords in your aliases.</p>"},{"location":"Extensions/Metric-Storage/","title":"Metric storage","text":"<p>By default we ship all metrics to RRD files, either directly or via RRDCached. On top of this  you can ship metrics to Graphite, InfluxDB (v1 or v2 API), OpenTSDB or Prometheus. At present you can't use these backends to display graphs within LibreNMS and will need to use something like Grafana.</p> <p>For further information on configuring LibreNMS to ship data to one of the other backends then please see the documentation below.</p> <ul> <li>Graphite</li> <li>InfluxDB</li> <li>InfluxDBv2</li> <li>OpenTSDB</li> <li>Prometheus</li> </ul>"},{"location":"Extensions/NFSen/","title":"NFSen","text":"<p>The installation of NFSen is out of scope for this document / LibreNMS</p>"},{"location":"Extensions/NFSen/#configuration","title":"Configuration","text":"<p>The following is the configuration that can be used:</p> <p>external/nfsen</p> <pre><code>lnms config:set nfsen_enable true\nlnms config:set nfsen_split_char '_'\nlnms config:set nfsen_rrds.+ '/var/nfsen/profiles-stat/live/'\nlnms config:set nfsen_rrds.+ '/var/nfsen/profiles-stat'\nlnms config:set nfsen_base.+ '/var/nfsen/'\nlnms config:set nfsen_suffix '_yourdomain_com'\n</code></pre> <p>Set <code>lnms config:set nfsen_enable true</code> to enable NFSen support.</p> <p><code>nfsen_rrds</code> This value tells us where your NFSen rrd files live. This can also be an array to specify more directories like:</p> <p>external/nfsen</p> <pre><code>lnms config:set nfsen_rrds.+ '/var/nfsen/profiles-stat/sitea/'\nlnms config:set nfsen_rrds.+ '/var/nfsen/profiles-stat/siteb/'\n</code></pre> <p>Although for most setups, it will look like below, with the profiles-stat/live directory being where it stores the general RRDs for data sources.</p> <p>external/nfsen</p> <pre><code>lnms config:set nfsen_rrds.+ '/var/nfsen/profiles-stat/live'\n</code></pre> <p>If you wish to render info for configure channels for a device, you need add the various profile-stat directories your system uses, which for most systems will be as below.</p> <p>external/nfsen</p> <pre><code>lnms config:set nfsen_rrds.+ '/var/nfsen/profiles-stat'\n</code></pre> <p>When adding sources to nfsen.conf, it is important to use the hostname that matches what is configured in LibreNMS, because the rrd files NfSen creates is named after the source name (ident), and it doesn't allow you to use an IP address instead. However, in LibreNMS, if your device is added by an IP address, add your source with any name of your choice, and create a symbolic link to the rrd file.</p> <pre><code>cd /var/nfsen/profiles-stat/sitea/\nln -s mychannel.rrd librenmsdeviceIP.rrd\n</code></pre> <p>external/nfsen</p> <pre><code>lnms config:set nfsen_split_char '_'\n</code></pre> <p>This value tells us what to replace the full stops <code>.</code> in the devices hostname with.</p> <p>external/nfsen</p> <pre><code>lnms config:set nfsen_suffix '_yourdomain_com'\n</code></pre> <p>The above is a very important bit as device names in NfSen are limited to 21 characters. This means full domain names for devices can be very problematic to squeeze in, so therefor this chunk is usually removed.</p> <p>On a similar note, NfSen profiles for channels should be created with the same name.</p>"},{"location":"Extensions/NFSen/#stats-defaults-and-settings","title":"Stats Defaults and Settings","text":"<p>Below are the default settings used with nfdump for stats.</p> <p>For more defaulted information on that, please see nfdump(1). The default location for nfdump is <code>/usr/bin/nfdump</code>. If nfdump is located elsewhere, set it with</p> <p>external/binaries</p> <p>```bash lnms config:set nfdump /usr/local/bin/nfdump</p> <p>```</p> <p>external/nfsen</p> <pre><code>lnms config:set nfsen_last_max 153600\nlnms config:set nfsen_top_max 500\nlnms config:set nfsen_top_N '[10, 20, 50, 100, 200, 500]'\nlnms config:set nfsen_top_default 20\nlnms config:set nfsen_stats_default srcip\nlnms config:set nfsen_order_default packets\nlnms config:set nfsen_last_default 900\nlnms config:set nfsen_lasts \"{'300':'5 minutes', '600':'10 minutes', '900':'15 minutes', '1800':'30 minutes', '3600':'1 hour', '9600':'3 hours', '38400':'12 hours', '76800':'24 hours', '115200':'36 hours', '153600':'48 hours'}\"\n</code></pre> <p>external/nfsen</p> <pre><code>lnms config:set nfsen_last_max 153600\n</code></pre> <p>The above is the max value in seconds one may pull stats for. The higher this is, the more CPU and disk intensive the search will be.</p> <p>Numbers larger than this will be set to this.</p> <p>external/nfsen</p> <pre><code>lnms config:set nfsen_top_max 500\n</code></pre> <p>The above is max number of items to be displayed.</p> <p>Numbers larger than this will be set to this.</p> <p>external/nfsen</p> <pre><code>lnms config:set nfsen_top_N '[10, 20, 50, 100, 200, 500]'\n</code></pre> <p>The above is a array containing a list for the drop down menu how many top items should be returned.</p> <p>external/nfsen</p> <pre><code>lnms config:set nfsen_top_default 20\n</code></pre> <p>The above sets default top number to use from the drop down.</p> <p>external/nfsen</p> <pre><code>lnms config:set nfsen_stats_default srcip\n</code></pre> <p>The above sets default stat type to use from the drop down.</p> <pre><code>record   Flow Records\nip       Any IP Address\nsrcip    SRC IP Address\ndstip    DST IP Address\nport     Any Port\nsrcport  SRC Port\ndstport  DST Port\nsrctos   SRC TOS\ndsttos   DST TOS\ntos      TOS\nas       AS\nsrcas    SRC AS\ndstas    DST AS\n</code></pre> <p>external/nfsen</p> <pre><code>lnms config:set nfsen_order_default packets\n</code></pre> <p>The above sets default order type to use from the drop down. Any of the following below are currently supported.</p> <pre><code>flows    Number of total flows for the time period.\npacket   Number of total packets for the time period.\nbytes    Number of total bytes for the time period.\npps      Packets Per Second\nbps      Bytes Per Second\nbpp      Bytes Per Packet\n</code></pre> <p>external/nfsen</p> <pre><code>lnms config:set nfsen_last_default 900\n</code></pre> <p>The above is the last default to use from the drop down.</p> <p>external/nfsen</p> <pre><code>lnms config:set nfsen_lasts \"{'300':'5 minutes', '600':'10 minutes', '900':'15 minutes', '1800':'30 minutes', '3600':'1 hour', '9600':'3 hours', '38400':'12 hours', '76800':'24 hours', '115200':'36 hours', '153600':'48 hours'}\"\n</code></pre> <p>The above associative array contains time intervals for how far back to go. The keys are the length in seconds and the value is just a description to display.</p>"},{"location":"Extensions/Network-Map/","title":"Network Map","text":"<p>LibreNMS has the ability to show you a dynamic network map based on data collected from devices.  These maps are accessed through the following menu options:</p> <ul> <li>Overview -&gt; Maps -&gt; Network</li> <li>Overview -&gt; Maps -&gt; Device Group Maps</li> <li>The Neighbours -&gt; Map tab when viewing a single device    (the Neighbours tab will only show if a device has xDP neighbours)</li> </ul> <p>These network maps can be based on:</p> <ul> <li>xDP Discovery</li> <li>MAC addresses (ARP entries matching interface IP and MAC)</li> </ul> <p>By default, both are are included but you can enable / disable either one using the following config option:</p> <pre><code>lnms config:set network_map_items '[\"mac\",\"xdp\"]'\n</code></pre> <p>Either remove mac or xdp depending on which you want. XDP is based on FDP, CDP and LLDP support based on the device type.</p> <p>It is worth noting that the global map could lead to a large network map that is slow to render and interact with. The network map on the device neighbour page, or building device groups and using the device group maps will be more usable on large networks.</p>"},{"location":"Extensions/Network-Map/#settings","title":"Settings","text":"<p>The map display can be configured by altering the Vis JS Options</p>"},{"location":"Extensions/OAuth-SAML/","title":"OAuth and SAML Support","text":""},{"location":"Extensions/OAuth-SAML/#introduction","title":"Introduction","text":"<p>LibreNMS has support for Laravel Socialite to try and simplify the use of OAuth 1 or 2 providers such as using GitHub, Microsoft, Twitter + many more and SAML.</p> <p>Socialite Providers supports more than 100+ 3rd parties so you will most likely find support for the SAML or OAuth provider you need without too much trouble.</p> <p>Please do note however, these providers are not maintained by LibreNMS so we cannot add support for new ones and we can only provide you basic help with general configuration. See the Socialite Providers website for more information on adding a new OAuth provider.</p> <p>Below we will guide you on how to install SAML or some of these OAth providers, you should be able to use these as a guide on how to install any others you may need but please, please, ensure you read the Socialite Providers documentation carefully.</p> <p>GitHub Provider Microsoft Provider Okta Provider SAML2</p>"},{"location":"Extensions/OAuth-SAML/#requirements","title":"Requirements","text":"<p>LibreNMS version 22.3.0 or later.</p> <p>Please ensure you set <code>APP_URL</code> within your <code>.env</code> file so that callback URLs work correctly with the identify provider.</p> <p>Note</p> <p>Once you have configured your OAuth or SAML2 provider, please ensure you check the Post configuration settings section at the end.</p>"},{"location":"Extensions/OAuth-SAML/#github-and-microsoft-examples","title":"GitHub and Microsoft Examples","text":""},{"location":"Extensions/OAuth-SAML/#install-plugin","title":"Install plugin","text":"<p>Note</p> <p>First we need to install the plugin itself. The plugin name can be slightly different so be sure to check the Socialite Providers documentation and look for this line, <code>composer require socialiteproviders/github</code> which will give you the name you need for the command, i.e: <code>socialiteproviders/github</code>.</p> GitHubMicrosoftOkta <p><code>lnms plugin:add socialiteproviders/github</code></p> <p><code>lnms plugin:add socialiteproviders/microsoft</code></p> <p><code>lnms plugin:add socialiteproviders/okta</code></p>"},{"location":"Extensions/OAuth-SAML/#find-the-provider-name","title":"Find the provider name","text":"<p>Next we need to find the provider name and writing it down</p> <p>Note</p> <p>It's almost always the name of the provider in lowercase but can be different so check the Socialite Providers documentation and look for this line, <code>github =&gt; [</code> which will give you the name you need for the above command: <code>github</code>.</p> GitHubMicrosoftOkta <p>For GitHub we can find the line: <pre><code>'github' =&gt; [\n  'client_id' =&gt; env('GITHUB_CLIENT_ID'),\n  'client_secret' =&gt; env('GITHUB_CLIENT_SECRET'),\n  'redirect' =&gt; env('GITHUB_REDIRECT_URI')\n],\n</code></pre> So our provider name is <code>github</code>, write this down.</p> <p>For Microsoft we can find the line: <pre><code>'microsoft' =&gt; [\n  'client_id' =&gt; env('MICROSOFT_CLIENT_ID'),\n  'client_secret' =&gt; env('MICROSOFT_CLIENT_SECRET'),\n  'redirect' =&gt; env('MICROSOFT_REDIRECT_URI')\n],\n</code></pre> So our provider name is <code>microsoft</code>, write this down.</p> <p>For Okta we can find the line: <pre><code>'okta' =&gt; [\n  'base_url' =&gt; env('OKTA_BASE_URL'),\n  'client_id' =&gt; env('OKTA_CLIENT_ID'),\n  'client_secret' =&gt; env('OKTA_CLIENT_SECRET'),\n  'redirect' =&gt; env('OKTA_REDIRECT_URI')\n],\n</code></pre> So our provider name is <code>okta</code>, write this down.</p>"},{"location":"Extensions/OAuth-SAML/#register-oauth-application","title":"Register OAuth application","text":""},{"location":"Extensions/OAuth-SAML/#register-a-new-application","title":"Register a new application","text":"<p>Now we need some values from the OAuth provider itself, in most cases you need to register a new \"OAuth application\" at the providers site. This will vary from provider to provider but the process itself should be similar to the examples below.</p> <p>Note</p> <p>The callback URL is always: https://your-librenms-url/auth/provider/callback It doesn't need to be a public available site, but it almost always needs to support TLS (https)!</p> GitHubMicrosoftOkta <p>For our example with GitHub we go to GitHub Developer Settings and press \"Register a new application\":</p> <p></p> <p>Fill out the form accordingly (with your own values): </p> <p>For our example with Microsoft we go to \"Azure Active Directory\" &gt; \"App registrations\" and press \"New registration\"</p> <p></p> <p>Fill out the form accordingly using your own values): </p> <p>Copy the value of the Application (client) ID and Directory (tenant) ID and save them, you will need them in the next step. </p> <p>For our example with Okta, we go to <code>Applications&gt;Create App Integration</code>, Select <code>OIDC - OpenID Connect</code>, then <code>Web Application</code>.</p> <p></p> <p>Fill in the Name, Logo, and Assignments based on your preferred settings. Leave the <code>Sign-In Redirect URI</code> field, this is where you will edit this later: </p> <p>Note your Okta domain or login url. Sometimes this can be a vanity url like <code>login.company.com</code>, or sometimes just <code>company.okta.com</code>.</p> <p>Click save.</p>"},{"location":"Extensions/OAuth-SAML/#generate-a-new-client-secret","title":"Generate a new client secret","text":"GitHubMicrosoftOkta <p>Press 'Generate a new client secret' to get a new client secret.</p> <p></p> <p>Copy the Client ID and Client secret</p> <p>In the example above it is:</p> <p>Client ID: 7a41f1d8215640ca6b00 Client secret: ea03957288edd0e590be202b239e4f0ff26b8047</p> <p>Select Certificates &amp; secrets under Manage. Select the 'New client secret' button. Enter a value in Description and select one of the options for Expires and select 'Add'.</p> <p></p> <p>Copy the client secret Value (not Secret ID!) before you leave this page. You will need it in the next step.</p> <p></p> <p>This step is done for you when creating the app. All you have to do is copy down the client secret. You will need it in the next step.</p> <p></p>"},{"location":"Extensions/OAuth-SAML/#saving-configuration","title":"Saving configuration","text":"<p>Now we need to set the configuration options for your provider within LibreNMS itself. Please replace the values in the examples below with the values you collected earlier:</p> <p>The format of the configuration string is <code>auth.socialite.configs.*provider name*.*value*</code></p> GitHubMicrosoftOkta <p>settings/auth/socialite</p> <pre><code>lnms config:set auth.socialite.configs.github.client_id 7a41f1d8215640ca6b00\nlnms config:set auth.socialite.configs.github.client_secret ea03957288edd0e590be202b239e4f0ff26b8047\n</code></pre> <p>settings/auth/socialite</p> <pre><code>lnms config:set auth.socialite.configs.microsoft.client_id 7983ac13-c955-40e9-9b85-5ba27be52a52\nlnms config:set auth.socialite.configs.microsoft.client_secret J9P7Q~K2F5C.L243sqzbGj.cOOcjTBgAPak_l\nlnms config:set auth.socialite.configs.microsoft.tenant a15edc05-152d-4eb4-973c-14f1fdc57d8b\n</code></pre> <p>settings/auth/socialite</p> <pre><code>lnms config:set auth.socialite.configs.okta.client_id 0oa1c08tti8D7xgXb697\nlnms config:set auth.socialite.configs.okta.client_secret sWew90IKqKDmURj1XLsCPjXjre0U3zmJuFR6SzsG\nlnms config:set auth.socialite.configs.okta.base_url \"https://&lt;okta_login_url&gt;\"\n</code></pre>"},{"location":"Extensions/OAuth-SAML/#add-provider-event-listener","title":"Add provider event listener","text":"<p>The final step is to now add an event listener.</p> <p>Note</p> <p>It's important to copy exactly the right value here, It should begin with a <code>\\</code> and end before the <code>::class.'@handle'</code></p> GitHubMicrosoftOkta <p>Find the section looking like: <pre><code>protected $listen = [\n    \\SocialiteProviders\\Manager\\SocialiteWasCalled::class =&gt; [\n        // ... other providers\n        \\SocialiteProviders\\GitHub\\GitHubExtendSocialite::class.'@handle',\n    ],\n];\n</code></pre></p> <p>Copy the part: <code>\\SocialiteProviders\\GitHub\\GitHubExtendSocialite</code> and run;</p> <p>settings/auth/socialite</p> <pre><code>lnms config:set auth.socialite.configs.github.listener \"\\SocialiteProviders\\GitHub\\GitHubExtendSocialite\"\n</code></pre> <p>Don't forget the initial backslash (\\) !</p> <p>Find the section looking like: <pre><code>protected $listen = [\n    \\SocialiteProviders\\Manager\\SocialiteWasCalled::class =&gt; [\n        // ... other providers\n        \\SocialiteProviders\\Microsoft\\MicrosoftExtendSocialite::class.'@handle',\n    ],\n];\n</code></pre></p> <p>Copy the part: <code>\\SocialiteProviders\\Microsoft\\MicrosoftExtendSocialite</code> and run;</p> <p>settings/auth/socialite</p> <pre><code>lnms config:set auth.socialite.configs.microsoft.listener \"\\SocialiteProviders\\Microsoft\\MicrosoftExtendSocialite\"\n</code></pre> <p>Don't forget the initial backslash (\\) !</p> <p>Find the section looking like: <pre><code>protected $listen = [\n\\SocialiteProviders\\Manager\\SocialiteWasCalled::class =&gt; [\n    // ... other providers\n    \\SocialiteProviders\\Okta\\OktaExtendSocialite::class.'@handle',\n],\n];\n</code></pre></p> <p>Copy the part: <code>\\SocialiteProviders\\Okta\\OktaExtendSocialite</code> and run;</p> <p>settings/auth/socialite</p> <pre><code>lnms config:set auth.socialite.configs.okta.listener \"\\SocialiteProviders\\Okta\\OktaExtendSocialite\"\n</code></pre> <p>Don't forget the initial backslack (\\) !</p> <p>Now you are done with setting up the OAuth provider! If it doesn't work, please double check your configuration values by using the <code>config:get</code> command below.</p> <p>settings/auth/socialite</p> <pre><code>lnms config:get auth.socialite\n</code></pre>"},{"location":"Extensions/OAuth-SAML/#default-role","title":"Default Role","text":"<p>Since most Socialite Providers don't provide Authorization only Authentication it is possible to set the default User Role for Authorized users.   Appropriate care should be taken.</p> <ul> <li> <p>none: No Access: User has no access</p> </li> <li> <p>normal: Normal User: You will need to assign device / port       permissions for users at this level.</p> </li> <li> <p>global-read: Global Read: Read only Administrator.</p> </li> <li> <p>admin: Administrator: This is a global read/write admin account.</p> </li> </ul> <p>settings/auth/socialite</p> <pre><code>lnms config:set auth.socialite.default_role global-read\n</code></pre>"},{"location":"Extensions/OAuth-SAML/#claims-access-scopes","title":"Claims / Access Scopes","text":"<p>Socialite can specifiy scopes that should be included with in the authentication request. (see Larvel docs )</p> <p>For example, if Okta is configured to expose group information it is possible to use these group names to configure User Roles.</p> <p>This requires configuration in Okta.  You can set the 'Groups claim type' to 'Filter' and supply a regex of which groups should be returned which can be mapped below.</p> <p></p> <p>First enable sending the 'groups' claim (along with the normal openid, profile, and email claims). Be aware that the scope name must match the claim name. For identity providers where the scope does not match (e.g. Keycloak: roles -&gt; groups) you need to configure a custom scope.</p> <p>settings/auth/socialite</p> <pre><code>lnms config:set auth.socialite.scopes.+ groups\n</code></pre> <p>Then setup mappings from the returned claim arrays to the User levels you want</p> <p>settings/auth/socialite</p> <pre><code>lnms config:set auth.socialite.claims.RETURN_FROM_CLAIM.roles '[\"admin\"]'\nlnms config:set auth.socialite.claims.OTHER_RETURN_FROM_CLAIM.roles '[\"global-read\",\"cleaner\"]'\n</code></pre>"},{"location":"Extensions/OAuth-SAML/#saml2-example","title":"SAML2 Example","text":""},{"location":"Extensions/OAuth-SAML/#install-plugin_1","title":"Install plugin","text":"<p>The first step is to install the plugin itself.</p> <pre><code>lnms plugin:add socialiteproviders/saml2\n</code></pre>"},{"location":"Extensions/OAuth-SAML/#add-configuration","title":"Add configuration","text":"<p>Depending on what your identity provider (Google, Azure, ...) supports, the configuration could look different from what you see next so please use this as a rough guide. It is up the IdP to provide the relevant details that you will need for configuration.</p> GoogleAzure <p>Go to https://admin.google.com/ac/apps/unified</p> <p> </p> <p>Press \"DOWNLOAD METADATA\" and save the file somewhere accessible by your LibreNMS server</p> <p></p> <p>ACS URL = https://your-librenms-url/auth/saml2/callback Entity ID = https://your-librenms-url/auth/saml2 Name ID format = PERSISTANT Name ID = Basic Information &gt; Primary email</p> <p></p> <p>First name = http://schemas.xmlsoap.org/ws/2005/05/identity/claims/givenname Last name = http://schemas.xmlsoap.org/ws/2005/05/identity/claims/surname Primary email = http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress</p> <p></p> <p></p> <p>settings/auth/socialite</p> <pre><code>lnms config:set auth.socialite.configs.saml2.metadata \"$(cat /tmp/GoogleIDPMetadata.xml)\"\n</code></pre> <p>Alternatively, you can copy the content of the file and run it like so, this will result in the exact same result as above.</p> <p>settings/auth/socialite</p> <pre><code>lnms config:set auth.socialite.configs.saml2.metadata '''&lt;?xml version=\"1.0\" encoding\n...\n...\n&lt;/md:EntityDescriptor&gt;'''\n</code></pre> <p> <pre><code>echo \"SESSION_SAME_SITE=none\" &gt;&gt; .env\nlnms plugin:add socialiteproviders/saml2\nlnms config:set auth.socialite.redirect true\nlnms config:set auth.socialite.register true\nlnms config:set auth.socialite.configs.saml2.acs https://login.microsoftonline.com/xxxidfromazurexxx/saml2\nlnms config:set auth.socialite.configs.saml2.entityid https://sts.windows.net/xxxidfromazurexxx/\nlnms config:set auth.socialite.configs.saml2.certificate xxxcertinonelinexxx\nlnms config:set auth.socialite.configs.saml2.listener \"\\SocialiteProviders\\Saml2\\Saml2ExtendSocialite\"\nlnms config:set auth.socialite.configs.saml2.metadata https://nexus.microsoftonline-p.com/federationmetadata/saml20/federationmetadata.xml\nlnms config:set auth.socialite.configs.saml2.sp_default_binding_method urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\nlnms config:clear\n</code></pre></p>"},{"location":"Extensions/OAuth-SAML/#using-an-identity-provider-metadata-url","title":"Using an Identity Provider metadata URL","text":"<p>Note</p> <p>This is the prefered and easiest way, if your IdP supports it!</p> <p>settings/auth/socialite</p> <pre><code>lnms config:set auth.socialite.configs.saml2.metadata https://idp.co/metadata/xml\n</code></pre>"},{"location":"Extensions/OAuth-SAML/#using-an-identity-provider-metadata-xml-file","title":"Using an Identity Provider metadata XML file","text":"<p>settings/auth/socialite</p> <pre><code>lnms config:set auth.socialite.configs.saml2.metadata \"$(cat GoogleIDPMetadata.xml)\"\n</code></pre>"},{"location":"Extensions/OAuth-SAML/#manually-configuring-the-identity-provider-with-a-certificate-string","title":"Manually configuring the Identity Provider with a certificate string","text":"<p>settings/auth/socialite</p> <pre><code>lnms config:set auth.socialite.configs.saml2.acs https://idp.co/auth/acs\nlnms config:set auth.socialite.configs.saml2.entityid http://saml.to/trust\nlnms config:set auth.socialite.configs.saml2.certificate MIIC4jCCAcqgAwIBAgIQbDO5YO....\n</code></pre>"},{"location":"Extensions/OAuth-SAML/#manually-configuring-the-identity-provider-with-a-certificate-file","title":"Manually configuring the Identity Provider with a certificate file","text":"<p>settings/auth/socialite</p> <pre><code>lnms config:set auth.socialite.configs.saml2.acs https://idp.co/auth/acs\nlnms config:set auth.socialite.configs.saml2.entityid http://saml.to/trust\nlnms config:set auth.socialite.configs.saml2.certificate \"$(cat /path/to/certificate.pem)\"\n</code></pre>"},{"location":"Extensions/OAuth-SAML/#add-provider-event-listener_1","title":"Add provider event listener","text":"<p>Now we just need to define the listener service within LibreNMS:</p> <p>settings/auth/socialite</p> <pre><code>lnms config:set auth.socialite.configs.saml2.listener \"\\SocialiteProviders\\Saml2\\Saml2ExtendSocialite\"\n</code></pre>"},{"location":"Extensions/OAuth-SAML/#session_same_site","title":"SESSION_SAME_SITE","text":"<p>You most likely will need to set <code>SESSION_SAME_SITE=none</code> in <code>.env</code> if you use SAML2! If you get an error with http code 419, you should try to remove <code>SESSION_SAME_SITE=none</code> from your <code>.env</code>.</p> <p>Note</p> <p>Don't forget to run <code>lnms config:clear</code> after you modify <code>.env</code> to flush the config cache</p>"},{"location":"Extensions/OAuth-SAML/#service-provider-metadata","title":"Service provider metadata","text":"<p>Your identify provider might ask you for your Service Provider (SP) metadata. LibreNMS exposes all of this information from your LibreNMS install</p>"},{"location":"Extensions/OAuth-SAML/#troubleshooting","title":"Troubleshooting","text":"<p>If it doesn't work, please double check your configuration values by using the <code>config:get</code> command below.</p> <p>settings/auth/socialite</p> <pre><code>lnms config:get auth.socialite\n</code></pre>"},{"location":"Extensions/OAuth-SAML/#redirect-url","title":"Redirect URL","text":"<p>If you have a need to, then you can override redirect url with the following commands:</p> OAuthSAML2 <p>Replace <code>github</code> and the relevant URL below with your identity provider details. <code>lnms config:set auth.socialite.configs.github.redirect https://demo.librenms.org/auth/github/callback</code></p> <p><code>lnms config:set auth.socialite.configs.saml2.sp_acs auth/saml2/callback</code></p>"},{"location":"Extensions/OAuth-SAML/#post-configuration-settings","title":"Post configuration settings","text":"<p>settings/auth/socialite</p> <p>From here you can configure the settings for any identity providers you have configured along with some bespoke options.</p> <p>Redirect Login page: This setting will skip your LibreNMS login and take the end user straight to the first idP you configured.</p> <p>Allow registration via provider: If this setting is disabled, new users signing in via the idP will not be authenticated. This setting allows a local user to be automatically created which permits their login.</p>"},{"location":"Extensions/Oxidized/","title":"Oxidized","text":"<p>Integrating LibreNMS with Oxidized brings the following benefits:</p> <ul> <li>Config viewing: Current, History, and Diffs all under the Configs tab of each device</li> <li>Automatic addition of devices to Oxidized: Including filtering and   grouping to ease credential management</li> <li>Configuration searching (Requires oxidized-web 0.8.0 or newer)</li> </ul> <p>First you will need to install Oxidized following their documentation.</p> <p>Then you can procede to the LibreNMS Web UI and go to Oxidized Settings in the External Settings section of Global Settings. Enable it and enter the url to your oxidized instance.</p> <p>To have devices automatically added, you will need to configure oxidized to pull them from LibreNMS Feeding Oxidized Note: this means devices will be controlled by the LibreNMS API, and not router.db, passwords will still need to be in the oxidized config file.</p> <p>LibreNMS will automatically map the OS to the Oxidized model name if they don't match. this means you shouldn't need to use the model_map config option within Oxidized.</p>"},{"location":"Extensions/Oxidized/#detailed-integration-information","title":"Detailed integration information","text":"<p>This is a straight forward use of Oxidized, it relies on you having a working Oxidized setup which is already taking config snapshots for your devices. When you have that, you only need the following config to enable the display of device configs within the device page itself:</p> <p>external/oxidized</p> <pre><code>lnms config:set oxidized.enabled true\nlnms config:set oxidized.url http://127.0.0.1:8888\n</code></pre> <p>LibreNMS supports config versioning if Oxidized does.  This is known to work with the git output module.</p> <p>external/oxidized</p> <pre><code>lnms config:set oxidized.features.versioning true\n</code></pre> <p>Oxidized supports various ways to utilise credentials to login to devices, you can specify global username/password within Oxidized, Group level username/password or per device. LibreNMS currently supports sending groups back to Oxidized so that you can then define group credentials within Oxidized. To enable this support please switch on 'Enable the return of groups to Oxidized':</p> <p>external/oxidized</p> <pre><code>lnms config:set oxidized.group_support true\n</code></pre> <p>You can set a default group that devices will fall back to with:</p> <p>external/oxidized</p> <pre><code>lnms config:set oxidized.default_group default\n</code></pre> <p>You can ignore specific groups</p> <p>external/oxidized</p> <pre><code>lnms config:set oxidized.ignore_groups '[\"badgroup\", \"nobackup\"]'\n</code></pre> <p>One trick you can do to ignore all ungrouped devices is set both of these settings</p> <p>external/oxidized</p> <pre><code>lnms config:set oxidized.default_group nobackup\nlnms config:set oxidized.ignore_groups.+ nobackup\n</code></pre>"},{"location":"Extensions/Oxidized/#selinux","title":"SELinux","text":"<p>If you're running SELinux, you'll need to allow httpd to connect outbound to the network, otherwise Oxidized integration in the web UI will silently fail:</p> <pre><code>setsebool -P httpd_can_network_connect 1\n</code></pre>"},{"location":"Extensions/Oxidized/#feeding-oxidized","title":"Feeding Oxidized","text":"<p>Oxidized has support for feeding devices into it via an API call, support for Oxidized has been added to the LibreNMS API. A sample config for Oxidized is provided below.</p> <p>You will need to configure default credentials for your devices in the Oxidized config, LibreNMS doesn't provide login credentials at this time.</p> <pre><code>      source:\n        default: http\n        debug: false\n        http:\n          url: https://librenms/api/v0/oxidized\n          map:\n            name: hostname\n            model: os\n            group: group\n          headers:\n            X-Auth-Token: '01582bf94c03104ecb7953dsadsadwed'\n</code></pre> <p>LibreNMS is able to reload the Oxidized list of nodes, each time a device is added to LibreNMS. To do so, edit the option in Global Settings&gt;External Settings&gt;Oxidized Integration or add the following to your config.</p> <p>external/oxidized</p> <pre><code>lnms config:set oxidized.reload_nodes true\n</code></pre>"},{"location":"Extensions/Oxidized/#creating-overrides","title":"Creating overrides","text":"<p>To return an override to Oxidized you can do this by providing the override key, followed by matching a lookup for a host (or hosts), and finally by defining the overriding value itself. LibreNMS does not check for the validity of these attributes but will deliver them to Oxidized as defined.</p> <p>Matching of hosts can be done using <code>hostname</code>, <code>sysname</code>, <code>os</code>, <code>location</code>, <code>sysDescr</code>, <code>hardware</code>, <code>purpose</code> or <code>notes</code> and including either a 'match' key and value, or a 'regex' key and value. The order of matching is:</p> <ul> <li><code>hostname</code></li> <li><code>sysName</code></li> <li><code>sysDescr</code></li> <li><code>hardware</code></li> <li><code>os</code></li> <li><code>location</code></li> <li><code>ip</code></li> <li><code>purpose</code></li> <li><code>notes</code></li> </ul> <p>To match on the device hostnames or sysNames that contain 'lon-sw' or if the location contains 'London' then you would set the following:</p> <p>external/oxidized</p> <pre><code>lnms config:set oxidized.maps.group.hostname.+ '{\"regex\": \"/^lon-sw/\", \"value\": \"london-switches\"}'\nlnms config:set oxidized.maps.group.sysName.+ '{\"regex\": \"/^lon-sw/\", \"value\": \"london-switches\"}'\nlnms config:set oxidized.maps.group.location.+ '{\"regex\": \"/london/\", \"value\": \"london-switches\"}'\n</code></pre> <p>To match on a device os of edgeos then please use the following:</p> <p>external/oxidized</p> <pre><code>lnms config:set oxidized.maps.group.os.+ '{\"match\": \"edgeos\", \"value\": \"wireless\"}'\n</code></pre> <p>Matching on OS requires system name of the OS. For example, \"match\": \"RouterOS\" will not work, while \"match\": \"routeros\" will.</p> <p>To match on a device purpose or device notes that contains 'lon-net' then you would set the following:</p> <p>external/oxidized</p> <pre><code>lnms config:set oxidized.maps.group.purpose.+ '{\"regex\": \"/^lon-sw/\", \"value\": \"london-network\"}'\nlnms config:set oxidized.maps.group.notes.+ '{\"regex\": \"/^lon-sw/\", \"value\": \"london-network\"}'\n</code></pre> <p>To edit an existing map, you must use the index to override it.</p> <p>external/oxidized</p> <pre><code>lnms config:get oxidized.maps.os.os\n[\n    {\n        \"match\": \"airos-af-ltu\",\n        \"value\": \"airfiber\"\n    },\n    {\n        \"match\": \"airos-af\",\n        \"value\": \"airfiber\"\n    },\n]\n\nlnms config:set oxidized.maps.os.os.1 '{\"match\": \"airos-af\", \"value\": \"something-else\"}'\n</code></pre> <p>To override the IP Oxidized uses to poll the device, set the following:</p> <p>external/oxidized</p> <pre><code>lnms config:set oxidized.maps.ip.sysName.+ '{\"regex\": \"/^my.node/\", \"value\": \"192.168.1.10\"}'\nlnms config:set oxidized.maps.ip.sysName.+ '{\"match\": \"my-other.node\", \"value\": \"192.168.1.20\"}'\n</code></pre> <p>This allows extending the configuration further by providing a completely flexible model for custom flags and settings, for example, below shows the ability to add an ssh_proxy host within Oxidized simply by adding the below to your configuration:</p> <p>external/oxidized</p> <pre><code>lnms config:set oxidized.maps.ssh_proxy.sysName.+ '{\"regex\": \"/^my.node/\", \"value\": \"my-ssh-gateway.node\"}'\n</code></pre> <p>Or of course, any custom value that could be needed or wanted can be applied, for example, setting a \"myAttribute\" to \"Super cool value\" for any configured and enabled \"routeros\" device.</p> <p>external/oxidized</p> <pre><code>lnms config:set oxidized.maps.myAttribute.os.+ '{\"match\": \"routeros\", \"value\": \"Super cool value\"}'\n</code></pre> <p>Verify the return of groups by querying the API:</p> <pre><code>curl -H 'X-Auth-Token: YOURAPITOKENHERE' https://librenms.org/api/v0/oxidized\n</code></pre> <p>If you need to, you can specify credentials for groups by using the following in your Oxidized config:</p> <pre><code>groups:\n  &lt;groupname&gt;:\n    username: &lt;user&gt;\n    password: &lt;password&gt;\n</code></pre>"},{"location":"Extensions/Oxidized/#miscellaneous","title":"Miscellaneous","text":"<p>If you have devices which you do not wish to appear in Oxidized then you can edit those devices in Device -&gt; Edit -&gt; Misc and enable \"Exclude from Oxidized?\"</p> <p>The use of custom ssh and telnet ports can be set through device settings misc tab, and can be passed on to oxidized with the following <code>vars_map</code></p> <pre><code>      source:\n        http:\n          map:\n            name: hostname\n            model: os\n            group: group\n          vars_map:\n            ssh_port: ssh_port\n            telnet_port: telnet_port\n</code></pre> <p>It's also possible to exclude certain device types and OS' from being output via the API.</p> <p>external/oxidized</p> <pre><code>lnms config:set oxidized.ignore_types '[\"server\", \"power\"]'\nlnms config:set oxidized.ignore_os '[\"linux\", \"windows\"]'\n</code></pre> <p>You can also ignore whole groups of devices</p> <p>external/oxidized</p> <pre><code>lnms config:set oxidized.ignore_groups '[\"london-switches\", \"default\"]'\n</code></pre>"},{"location":"Extensions/Oxidized/#trigger-configuration-backups","title":"Trigger configuration backups","text":"<p>Using the Oxidized REST API and Syslog Hooks, Oxidized can trigger configuration downloads whenever a configuration change event has been logged. An example script to do this is included in <code>./scripts/syslog-notify-oxidized.php</code>. Oxidized can spawn a new worker thread and perform the download immediately with the following configuration</p> <pre><code>next_adds_job: true\n</code></pre>"},{"location":"Extensions/Oxidized/#validate-oxidized-config","title":"Validate Oxidized config","text":"<p>You can perform basic validation of the Oxidized configuration by going to the Overview -&gt; Tools -&gt; Oxidized link and in the Oxidized config validation page, paste your yaml file into the input box and click 'Validate YAML'.</p> <p>We check for yaml syntax errors and also actual config values to ensure they are used in the correct location.</p>"},{"location":"Extensions/Oxidized/#accessing-configuration-of-a-disabledremoved-device","title":"Accessing configuration of a disabled/removed device","text":"<p>When you're disabling or removing a device from LibreNMS, the configuration will no longer be available via the LibreNMS web interface. You can gain access to these configurations directly in the Git repository of Oxidized (if using Git for version control).</p> <p>1: Check in your Oxidized where are stored your Git repositories:</p> <pre><code>/home/oxidized/.config/oxidized/config\n</code></pre> <p>2: Go the correct Git repository for the needed device (the .git one) and get the list of devices using this command:</p> <pre><code>git ls-files -s\n</code></pre> <p>3: Save the object ID of the device, and run the command to get the file content:</p> <pre><code>git cat-file -p &lt;object id&gt;\n</code></pre>"},{"location":"Extensions/Oxidized/#remove-disabledremoved-device","title":"Remove disabled/removed device","text":"<p>If you want to purge saved config of a device that is not in LibreNMS anymore, you can run the following command:</p> <pre><code>git rm --cached &lt;object id&gt;\n</code></pre>"},{"location":"Extensions/PeeringDB/","title":"PeeringDB Support","text":"<p>LibreNMS has integration with PeeringDB to match up your BGP sessions with the peering exchanges you are connected to.</p> <p>To enable the integration please do so within the WebUI</p> <p>external/peeringdb</p> <pre><code>lnms config:set peeringdb.enabled true\n</code></pre> <p>Data will be collated the next time daily.sh is run or you can manually force this by running <code>php daily.php -f peeringdb</code>, the initial collection is delayed for a random amount of time to avoid overloading the PeeringDB API.</p> <p>Once enabled you will have an additional menu item under Routing -&gt; PeeringDB</p>"},{"location":"Extensions/Plugin-System/","title":"Developing for the Plugin System","text":"<p>With plugins you can extend LibreNMS with special functions that are specific to your setup or are not relevant or interesting for all community members.</p> <p>You are able to intervene in defined places in the behavior of the website, without it coming to problems with future updates.</p> <p>This documentation will give you a basis for writing a plugin for LibreNMS.</p>"},{"location":"Extensions/Plugin-System/#distribution","title":"Distribution","text":"<p>There are two ways to create a plugin.</p> <ol> <li>Local plugin: Within LibreNMS under the app/Plugins directory. This is approriate for plugins that are     intended to run only on your instance. A local plugin may ONLY use plugin hooks to augment LibreNMS.</li> <li>Plugin package: A php package that can be distributed via composer/packagist.org.  This is approriate     for plugins that are intended to be installed by many people. A plugin package can publish multiple     routes, views, database migrations and more in addition to using hooks to augment specific parts of LibreNMS.</li> </ol>"},{"location":"Extensions/Plugin-System/#plugin-package","title":"Plugin package","text":"<p>Create a package according to the Laravel documentation https://laravel.com/docs/packages To tie in to specific parts of LibreNMS such as the Menu, Device Overview or a Port Tab, use Plugin Hooks.</p> <p>You can see an example plugin here: example plugin repository.</p> <p>Please come to discord and share any expriences and update this documentation!</p>"},{"location":"Extensions/Plugin-System/#local-plugin","title":"Local plugin","text":"<p>Local plugins need to be placed in app/Plugins</p> <p>Note: Plugins are disabled when the have an error, to show errors instead set plugins.show_errors</p> <p>The structure of a plugin is follows:</p> <pre><code>app/Plugins\n            /PluginName\n                       /DeviceOverview.php\n                       /Menu.php\n                       /Page.php\n                       /PortTab.php\n                       /Settings.php\n                       /resources/views\n                                       /device-overview.blade.php\n                                       /menu.blade.php\n                                       /page.blade.php\n                                       /port-tab.blade.php\n                                       /settings.blade.php\n</code></pre> <p>The above structure is checked before a plugin can be installed.</p> <p>All file/folder names are case sensitive and must match the structure.</p> <p>Only the blade files that are really needed need to be created. A plugin manager will then load a hook that has a basic functionality.</p> <p>If you want to customize the basic behavior of the hooks, you can create a class in 'app/Plugins/PluginName' and overload the hook methods.</p> <ul> <li>device-overview.blade.php :: This is called in the Device   Overview page. You receive the $device as a object per default, you can do your   work here and display your results in a frame.</li> </ul> <pre><code>&lt;div class=\"row\"&gt;\n    &lt;div class=\"col-md-12\"&gt;\n        &lt;div class=\"panel panel-default panel-condensed\"&gt;\n            &lt;div class=\"panel-heading\"&gt;\n                &lt;strong&gt;{{ $title }}&lt;/strong&gt;\n            &lt;/div&gt;\n            &lt;div class=\"panel-body\"&gt;\n                &lt;div class=\"row\"&gt;\n                    &lt;div class=\"col-sm-12\"&gt;\n                         {{ $device-&gt;hostname }}\n                 &lt;!-- Do you stuff here --&gt;\n                    &lt;/div&gt;\n        &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n</code></pre> <ul> <li> <p>port-tab.blade.php :: This is called in the Port page,   in the \"Plugins\" menu_option that will appear when your plugin gets   enabled. In this blade, you can do your work and display your   results in a frame.</p> </li> <li> <p>menu.blade.php :: For a menu entry</p> </li> <li> <p>page.blade.pho :: Here is a good place to add a own LibreNMS page without dependence with a device. A good place to create your own lists with special requirements and behavior.</p> </li> <li> <p>settings.blade.php :: If you need your own settings and variables, you can have a look in the ExamplePlugin.</p> </li> </ul>"},{"location":"Extensions/Plugin-System/#php-hooks-customization","title":"PHP Hooks customization","text":"<p>PHP code should run inside your hooks method and not your blade view. The built in hooks support authorize and data methods.</p> <p>These methods are called with Dependency Injection Hooks with relevant database models will include them in these calls. Additionally, the settings argument may be included to inject the plugin settings into the method.</p>"},{"location":"Extensions/Plugin-System/#data","title":"Data","text":"<p>You can overrid the data method to supply data to your view.  You should also do any processing here. You can do things like access the database or configuration settings and more.</p> <p>In the data method we are injecting settings here to count how many we have for display in the menu entry blade view. Note that you must specify a default value (<code>= []</code> here) for any arguments that don't exist on the parent method.</p> <pre><code>class Menu extends MenuEntryHook\n{\n    public function data(array $settings = []): array\n    {\n        return [\n            'count' =&gt; count($settings),\n        ];\n    }\n}\n</code></pre>"},{"location":"Extensions/Plugin-System/#authorize","title":"Authorize","text":"<p>By default hooks are always shown, but you may control when the user is authorized to view the hook content.</p> <p>As an example, you could imagine that the device-overview.blade.php should only be displayed when the device is in maintanence mode and the current user has the admin role. </p> <pre><code>class DeviceOverview extends DeviceOverviewHook\n{\n    public function authorize(User $user, Device $device): bool\n    {\n        return $user-&gt;can('admin') &amp;&amp; $device-&gt;isUnderMaintenance();\n    }\n}\n</code></pre>"},{"location":"Extensions/Proxmox/","title":"Proxmox graphing","text":"<p>It is possible to create graphs of the Proxmox VMs that run on your monitored machines. Currently, only traffic graphs are created. One for each interface on each VM. Possibly, IO graphs will be added later on.</p> <p>The ultimate goal is to be able to create traffic bills for VMs, no matter on which physical machine that VM runs.</p>"},{"location":"Extensions/Proxmox/#enabling-proxmox-graphs","title":"Enabling Proxmox graphs","text":"<p>To enable Proxmox graphs, do the following:</p> <p>In config.php, enable Proxmox:</p> <pre><code>$config['enable_proxmox'] = 1;\n</code></pre> <p>Then, install git and librenms-agent on the machines running Proxmox and enable the Proxmox-script using:</p> <pre><code>cp /opt/librenms-agent/agent-local/proxmox /usr/lib/check_mk_agent/local/proxmox\nchmod +x /usr/lib/check_mk_agent/local/proxmox\n</code></pre> <p>Then, enable and start the check_mk service using systemd</p> <pre><code>cp /opt/librenms-agent/check_mk@.service /opt/librenms-agent/check_mk.socket /etc/systemd/system\nsystemctl daemon-reload\nsystemctl enable check_mk.socket &amp;&amp; systemctl start check_mk.socket\n</code></pre> <p>Then in LibreNMS active the librenms-agent and proxmox application flag for the device you are monitoring. You should now see an application in LibreNMS, as well as a new menu-item in the topmenu, allowing you to choose which cluster you want to look at.</p>"},{"location":"Extensions/Proxmox/#note-if-you-want-to-use-use-xinetd-instead-of-systemd","title":"Note, if you want to use use xinetd instead of systemd","text":"<p>Its possible to use the librenms-agent started by xinetd instead of systemd. One use case is if you are forced to use a old Proxmox installation. After installing the librenms-agent (see above) please copy enable the xinetd config, then restart the xinetd service:</p> <pre><code>cp check_mk_xinetd /etc/xinetd.d/check_mk\n/etc/init.d/xinetd restart\n</code></pre>"},{"location":"Extensions/RRDCached/","title":"Setting up RRDCached","text":"<ul> <li>Github: Oetiker RRDCached</li> <li>RRDCached</li> </ul> <p>This document will explain how to set up RRDCached for LibreNMS.</p> <p>Since version 1.5, rrdtool / rrdcached now supports creating rrd files over rrdcached. If you have rrdcached 1.5.5 or above, you can also tune over rrdcached. To enable this set the following config:</p> <p>poller/rrdtool</p> <pre><code>lnms config:set rrdtool_version '1.5.5'\n</code></pre> <p>This setting has to be the exact version of rrdtool you are running.</p> <p>NOTE: This feature requires your client version of rrdtool to be 1.5.5 or newer, in addition to your rrdcached version.</p>"},{"location":"Extensions/RRDCached/#high-availability","title":"High-Availability","text":"<p>It's adviced to only run one active instance of RRDCached and have a failover instance ready to take over in case of failure. A recommended setup is to use a network socket for RRDCached and have a load balancer in front of it such as Nginx. See Securing RRDCached for more information.</p> <p>For HA, you must also use a shared storage for the RRD files over NFS with GlusterFS or similar.</p>"},{"location":"Extensions/RRDCached/#distributed-poller-support-matrix","title":"Distributed Poller Support Matrix","text":"<p>Shared FS: Is a shared filesystem required?</p> <p>Features: Supported features in the version indicated.</p> <pre><code>G = Graphs.\nC = Create RRD files.\nU = Update RRD files.\nT = Tune RRD files.\n</code></pre> Version Shared FS Features 1.4.x Yes G,U &lt;1.5.5 Yes G,U &gt;=1.5.5 No G,C,U &gt;=1.6.x No G,C,U &gt;=1.8.x No G,C,U,T <p>It is recommended that you monitor your LibreNMS server with LibreNMS so you can view the disk I/O usage delta. This can be done with the RRDCached plugin.</p>"},{"location":"Extensions/RRDCached/#installation","title":"Installation","text":"<p>Ubuntu and Debian are very similar, the main difference is the location of the <code>PIDFILE</code>.</p> UbuntuDebianRed Hat/CentOS 8CentOS 6 <p>For info about version of rrdcached to install, see Ubuntu packages</p> <ol> <li> <p>Install rrdcached</p> <pre><code>sudo apt-get install rrdcached\n</code></pre> </li> <li> <p>Edit <code>/etc/default/rrdcached</code> to include:</p> <pre><code>BASE_OPTIONS=\"-B -F -R\"\nBASE_PATH=/opt/librenms/rrd/\nDAEMON_GROUP=librenms\nDAEMON_USER=librenms\nDAEMON=/usr/bin/rrdcached\nJOURNAL_PATH=/var/lib/rrdcached/journal/\nPIDFILE=/run/rrdcached.pid\nSOCKFILE=/run/rrdcached.sock\nSOCKGROUP=librenms\nWRITE_JITTER=1800\nWRITE_THREADS=4\nWRITE_TIMEOUT=1800\n</code></pre> </li> <li> <p>Fix permissions</p> <pre><code>chown librenms:librenms /var/lib/rrdcached/journal/\n</code></pre> </li> <li> <p>Restart the rrdcached service</p> <pre><code>systemctl restart rrdcached.service\n</code></pre> </li> </ol> <p>For info about version of rrdcached to install, see Debian packages</p> <ol> <li> <p>Install rrdcached</p> <pre><code>sudo apt-get install rrdcached\n</code></pre> </li> <li> <p>Edit <code>/etc/default/rrdcached</code> to include:</p> <pre><code>BASE_OPTIONS=\"-B -F -R\"\nBASE_PATH=/opt/librenms/rrd/\nDAEMON_GROUP=librenms\nDAEMON_USER=librenms\nDAEMON=/usr/bin/rrdcached\nJOURNAL_PATH=/var/lib/rrdcached/journal/\nPIDFILE=/var/run/rrdcached.pid\nSOCKFILE=/run/rrdcached.sock\nSOCKGROUP=librenms\nWRITE_JITTER=1800\nWRITE_THREADS=4\nWRITE_TIMEOUT=1800\n</code></pre> </li> <li> <p>Fix permissions</p> <pre><code>chown librenms:librenms /var/lib/rrdcached/journal/\n</code></pre> </li> <li> <p>Restart the rrdcached service</p> <pre><code>systemctl restart rrdcached.service\n</code></pre> </li> </ol> <p>Note</p> <p><code>rrdcached</code> is installed as part of the <code>rrdtool</code> package, but the <code>rrdcached</code> service is not setup by default, unlike the Ubuntu/Debian setup.</p> <p>The intermediate files generated during the process for the SELinux policy (e.g., <code>rrdcached_librenms.mod</code> and <code>rrdcached_librenms.pp</code>) do not need to be saved after the policy module is successfully installed.</p> <ol> <li> <p>link in the service and reload:</p> <pre><code>ln -s /opt/librenms/dist/rrdcached/rrdcached.service /etc/systemd/system/\nsystemctl daemon-reload\n</code></pre> </li> <li> <p>Configure SELinux for RRDCached</p> <ol> <li> <p>Compile the SELinux Policy Compile the SELinux policy module using the following command:</p> <pre><code>checkmodule -M -m -o /tmp/rrdcached_librenms.mod /opt/librenms/dist/rrdcached/rrdcached_librenms.te\n</code></pre> <p>Explanation:  - <code>-M</code>: Enable the module compiler.  - <code>-m</code>: Enable the module version format.  - <code>-o</code>: Specify the output file name.</p> </li> <li> <p>Package the Policy Module Package the compiled module into a loadable policy package:</p> <pre><code>semodule_package -o /tmp/rrdcached_librenms.pp -m /tmp/rrdcached_librenms.mod\n</code></pre> <p>Explanation:  - <code>-o</code>: Specify the output file name.  - <code>-m</code>: Specify the input file name.</p> </li> <li> <p>Apply the Policy Module Apply the policy module to the system:</p> <pre><code>semodule -i /tmp/rrdcached_librenms.pp\n</code></pre> <p>Explanation:  - <code>-i</code>: Install the policy module.</p> </li> </ol> </li> <li> <p>Start RRDcached and enable for start at boot</p> <pre><code>systemctl enable --now rrdcached.service\n</code></pre> </li> </ol> <p>This example is based on a fresh LibreNMS install, on a minimal CentOS 6 installation. In this example, we'll use the Repoforge repository.</p> <pre><code>rpm -ivh http://pkgs.repoforge.org/rpmforge-release/rpmforge-release-0.5.3-1.el6.rf.x86_64.rpm\n</code></pre> <p>Enable the Extra repo</p> <pre><code>vi /etc/yum.repos.d/rpmforge.repo\n</code></pre> <p>Install rrdtool</p> <pre><code>yum update rrdtool\n</code></pre> <p>Disable the [rpmforge] and [rpmforge-extras] repos again</p> <pre><code>vi /etc/yum.repos.d/rpmforge.repo\n</code></pre> <p>Edit the rrdcached config <code>/etc/sysconfig/rrdcached</code>:</p> <pre><code># Settings for rrdcached\nOPTIONS=\"-w 1800 -z 1800 -f 3600 -s librenms -U librenms -G librenms -B -R -j /var/tmp -l unix:/run/rrdcached.sock -t 4 -F -b /opt/librenms/rrd/\"\nRRDC_USER=librenms\n</code></pre> <pre><code>mkdir /var/run/rrdcached\nchown librenms:librenms /var/run/rrdcached/\nchown librenms:librenms /var/rrdtool/\nchown librenms:librenms /var/rrdtool/rrdcached/\n</code></pre> <pre><code>chkconfig rrdcached on\n</code></pre> <p>Restart rrdcached</p> <pre><code>service rrdcached start\n</code></pre>"},{"location":"Extensions/RRDCached/#network-rrdcached","title":"Network RRDCached","text":"<p>For remote RRDCached server make sure you have network option <code>-L</code> in <code>/var/default/rrdcached</code> or <code>rrdcached.unit</code></p> Debian/Ubuntu <p>Edit <code>/etc/default/rrdcached</code> to include: <pre><code>NETWORK_OPTIONS=\"-L\"\n</code></pre></p>"},{"location":"Extensions/RRDCached/#librenms-config","title":"LibreNMS config","text":"<p>Edit your LibreNMS config by running the following:</p> Local RRDCachedNetwork RRDCached <p>poller/rrdtool</p> <pre><code>lnms config:set rrdcached \"unix:/run/rrdcached.sock\"\n</code></pre> <p>poller/rrdtool</p> <pre><code>lnms config:set rrdcached \"${IPADDRESS}:42217\"\n</code></pre> <p>Note</p> <p>Change <code>${IPADDRESS}</code> to the ip the rrdcached server is listening on.</p>"},{"location":"Extensions/RRDCached/#verify","title":"Verify","text":"<p>Check to see if the graphs are being drawn in LibreNMS. This might take a few minutes. After at least one poll cycle (5 mins), check the LibreNMS disk I/O performance delta. Disk I/O can be found under the menu Devices&gt;All Devices&gt;[localhost_hostname]&gt;Health&gt;Disk I/O.</p> <p>Depending on many factors, you should see the Ops/sec drop by ~30-40%.</p>"},{"location":"Extensions/RRDCached/#verify-selinux","title":"Verify SELINUX","text":"<p>If you are using SELinux, and you have issue you can verify the policy module is installed by running the following command:</p> <pre><code>semodule -l | grep rrdcached_librenms\n</code></pre> <p>Test Functionality: Ensure LibreNMS can successfully interact with RRDcached without SELinux denials. Check SELinux logs for any denials:</p> <pre><code>ausearch -m avc -ts recent\n</code></pre> <p>If there are no denials, the policy module has been successfully installed and Librenms can interact with RRDcached.</p>"},{"location":"Extensions/RRDCached/#securing-rrcached","title":"Securing RRCached","text":"<p>According to the man page, under \"SECURITY CONSIDERATIONS\", rrdcached has no authentication or security except for running under a unix socket. If you choose to use a network socket instead of a unix socket, you will need to secure your rrdcached installation. To do so you can proxy rrdcached using nginx to allow only specific IPs to connect.</p> <p>Using the same setup above, using nginx version 1.9.0 or later, you can follow this setup to proxy the default rrdcached port to the local unix socket.</p> <p>(You can use <code>./conf.d</code> for your configuration as well)</p> <p><code>mkdir /etc/nginx/streams-{available,enabled}</code></p> <p>add the following to your nginx.conf file:</p> <pre><code>#/etc/nginx/nginx.conf\n...u\nstream {\n    include /etc/nginx/streams-enabled/*;\n}\n</code></pre> <p>Add this to <code>/etc/nginx/streams-available/rrd</code></p> <pre><code>server {\n    listen 42217;\n\n    error_log  /var/log/nginx/rrd.stream.error.log;\n\n    allow $LibreNMS_IP;\n    deny all;\n\n    proxy_pass unix:/run/rrdcached.sock;\n}\n</code></pre> <p>Replace <code>$LibreNMS_IP</code> with the ip of the server that will be using rrdcached. You can specify more than one <code>allow</code> statement. This will bind nginx to TCP 42217 (the default rrdcached port), allow the specified IPs to connect, and deny all others.</p> <p>next, we'll symlink the config to streams-enabled: <code>ln -s /etc/nginx/streams-{available,enabled}/rrd</code></p> <p>and reload nginx <code>service nginx reload</code></p>"},{"location":"Extensions/RRDTune/","title":"RRDTune","text":"<p>When we create rrd files for ports, we currently do so with a max value of 12500000000 (100G). Because of this if a device sends us bad data back then it can appear as though a 100M port is doing 40G+ which is impossible. To counter this you can enable the rrdtool tune option which will fix the max value to the interfaces physical speed (minimum of 10M).</p> <p>To enable this you can do so in three ways!</p> <ul> <li>Globally under Global Settings -&gt; Poller -&gt; Datastore: RRDTool</li> <li>For the actual device, Edit Device -&gt; Misc</li> <li>For each port, Edit Device -&gt; Port Settings</li> </ul> <p>Now when a port interface speed changes (this can happen because of a physical change or just because the device has misreported) the max value is set. If you don't want to wait until a port speed changes then you can run the included script:</p> <p><code>./scripts/tune_port.php -h &lt;hostname&gt; -p &lt;ifName&gt;</code></p> <p>Wildcards are supported using *, i.e:</p> <p><code>./scripts/tune_port.php -h local* -p eth*</code></p> <p>This script will then perform the rrdtool tune on each port found using the provided ifSpeed for that port.</p> <p>Run <code>./scripts/tune_port.php</code> to see help page.</p>"},{"location":"Extensions/Rancid/","title":"Rancid","text":"<p>Librenms can generate a list of hosts that can be monitored by RANCID. We assume you have currently a running Rancid, and you just need to create and update the file 'router.db'</p>"},{"location":"Extensions/Rancid/#included-rancid-script","title":"Included Rancid script","text":"<p>To generate the config file (maybe even add a cron to schedule this). We've assumed a few locations for Rancid, the config file you want to call it and where LibreNMS is:</p> <pre><code>cd /opt/librenms/scripts/\nphp ./gen_rancid.php &gt; /the/path/where/is/rancid/core/router.db\n</code></pre> <p>Sample cron:</p> <pre><code>15   0    * * * root cd /opt/librenms/scripts &amp;&amp; php ./gen_rancid.php &gt; /the/path/where/is/rancid/core/router.db\n</code></pre> <p>Now configure LibreNMS (make sure you point dir to your rancid data directory):</p> <pre><code>$config['rancid_configs']['core'] = '/the/path/where/is/rancid/core';\n$config['rancid_ignorecomments'] = 0;\n</code></pre> <p>After that, you should see some \"config\" tab on routers that have a rancid update.</p>"},{"location":"Extensions/Rancid/#ubuntu-rancid-install","title":"Ubuntu Rancid Install","text":"<p>The options shown below also contains the default values.</p> <p>NOTE - This is Only for Ubuntu 16.04 at this time, and may not work on other distros!</p> <p><code>sudo apt-get install rancid subversion</code></p> <p>Edit Rancid config file to use subversion or git instead of default cvs, and adds a group: <code>sudo vi /etc/rancid/rancid.conf</code></p> <p><code>LIST_OF_GROUPS=\"librenms\"</code></p> <p>Now change these two lines:</p> <pre><code>CVSROOT=$BASEDIR/CVS; export CVSROOT\nRCSSYS=cvs; export RCSSYS\n</code></pre> <p>to:</p> <pre><code>CVSROOT=$BASEDIR/SVN; export CVSROOT\nRCSSYS=svn; export RCSSYS\n</code></pre> <p>NOTE - This only creates 1 group! You can of course make more when you get the hang of it, this is just a basic 'Need it to work\" deal.</p> <p><code>sudo su -c /var/lib/rancid/bin/rancid-cvs -s /bin/bash -l rancid</code></p> <p>NOTE - do NOT change cvs to svn here! Leave command as is!</p> <p>Get a list of devices from Librenms you can pull configs from:</p> <pre><code>cd /opt/librenms/scripts\nsudo ./gen_rancid.php\n</code></pre> <p>Copy the output. Replace all \":\" with \";\" example:</p> <pre><code>alphcr1:cisco:up will change to:\nalphcr1;cisco;up\n</code></pre> <p>copy and past results into the below file: <code>sudo vi /var/lib/rancid/librenms/router.db</code></p> <p>NOTE - This ONLY applies to newer RANCID versions and Linux distros. Older versions will need to retain the : and not the ;</p> <p>Create/edit rancids login file:</p> <p><code>sudo vi /var/lib/rancid/.cloginrc</code></p> <p>Add following at minimum:</p> <pre><code>add user * &lt;your username here&gt;\nadd password * &lt;your password here&gt;\nadd method * ssh\nadd noenable * {1}                         ******This disables the enable when using radius etc *******\n</code></pre> <p>Grant permissions for rancid:</p> <pre><code>sudo chown rancid /var/lib/rancid/.cloginrc\nsudo chmod 600 /var/lib/rancid/.cloginrc\n</code></pre> <p>Test config: <code>sudo /usr/lib/rancid/bin/clogin -f /var/lib/rancid/.cloginrc &lt;device hostname&gt;</code></p> <p>NOTE: IF you run into a 'diffie-hellmen' kind of error, then it is because your Linux distro is using newer encryption methods etc. This is basically just letting you know that the device you tested on is running an outdated encryption type. I recommend updating downstream device if able.  If not, the following should fix:</p> <p><code>sudo vi /etc/ssh/ssh_config</code></p> <p>Add:</p> <p><code>KexAlgorithms diffie-hellman-group1-sha1</code></p> <p>Re-try logging into your device again</p> <p>Upon success, run rancid:</p> <p><code>sudo su -c /var/lib/rancid/bin/rancid-run -s /bin/bash -l rancid</code></p> <p>Ensure your configs pulled:</p> <pre><code>sudo su - rancid\ncd librenms/configs/\nls\n</code></pre> <p>Make sure your config files are there :-)</p> <pre><code>sudo usermod -a -G rancid librenms\n</code></pre> <p>Add Rancid into LibreNMS config.php:</p> <pre><code>### Rancid\n$config['rancid_configs'][]             = '/var/lib/rancid/librenms/configs/';\n$config['rancid_repo_type']             = 'svn';  //'svn' or 'git'\n$config['rancid_ignorecomments']        = 0;\n</code></pre> <p>Now restart apache <code>sudo /etc/init.d/apache2 restart</code></p>"},{"location":"Extensions/Redis-Sentinel/","title":"Redis High-Availability with Sentinel","text":""},{"location":"Extensions/Redis-Sentinel/#overview","title":"Overview","text":"<p>High-Availability with Redis can be achieved through multiple Redis nodes connected with multiple Sentinel nodes. A typical production setup includes 3 Redis instances with 3 Redis Sentinel processes running on separate servers. Three nodes are required to establish a quorum in case of a failure.</p> <p>For more information about high availability using Redis with Sentinel, refer to the official Redis Sentinel Documentation.</p>"},{"location":"Extensions/Redis-Sentinel/#configure-redis-sentinel-cluster-with-librenms","title":"Configure Redis Sentinel cluster with LibreNMS","text":"<p>Both LibreNMS WebUI and Poller can be configured to use a Redis Sentinel cluster as their backend.</p>"},{"location":"Extensions/Redis-Sentinel/#web-ui-configuration","title":"Web UI Configuration","text":"<p>To configure the Web UI to use a Redis Sentinel cluster, add the following parameters to your <code>.env</code> file:</p> <pre><code># Configure these values according to your environment\nREDIS_SENTINEL=192.168.1.10:26379,192.168.1.11:26379,192.168.1.12:26379\nREDIS_SENTINEL_SERVICE=mymaster\nREDIS_SENTINEL_PASSWORD=your_sentinel_password\nREDIS_PASSWORD=your_redis_password\n\n# These values tell the web app to use Sentinel as the Redis backend - do not change\nREDIS_BROADCAST_CONNECTION=sentinel_cache\nREDIS_CACHE_CONNECTION=sentinel_cache\nREDIS_LOCK_CACHE_CONNECTION=sentinel_cache\nSESSION_CONNECTION=sentinel_session\n</code></pre>"},{"location":"Extensions/Redis-Sentinel/#poller-configuration","title":"Poller Configuration","text":"<p>To configure the Poller to use a Redis Sentinel cluster, add the following to your <code>.env</code> file:</p> <pre><code># Configure these values according to your environment\nREDIS_SENTINEL=redis-001.example.org:26379,redis-002.example.org:26379,redis-003.example.org:26379\nREDIS_SENTINEL_SERVICE=mymaster\n\n# If requirepass is set in sentinel (recommended)\nREDIS_SENTINEL_PASSWORD=SentinelPasswordGoesHere\n\n# If ACLs are in use (highly recommended)\nREDIS_SENTINEL_USERNAME=SentinelUsernameGoesHere\nREDIS_PASSWORD=your_redis_password\n</code></pre> <p>For additional information on distributed polling configuration, see Distributed-Poller.md.</p>"},{"location":"Extensions/Redis-Sentinel/#testing-your-configuration","title":"Testing Your Configuration","text":"<p>To verify your Redis Sentinel setup is working correctly with LibreNMS you can connect to the Redis Sentinel cluster using the <code>redis-cli</code> and execute the <code>MONITOR</code> command. This command will show you the commands being executed on the Redis cluster.</p>"},{"location":"Extensions/SNMP-Proxy/","title":"SNMP Proxy","text":"<p>If you have machines that you want to monitor but are not reachable directly, you can use SNMPD Proxy. This will use the reachable SNMPD to proxy requests to the unreachable SNMPD.</p>"},{"location":"Extensions/SNMP-Proxy/#example-configuration","title":"Example configuration","text":"<p>We want to poll 'unreachable.example.com' via</p> <p>'hereweare.example.com'. Use the following config:</p> <p>On 'hereweare.example.com':</p> <pre><code>        view all included .1\n        com2sec -Cn ctx_unreachable readonly &lt;poller-ip&gt; unreachable\n        access MyROGroup ctx_unreachable any noauth prefix all none none\n        proxy -Cn ctx_unreachable -v 2c -c private unreachable.example.com  .1.3\n</code></pre> <p>On 'unreachable.example.com':</p> <pre><code>        view all included .1                               80\n        com2sec readonly &lt;hereweare.example.com ip address&gt; private\n        group MyROGroup v1 readonly\n        group MyROGroup v2c readonly\n        group MyROGroup usm readonly\n        access MyROGroup \"\" any noauth exact all none none\n</code></pre> <p>You can now poll community 'private' on 'unreachable.example.com' via community 'unreachable' on host 'hereweare.example.com'. Please note that requests on 'unreachable.example.com' will be coming from 'hereweare.example.com', not your poller.</p>"},{"location":"Extensions/SNMP-Trap-Handler/","title":"SNMP trap handling","text":"<p>Currently, LibreNMS supports a lot of trap handlers. You can check them on GitHub here. To add more see Adding new SNMP Trap handlers. Traps are handled via snmptrapd.</p> <p>snmptrapd is an SNMP application that receives and logs SNMP TRAP and INFORM messages.</p> <p>The default is to listen on UDP port 162 on all IPv4 interfaces. Since 162 is a privileged port, snmptrapd must typically be run as root.</p>"},{"location":"Extensions/SNMP-Trap-Handler/#configure-snmptrapd","title":"Configure snmptrapd","text":"<p>Install snmptrapd via your package manager.</p> <p>For example (Debian based systems):</p> <pre><code>sudo apt install snmptrapd -y\n</code></pre> <p>In <code>/etc/snmp/snmptrapd.conf</code>, add :</p> <pre><code>disableAuthorization yes\nauthCommunity log,execute,net COMMUNITYSTRING\ntraphandle default /opt/librenms/snmptrap.php\n</code></pre> <p>To enable snmptrapd to properly parse traps, we will need to add MIBs to service.</p>"},{"location":"Extensions/SNMP-Trap-Handler/#option-1","title":"Option 1","text":"<p>Make the folder <code>/etc/systemd/system/snmptrapd.service.d/</code> and edit the file <code>/etc/systemd/system/snmptrapd.service.d/mibs.conf</code> and add the following content.</p> <p>You may want to tweak to add vendor directories for devices you care about. In the example below, standard and cisco directories are defined, and only IF-MIB is loaded.</p> <pre><code>[Service]\nEnvironment=MIBDIRS=+/opt/librenms/mibs:/opt/librenms/mibs/cisco\nEnvironment=MIBS=+IF-MIB\n</code></pre> <p>For non-systemd systems, you can edit TRAPDOPTS in the init script in /etc/init.d/snmptrapd.</p> <p><code>TRAPDOPTS=\"-Lsd  -M /opt/librenms/mibs -m IF-MIB -f -p $TRAPD_PID\"</code></p> <p>Along with any necessary configuration to receive the traps from your devices (community, etc.)</p>"},{"location":"Extensions/SNMP-Trap-Handler/#option-2","title":"Option 2","text":"<p>Tested on Ubuntu 18</p> <p>Just set up your service like:</p> <pre><code>[Unit]\nDescription=Simple Network Management Protocol (SNMP) Trap Daemon.\nAfter=network.target\nConditionPathExists=/etc/snmp/snmptrapd.conf\n\n[Service]\nEnvironment=\"MIBSDIR=/opt/librenms/mibs\"\nType=simple\nExecStart=/usr/sbin/snmptrapd -f -m IF-MIB -M /opt/librenms/mibs\nExecReload=/bin/kill -HUP $MAINPID\n\n[Install]\nWantedBy=multi-user.target\n</code></pre> <p>In Ubuntu 18 is service located by default in <code>/etc/systemd/system/multi-user.target.wants/snmptrapd.service</code></p> <p>Here is a list of snmptrapd options:</p> Option Description -a Ignore authenticationFailure traps. [OPTIONAL] -f Do not fork from the shell -n Use numeric addresses instead of attempting hostname lookups (no DNS) [OPTIONAL] -m MIBLIST: use MIBLIST (<code>FILE1-MIB:FILE2-MIB</code>). <code>ALL</code> = Load all MIBS in DIRLIST. (usually fails) -M DIRLIST: use DIRLIST as the list of locations to look for MIBs. Option is not recursive, so you need to specify each DIR individually, separated by <code>:</code>. (For example: /opt/librenms/mibs:/opt/librenms/mibs/cisco:/opt/librenms/mibs/edgecos) <p>Good practice is to avoid <code>-m ALL</code> because then it will try to load all the MIBs in DIRLIST, which will typically fail (snmptrapd cannot load that many mibs). Better is to specify the exact MIB files defining the traps you are interested in, for example for LinkDown and LinkUp as well as BGP traps, use <code>-m IF-MIB:BGP4-MIB</code>. Multiple files can be added, separated with <code>:</code>.</p> <p>If you want to test or store original TRAPS in log then:</p> <p>Create a folder for storing traps for example in file <code>traps.log</code></p> <pre><code>sudo mkdir /var/log/snmptrap\n</code></pre> <p>Add the following config to your snmptrapd.service after <code>ExecStart=/usr/sbin/snmptrapd -f -m ALL -M /opt/librenms/mibs</code></p> <pre><code>-tLf /var/log/snmptrap/traps.log\n</code></pre> <p>On SELinux, you need to configure SELinux for SNMPd to communicate to LibreNMS:</p> <pre><code>cat &gt; snmptrap.te &lt;&lt; EOF\nmodule snmptrap 1.0;\n\nrequire {\n        type httpd_sys_rw_content_t;\n        type snmpd_t;\n        class file { append getattr open read };\n        class capability dac_override;\n}\n\n#============= snmpd_t ==============\n\nallow snmpd_t httpd_sys_rw_content_t:file { append getattr open read };\nallow snmpd_t self:capability dac_override;\nEOF\ncheckmodule -M -m -o snmptrap.mod snmptrap.te\nsemodule_package -o snmptrap.pp -m snmptrap.mod\nsemodule -i snmptrap.pp\n</code></pre> <p>After successfully configuring the service, reload service files, enable, and start the snmptrapd service:</p> <pre><code>sudo systemctl daemon-reload\nsudo systemctl enable snmptrapd\nsudo systemctl restart snmptrapd\n</code></pre>"},{"location":"Extensions/SNMP-Trap-Handler/#testing","title":"Testing","text":"<p>The easiest test is to generate a trap from your device. Usually, changing the configuration on a network device, or plugging/unplugging a network cable (LinkUp, LinkDown) will generate a trap. You can confirm it using a with <code>tcpdump</code>, <code>tshark</code> or <code>wireshark</code>.</p> <p>You can also generate a trap using the <code>snmptrap</code> command from the LibreNMS server itself (if and only if the LibreNMS server is monitored).</p>"},{"location":"Extensions/SNMP-Trap-Handler/#how-to-send-snmp-v2-trap","title":"How to send SNMP v2 Trap","text":"<p>The command below takes the form of:</p> <pre><code>snmptrap -v &lt;snmp_version&gt; -c &lt;community&gt; &lt;destination_host&gt; &lt;uptime&gt; &lt;OID_or_MIB&gt; &lt;object&gt; &lt;value_type&gt; &lt;value&gt;\n</code></pre> <p>Using OID's:</p> <pre><code>snmptrap -v 2c -c public localhost '' 1.3.6.1.4.1.8072.2.3.0.1 1.3.6.1.4.1.8072.2.3.2.1 i 123456\n</code></pre> <p>If you have configured logging of traps to <code>/var/log/snmptrap/traps.log</code> then you will see in <code>traps.log</code> new entry:</p> <pre><code>2020-03-09 16:22:59 localhost [UDP: [127.0.0.1]:58942-&gt;[127.0.0.1]:162]:\nSNMPv2-MIB::sysUpTime.0 = Timeticks: (149721964) 17 days, 7:53:39.64    SNMPv2-MIB::snmpTrapOID.0 = OID: SNMPv2-SMI::enterprises.8072.2.3.0.1   SNMPv2-SMI::enterprises.8072.2.3.2.1 = INTEGER: 123456\n</code></pre> <p>and in LibreNMS your localhost device eventlog like:</p> <pre><code>2020-03-09 16:22:59             SNMP trap received: SNMPv2-SMI::enterprises.8072.2.3.0.1\n</code></pre>"},{"location":"Extensions/SNMP-Trap-Handler/#why-we-need-uptime","title":"Why we need Uptime","text":"<p>When you send a trap, it must of course conform to a set of standards. Every trap needs an uptime value. Uptime is how long the system has been running since boot. Sometimes this is the operating system, other devices might use the SNMP engine uptime. Regardless, a value will be sent.</p> <p>So what value should you type in the commands below? Oddly enough, simply supplying no value by using two single quotes '' will instruct the command to obtain the value from the operating system you are executing this on.</p>"},{"location":"Extensions/SNMP-Trap-Handler/#event-logging","title":"Event logging","text":"<p>You can configure generic event logging for snmp traps.  This will log an event of the type trap for received traps. These events can be used for alerting. By default, only the TrapOID is logged. But you can enable the \"detailed\" variant, and all the data received with the trap will be logged.</p> <p>The parameter can be found in General Settings / External / SNMP Traps Integration.</p> <p>It can also be configured in your config.</p> <p>external/snmptrapd</p> <pre><code>lnms config:set snmptraps.eventlog 'unhandled'\nlnms config:set snmptraps.eventlog_detailed false\n</code></pre> <p>Valid options are:</p> <ul> <li><code>unhandled</code> only unhandled traps will be logged (default value)</li> <li><code>all</code> log all traps</li> <li><code>none</code> no traps will create a generic event log (handled traps may still log events)</li> </ul>"},{"location":"Extensions/Services/","title":"Nagios Plugins - Services","text":"<p>Services within LibreNMS provides the ability to leverage Nagios plugins to perform additional monitoring outside of SNMP. Services can also be used in conjunction with your SNMP monitoring for larger monitoring functionality.</p>"},{"location":"Extensions/Services/#setting-up-services","title":"Setting up Services","text":"<p>Services must be tied to a device to function properly. A good generic option is to use <code>localhost</code>, but it is suggested to attach the check to the device you are monitoring.</p>"},{"location":"Extensions/Services/#nagios-plugins-source","title":"Nagios plugins source","text":"<p>Plugins come from two main sources:</p> <ul> <li>monitoring-plugins</li> <li>pkg-nagios-plugins-contrib</li> </ul> <p>Note: Plugins will only load if they are prefixed with <code>check_</code>. The <code>check_</code> prefix is stripped out when displaying in the \"Add Service\" GUI \"Type\" dropdown list.</p>"},{"location":"Extensions/Services/#service-templates","title":"Service Templates","text":"<p>Service Templates within LibreNMS provides the same ability as Nagios does with Host Groups. Known as Device Groups in LibreNMS. They are applied devices that belong to the specified Device Group.</p> <p>Use the Apply buttons to manually create or update Services for the Service Template. Use the Remove buttons to manually remove Services for the Service Template.</p> <p>After you Edit a Service Template, and then use Apply, all relevant changes are pushed to existing Services previously created.</p> <p>You can also enable Service Templates Auto Discovery to have Services added / removed / updated on regular discover intervals.</p> <p>When a Device is a member of multiple Device Groups, templates from all of those Device Groups are applied.</p> <p>If a Device is added or removed from a Device Group, when the Apply button is used or Auto Discovery runs Services will be added / removed as appropriate.</p> <p>Service Templates are tied into Device Groups, you need at least one Device Group to be able to add Service Templates - You can define a dummy one. The Device Group does not need members to add Service Templates.</p>"},{"location":"Extensions/Services/#service-auto-discovery","title":"Service Auto Discovery","text":"<p>To automatically create services for devices with available checks.</p> <p>You need to enable the discover services within config.php with the following:</p> <pre><code>$config['discover_services']           = true;\n</code></pre>"},{"location":"Extensions/Services/#service-templates-auto-discovery","title":"Service Templates Auto Discovery","text":"<p>To automatically create services for devices with configured Service Templates.</p> <p>You need to enable the discover services within config.php with the following:</p> <pre><code>$config['discover_services_templates']           = true;\n</code></pre>"},{"location":"Extensions/Services/#setup","title":"Setup","text":"<p>Service checks are now distributable if you run a distributed setup. To leverage this, use the <code>dispatch</code> service. Alternatively, you could also replace <code>check-services.php</code> with <code>services-wrapper.py</code> in cron instead to run across all polling nodes.</p> <p>If you need to debug the output of services-wrapper.py then you can add <code>-d</code> to the end of the command - it is NOT recommended to do this in cron.</p> <p>Firstly, install Nagios plugins.</p> <p>Debian / Ubuntu: <code>sudo apt install monitoring-plugins</code> Centos: <code>yum install nagios-plugins-all</code></p> <p>Note: The plugins are bundled with the pre-build VM and Docker images.</p> <p>Next, you need to enable the services within config.php with the following:</p> <pre><code>$config['show_services']           = 1;\n</code></pre> <p>This will enable a new service menu within your navbar.</p> <p>Debian/Ubuntu: <pre><code>$config['nagios_plugins']   = \"/usr/lib/nagios/plugins\";\n</code></pre></p> <p>Centos: <pre><code>$config['nagios_plugins']   = \"/usr/lib64/nagios/plugins\";\n</code></pre></p> <p>This will point LibreNMS at the location of the nagios plugins - please ensure that any plugins you use are set to executable. For example:</p> <p>Debian/Ubuntu: <pre><code>chmod +x /usr/lib/nagios/plugins/*\n</code></pre></p> <p>Centos: <pre><code>chmod +x /usr/lib64/nagios/plugins/*\n</code></pre></p> <p>Finally, you now need to add services-wrapper.py to the current cron file (/etc/cron.d/librenms typically) like:</p> <pre><code>*/5 * * * * librenms /opt/librenms/services-wrapper.py 1\n</code></pre> <p>Now you can add services via the main Services link in the navbar, or via the 'Add Service' link within the device, services page.</p> <p>Note that some services (procs, inodes, load and similar) will always poll the local LibreNMS server it's running on, regardless of which device you add it to.</p>"},{"location":"Extensions/Services/#performance-data","title":"Performance data","text":"<p>By default, the check-services script will collect all performance data that the Nagios script returns and display each datasource on a separate graph. LibreNMS expects scripts to return using Nagios convention for the response message structure: AEN200</p> <p>However for some modules it would be better if some of this information was consolidated on a single graph. An example is the ICMP check. This check returns: Round Trip Average (rta), Round Trip Min (rtmin) and Round Trip Max (rtmax). These have been combined onto a single graph.</p> <p>If you find a check script that would benefit from having some datasources graphed together, please log an issue on GitHub with the debug information from the script, and let us know which DS's should go together. Example below:</p> <pre><code>    ./check-services.php -d\n    -- snip --\n    Nagios Service - 26\n    Request:  /usr/lib/nagios/plugins/check_icmp localhost\n    Perf Data - DS: rta, Value: 0.016, UOM: ms\n    Perf Data - DS: pl, Value: 0, UOM: %\n    Perf Data - DS: rtmax, Value: 0.044, UOM: ms\n    Perf Data - DS: rtmin, Value: 0.009, UOM: ms\n    Response: OK - localhost: rta 0.016ms, lost 0%\n    Service DS: {\n        \"rta\": \"ms\",\n        \"pl\": \"%\",\n        \"rtmax\": \"ms\",\n        \"rtmin\": \"ms\"\n    }\n    OK u:0.00 s:0.00 r:40.67\n    RRD[update /opt/librenms/rrd/localhost/services-26.rrd N:0.016:0:0.044:0.009]\n    -- snip --\n</code></pre>"},{"location":"Extensions/Services/#alerting","title":"Alerting","text":"<p>Services uses the Nagios Alerting scheme where exit code:</p> <pre><code>    0 = Ok,\n    1 = Warning,\n    2 = Critical,\n</code></pre> <p>To create an alerting rule to alert on service=critical, your alerting rule would look like:</p> <pre><code>    %services.service_status = \"2\"\n</code></pre>"},{"location":"Extensions/Services/#debug","title":"Debug","text":"<p>Change user to librenms for example</p> <pre><code>su - librenms\n</code></pre> <p>then you can run the following command to help troubleshoot services.</p> <pre><code>./check-services.php -d\n</code></pre>"},{"location":"Extensions/Services/#related-polling-discovery-options","title":"Related Polling / Discovery Options","text":"<p>These settings are related and should be investigated and set accordingly. The below values are not defaults or recommended.</p> <p>poller/scheduledtasks</p> <pre><code>lnms config:set schedule_type.services dispatcher\n</code></pre> <p>poller/dispatcherservice</p> <pre><code>lnms config:set service_services_workers 16\nlnms config:set service_discovery_workers 300\n</code></pre> <p>Please also see Dispatcher Service</p>"},{"location":"Extensions/Services/#service-checks-polling-logic","title":"Service checks polling logic","text":"<p>Service check is skipped when the associated device is not pingable, and an appropriate entry is populated in the event log. Service check is polled if it's <code>IP address</code> parameter is not equal to associated device's IP address, even when the associated device is not pingable.</p> <p>To override the default logic and always poll service checks, you can disable ICMP testing for any device by switching <code>Disable ICMP Test</code> setting (Edit -&gt; Misc) to ON.</p> <p>Service checks will never be polled on disabled devices.</p>"},{"location":"Extensions/Services/#check_mrpe","title":"CHECK_MRPE","text":"<p>In most cases, only Nagios plugins that run against a remote host with the -H option are available as services.  However, if you're remote host is running the Check_MK agent you may be able to use MRPE to monitor Nagios plugins that only execute locally as services.</p> <p>For example, consider the fairly common check_cpu.sh Nagios plugin. If you added..</p> <p>cpu_check /usr/lib/nagios/plugins/check_cpu.sh -c 95 -w 75</p> <p>...to <code>/etc/check_mk/mrpe.cfg</code> on your remote host, you should be able to check its output by configuring a service using the check_mrpe script.</p> <ul> <li>Add check_mrpe to the Nagios plugins directory on your LibreNMS server and make it executable.</li> <li>In LibreNMS, add a new service to the desired device with the type mrpe.</li> <li>Enter the IP address of the remote host and in parameters enter <code>-a cpu_check</code> (this should match the name used at the beginning of the line in the mrpe.cfg file).</li> </ul>"},{"location":"Extensions/Smokeping/","title":"Smokeping integration","text":"<p>SmokePing is a tool which lets us keep track of network latency, and visualise this through RRD graphs.</p> <p>LibreNMS has support for both new and pre-existing SmokePing installations.</p> <p>For new installations, we can use the <code>lnms</code> cli to generate a Smokeping configuration file.</p>"},{"location":"Extensions/Smokeping/#pre-existing-smokeping-installation","title":"Pre-Existing Smokeping Installation","text":"<p>If you have an existing smokeping server, follow the instructions, you only need to look at Configure LibreNMS - All Operating Systems.</p>"},{"location":"Extensions/Smokeping/#new-installation","title":"New Installation","text":"<p>All installation steps assume a clean configuration - if you have an existing smokeping setup, you'll need to adapt these steps somewhat.</p>"},{"location":"Extensions/Smokeping/#install-and-integrate-smokeping-backend-rhel-centos-and-alike","title":"Install and integrate Smokeping Backend - RHEL, CentOS and alike","text":"<p>Smokeping is available via EPEL, which if you're running LibreNMS, you probably already have. If you want to do something like run Smokeping on a seperate host and ship data via RRCached though, here's the install command:</p> <pre><code>sudo yum install https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm\nsudo yum install smokeping\n</code></pre> <p>Once installed, you should need a cron script installed to make sure that the configuration file is updated. You can find an example in <code>misc/librenms-smokeping-rhel.example</code>. Put this into /etc/cron.d/hourly, and mark it executable:</p> <pre><code>sudo cp /opt/librenms/misc/smokeping-rhel.example /etc/cron.hourly/librenms-smokeping\nsudo chmod +x /etc/cron.hourly/librenms-smokeping\n</code></pre> <p>Finally, update the default configuration. Strip everything from the <code>*** Probes ***</code> and <code>*** Targets ***</code> stanza's, and replace with:</p> <pre><code>*** Probes ***\n\n@include /etc/smokeping/librenms-probes.conf\n</code></pre> <pre><code>*** Targets ***\n\nprobe = FPing\n\nmenu = Top\ntitle = Network Latency Grapher\nremark = Welcome to the SmokePing website of &lt;b&gt;Insert Company Name Here&lt;/b&gt;. \\\n         Here you will learn all about the latency of our network.\n\n@include /etc/smokeping/librenms-targets.conf\n</code></pre> <p>Note there may be other stanza's (possibly <code>*** Slaves ***</code>) between the <code>*** Probes ***</code> and <code>*** Targets ***</code> stanza's - leave these intact.</p> <p>Leave everything else untouched. If you need to add other configuration, make sure it comes after the LibreNMS configuration, and keep in mind that Smokeping does not allow duplicate modules, and cares about the configuration file sequence.</p> <p>Once you're happy, manually kick off the cron once, then enable and start smokeping:</p> <pre><code>sudo /etc/cron.hourly/librenms-smokeping\nsudo systemctl enable --now smokeping\n</code></pre>"},{"location":"Extensions/Smokeping/#install-and-integrate-smokeping-backend-ubuntu-debian-and-alike","title":"Install and integrate Smokeping Backend - Ubuntu, Debian and alike","text":"<p>Smokeping is available via the default repositories.</p> <pre><code>sudo apt-get install smokeping\n</code></pre> <p>Once installed, you should need a cron script installed to make sure that the configuration file is updated. You can find an example in <code>misc/librenms-smokeping-debian.example</code>. Put this into /etc/cron.d/hourly, and mark it executable:</p> <pre><code>sudo cp /opt/librenms/misc/smokeping-debian.example /etc/cron.hourly/librenms-smokeping\nsudo chmod +x /etc/cron.hourly/librenms-smokeping\n</code></pre> <p>Finally, update the default configuration. Strip everything from <code>/etc/smokeping/config.d/Probes</code> and replace with:</p> <pre><code>*** Probes ***\n\n@include /etc/smokeping/config.d/librenms-probes.conf\n</code></pre> <p>Strip everything from <code>/etc/smokeping/config.d/Targets</code> and replace with:</p> <pre><code>*** Targets ***\n\nprobe = FPing\n\nmenu = Top\ntitle = Network Latency Grapher\nremark = Welcome to the SmokePing website of &lt;b&gt;Insert Company Name Here&lt;/b&gt;. \\\n         Here you will learn all about the latency of our network.\n\n@include /etc/smokeping/config.d/librenms-targets.conf\n</code></pre> <p>Leave everything else untouched. If you need to add other configuration, make sure it comes after the LibreNMS configuration, and keep in mind that Smokeping does not allow duplicate modules, and cares about the configuration file sequence.</p>"},{"location":"Extensions/Smokeping/#configure-librenms-all-operating-systems","title":"Configure LibreNMS - All Operating Systems","text":"<p>external/smokeping</p> <pre><code>lnms config:set smokeping.dir '/var/lib/smokeping'\nlnms config:set smokeping.pings 20\nlnms config:set smokeping.probes 2\nlnms config:set smokeping.integration true\nlnms config:set smokeping.url 'smokeping/'\n</code></pre> <p><code>dir</code> should match the location that smokeping writes RRD's to <code>pings</code> should match the default smokeping value, default 20 <code>probes</code> should be the number of processes to spread pings over, default 2</p> <p>These settings can also be set in the Web UI.</p>"},{"location":"Extensions/Smokeping/#configure-smokepings-web-ui-optional","title":"Configure Smokeping's Web UI - Optional","text":"<p>This section covers the required configuration for your web server of choice. This covers the required configuration for either Apache or Nginx.</p> <p>LibreNMS does not need the Web UI - you can find the graphs in LibreNMS on the latency tab.</p>"},{"location":"Extensions/Smokeping/#apache-configuration-ubuntu-debian-and-alike","title":"Apache Configuration - Ubuntu, Debian and alike","text":"<p>Edit the <code>General</code> configuration file's Owner and contact, and cgiurl hostname details:</p> <pre><code>nano /etc/smokeping/config.d/General\nowner    = LibreNMS-Admin\ncontact  = admin@ACME.xxx\ncgiurl   = http://yourlibrenms/cgi-bin/smokeping.cgi\n</code></pre> <p>Smokeping should automatically install an Apache configuration file in <code>/etc/apache2/conf-available/</code>. Verify this using :</p> <pre><code>librenms@librenms:~/scripts$ ls /etc/apache2/conf-available/ | grep smokeping\nsmokeping.conf\n</code></pre> <p>If you don't see <code>smokeping.conf</code> listed, you'll need to create a symlink for it:</p> <pre><code>ln -s /etc/smokeping/apache2.conf /etc/apache2/conf-available/smokeping.conf\n</code></pre> <p>After creating the symlink, restart Apache with <code>sudo systemctl apache2 restart</code></p> <p>You should be able to load the Smokeping web interface at <code>http://yourhost/cgi-bin/smokeping.cgi</code></p>"},{"location":"Extensions/Smokeping/#nginx-configuration-rhel-centos-and-alike","title":"Nginx Configuration - RHEL, CentOS and alike","text":"<p>This section assumes you have configured LibreNMS with Nginx as specified in Configure Nginx.</p> <p>Note, you need to install fcgiwrap for CGI wrapper interact with Nginx <pre><code>yum install fcgiwrap\n</code></pre> Then create a new configuration file for fcgiwrap in /etc/nginx/fcgiwrap.conf <pre><code># Include this file on your nginx.conf to support debian cgi-bin scripts using\n# fcgiwrap\nlocation /cgi-bin/ {\n  # Disable gzip (it makes scripts feel slower since they have to complete\n  # before getting gzipped)\n  gzip off;\n\n  # Set the root to /usr/lib (inside this location this means that we are\n  # giving access to the files under /usr/lib/cgi-bin)\n  #root /usr/lib;\n  root /usr/share/nginx;\n\n  # Fastcgi socket\n  fastcgi_pass  unix:/var/run/fcgiwrap.socket;\n\n  # Fastcgi parameters, include the standard ones\n  include /etc/nginx/fastcgi_params;\n\n  # Adjust non standard parameters (SCRIPT_FILENAME)\n  fastcgi_param SCRIPT_FILENAME  /usr/lib$fastcgi_script_name;\n} \n</code></pre> Be sure to create the folder cgi-bin folder with required permissions (755) <pre><code>mkdir /usr/share/nginx/cgi-bin\n</code></pre> Create fcgiwrap systemd service in /usr/lib/systemd/system/fcgiwrap.service <pre><code># create new\n[Unit]\nDescription=Simple CGI Server\nAfter=nss-user-lookup.target\nRequires=fcgiwrap.socket\n\n[Service]\nEnvironmentFile=/etc/sysconfig/fcgiwrap\nExecStart=/usr/sbin/fcgiwrap ${DAEMON_OPTS} -c ${DAEMON_PROCS}\nUser=librenms\nGroup=librenms\n\n[Install]\nAlso=fcgiwrap.socket\n</code></pre> The socket file in /usr/lib/systemd/system/fcgiwrap.socket <pre><code># create new\n[Unit]\nDescription=fcgiwrap Socket\n\n[Socket]\nListenStream=/var/run/fcgiwrap.socket\n\n[Install]\nWantedBy=sockets.target\n</code></pre> Enable fcgiwrap <pre><code>systemctl enable --now fcgiwrap\n</code></pre></p> <p>Add the following configuration to your <code>/etc/nginx/conf.d/librenms.conf</code> file within <code>server</code> section.</p> <p>The following will configure Nginx to respond to <code>http://yourlibrenms/smokeping</code>: <pre><code>location = /smokeping/ {\n        fastcgi_intercept_errors on;\n        fastcgi_param   SCRIPT_FILENAME         /usr/share/smokeping/cgi/smokeping.fcgi;\n        fastcgi_param   QUERY_STRING            $query_string;\n        fastcgi_param   REQUEST_METHOD          $request_method;\n        fastcgi_param   CONTENT_TYPE            $content_type;\n        fastcgi_param   CONTENT_LENGTH          $content_length;\n        fastcgi_param   REQUEST_URI             $request_uri;\n        fastcgi_param   DOCUMENT_URI            $document_uri;\n        fastcgi_param   DOCUMENT_ROOT           $document_root;\n        fastcgi_param   SERVER_PROTOCOL         $server_protocol;\n        fastcgi_param   GATEWAY_INTERFACE       CGI/1.1;\n        fastcgi_param   SERVER_SOFTWARE         nginx/$nginx_version;\n        fastcgi_param   REMOTE_ADDR             $remote_addr;\n        fastcgi_param   REMOTE_PORT             $remote_port;\n        fastcgi_param   SERVER_ADDR             $server_addr;\n        fastcgi_param   SERVER_PORT             $server_port;\n        fastcgi_param   SERVER_NAME             $server_name;\n        fastcgi_param   HTTPS                   $https if_not_empty;\n        fastcgi_pass unix:/var/run/fcgiwrap.socket;\n}\n\nlocation ^~ /smokeping/ {\n        alias /usr/share/smokeping/cgi/;\n        index smokeping.fcgi;\n        gzip off;\n}\n</code></pre> If images/js/css don't load, you might have to add <pre><code>location ^~ /smokeping/css {\n        alias /usr/share/smokeping/htdocs/css/;\n        gzip off;\n}\nlocation ^~ /smokeping/js {\n        alias /usr/share/smokeping/htdocs/js/;\n        gzip off;\n}\nlocation ^~ /smokeping/images {\n        alias /opt/librenms/rrd/smokeping/images;\n        gzip off;\n}\n</code></pre> After saving the configuration file, verify your Nginx configuration file syntax is OK with <code>sudo nginx -t</code>, then restart Nginx with <code>sudo systemctl restart nginx</code></p> <p>You should be able to load the Smokeping web interface at <code>http://yourlibrenms/smokeping</code></p>"},{"location":"Extensions/Smokeping/#nginx-configuration-ubuntu-debian-and-alike","title":"Nginx Configuration - Ubuntu, Debian and alike","text":"<p>This section assumes you have configured LibreNMS with Nginx as specified in Configure Nginx.</p> <p>Note, you need to install fcgiwrap for CGI wrapper interact with Nginx</p> <p><pre><code>apt install fcgiwrap\n</code></pre> Then configure Nginx with the default configuration</p> <pre><code>cp /usr/share/doc/fcgiwrap/examples/nginx.conf /etc/nginx/fcgiwrap.conf\n</code></pre> <p>Add the following configuration to your <code>/etc/nginx/conf.d/librenms.conf</code> file within <code>server</code> section.</p> <p>The following will configure Nginx to respond to <code>http://yourlibrenms/smokeping</code>:</p> <pre><code># Browsing to `http://yourlibrenms/smokeping/` should bring up the smokeping web interface\n\nlocation = /smokeping/ {\n        fastcgi_intercept_errors on;\n\n        fastcgi_param   SCRIPT_FILENAME         /usr/lib/cgi-bin/smokeping.cgi;\n        fastcgi_param   QUERY_STRING            $query_string;\n        fastcgi_param   REQUEST_METHOD          $request_method;\n        fastcgi_param   CONTENT_TYPE            $content_type;\n        fastcgi_param   CONTENT_LENGTH          $content_length;\n        fastcgi_param   REQUEST_URI             $request_uri;\n        fastcgi_param   DOCUMENT_URI            $document_uri;\n        fastcgi_param   DOCUMENT_ROOT           $document_root;\n        fastcgi_param   SERVER_PROTOCOL         $server_protocol;\n        fastcgi_param   GATEWAY_INTERFACE       CGI/1.1;\n        fastcgi_param   SERVER_SOFTWARE         nginx/$nginx_version;\n        fastcgi_param   REMOTE_ADDR             $remote_addr;\n        fastcgi_param   REMOTE_PORT             $remote_port;\n        fastcgi_param   SERVER_ADDR             $server_addr;\n        fastcgi_param   SERVER_PORT             $server_port;\n        fastcgi_param   SERVER_NAME             $server_name;\n        fastcgi_param   HTTPS                   $https if_not_empty;\n\n        fastcgi_pass unix:/var/run/fcgiwrap.socket;\n}\n\nlocation ^~ /smokeping/ {\n        alias /usr/share/smokeping/www/;\n        index smokeping.cgi;\n        gzip off;\n}\n</code></pre> <p>After saving the configuration file, verify your Nginx configuration file syntax is OK with <code>sudo nginx -t</code>, then restart Nginx with <code>sudo systemctl restart nginx</code></p> <p>You should be able to load the Smokeping web interface at <code>http://yourlibrenms/smokeping</code></p>"},{"location":"Extensions/Smokeping/#nginx-password-authentication","title":"Nginx Password Authentication","text":"<p>You can use the purpose-made htpasswd utility included in the apache2-utils package (Nginx password files use the same format as Apache). You can install it on Ubuntu with</p> <pre><code>apt install apache2-utils\n</code></pre> <p>After that you need to create password for your user</p> <pre><code>htpasswd -c /etc/nginx/.htpasswd USER\n</code></pre> <p>You can verify your user and password with</p> <pre><code>cat /etc/nginx/.htpasswd\n</code></pre> <p>Then you just need to add to your config <code>auth_basic</code> parameters</p> <pre><code>        location ^~ /smokeping/ {\n                alias /usr/share/smokeping/www/;\n                index smokeping.cgi;\n                gzip off;\n                auth_basic \"Private Property\";\n                auth_basic_user_file /etc/nginx/.htpasswd;\n        }\n</code></pre>"},{"location":"Extensions/Smokeping/#common-problems","title":"Common Problems","text":""},{"location":"Extensions/Smokeping/#rrdsupdate-error-opening-permission-denied","title":"RRDs::update ERROR: opening ... Permission denied","text":"<p>There is a problem writing to the RRD directory. This is somewhat out of scope of LibreNMS, but make sure that file permissions and SELinux labels allow the smokeping user to write to the directory.</p> <p>If you're using RRDCacheD, make sure that the permissions are correct there too, and that if you're using -B that the smokeping RRD's are inside the base directory; update the smokeping rrd directory if required.</p> <p>It's not recommended to run RRDCachedD without the -B switch.</p>"},{"location":"Extensions/Smokeping/#share-rrdcached-with-librenms","title":"Share RRDCached with LibreNMS","text":"<p>Move the RRD's and give smokeping access rights to the LibreNMS RRD directory: <pre><code>sudo systemctl stop smokeping\nsudo mv /var/lib/smokeping /opt/librenms/rrd/\nsudo usermod -a -G librenms smokeping\n</code></pre></p> <p>Update data directory in /etc/smokeping:</p> <pre><code>datadir = /opt/librenms/rrd/smokeping\ndyndir = /opt/librenms/rrd/smokeping/__cgi\n</code></pre> <p>If you have SELinux on, see next section before starting smokeping. Finally restart the smokeping service:</p> <pre><code>sudo systemctl start smokeping\n</code></pre> <p>Remember to update your config with the new locations.</p>"},{"location":"Extensions/Smokeping/#configure-selinux-to-allow-smokeping-to-write-in-librenms-directory-on-centos-rhel","title":"Configure SELinux to allow smokeping to write in LibreNMS directory on Centos / RHEL","text":"<p>If you are using RRDCached with the -B switch and smokeping RRD's inside the LibreNMS RRD base directory, you can install this SELinux profile:</p> <pre><code>cat &gt; smokeping_librenms.te &lt;&lt; EOF\nmodule smokeping_librenms 1.0;\n\nrequire {\ntype httpd_t;\ntype smokeping_t;\ntype smokeping_var_lib_t;\ntype var_run_t;\ntype httpd_sys_rw_content_t;\nclass dir { add_name create getattr read remove_name search write };\nclass file { create getattr ioctl lock open read rename setattr unlink write };\n}\n\n#============= httpd_t ==============\n\nallow httpd_t smokeping_var_lib_t:dir read;\nallow httpd_t var_run_t:file { read write };\n\n#============= smokeping_t ==============\n\nallow smokeping_t httpd_sys_rw_content_t:dir { add_name create getattr remove_name search write };\nallow smokeping_t httpd_sys_rw_content_t:file { create getattr ioctl lock open read rename setattr unlink write };\nEOF\ncheckmodule -M -m -o smokeping_librenms.mod smokeping_librenms.te\nsemodule_package -o smokeping_librenms.pp -m smokeping_librenms.mod\nsemodule -i smokeping_librenms.pp\n</code></pre>"},{"location":"Extensions/Smokeping/#probe-fping-missing-missing-from-the-probes-section","title":"Probe FPing missing missing from the probes section","text":"<p>Take a look at the instructions again - something isn't correct in your configuration.</p>"},{"location":"Extensions/Smokeping/#section-or-variable-already-exists","title":"Section or variable already exists","text":"<p>Most likely, content wasn't fully removed from the <code>*** Probes ***</code> <code>*** Targets***</code> stanza's as instructed. If you're trying to integrate LibreNMS, smokeping and another source of configuration, you're probably trying to redefine a module (e.g. '+ FPing' more than once) or stanza. Otherwise, look again at the instructions.</p>"},{"location":"Extensions/Smokeping/#mandatory-variable-probe-not-defined","title":"Mandatory variable 'probe' not defined","text":"<p>The target block must have a default probe. If you follow the instructions you will have one. If you're trying to integrate LibreNMS, smokeping and another source of configuration, you need to make sure there are no duplicate or missing definitions.</p>"},{"location":"Extensions/Smokeping/#file-usrsbinsendmail-does-not-exist","title":"File '/usr/sbin/sendmail' does not exist`","text":"<p>If you got this error at the end of the installation, simply edit or comment out the sendmail entry in the configuration:</p> <pre><code>-sendmail = /usr/sbin/sendmail\n+#sendmail = /usr/sbin/sendmail\n</code></pre>"},{"location":"Extensions/Sub-Directory/","title":"Sub-directory Support","text":"<p>To run LibreNMS under a subdirectory on your Apache server, the directives for the LibreNMS directory are placed in the base server configuration, or in a virtual host container of your choosing. If using a virtual host, place the directives in the file where the virtual host is configured. If using the base server on RHEL distributions (CentOS, Scientific Linux, etc.) the directives can be placed in <code>/etc/httpd/conf.d/librenms.conf</code>. For Debian distributions (Ubuntu, etc.) place the directives in <code>/etc/apache2/sites-available/default</code>.</p> <pre><code>#These directives can be inside a virtual host or in the base server configuration\nAllowEncodedSlashes On\nAlias /librenms /opt/librenms/html\n\n&lt;Directory \"/opt/librenms/html\"&gt;\n    AllowOverride All\n    Options FollowSymLinks MultiViews\n&lt;/Directory&gt;\n</code></pre> <p>The <code>RewriteBase</code> directive in <code>html/.htaccess</code> must be rewritten to reference the subdirectory name. Assuming LibreNMS is running at http://example.com/librenms/, you will need to change <code>RewriteBase /</code> to <code>RewriteBase /librenms</code>.</p> <p>Finally, set <code>APP_URL=/librenms/</code> in .env and <code>lnms config:set base_url '/librenms/'</code>.</p>"},{"location":"Extensions/Supermicro/","title":"Supermicro","text":"<p>For some Supermicro information to show up in LibreNMS, you will need to install an agent.</p>"},{"location":"Extensions/Supermicro/#supermicro-superdoctor","title":"Supermicro SuperDoctor","text":"<p>Install Supermicro SuperDoctor onto the device you want to monitor.</p> <p>Then add the following to /etc/snmp/snmpd.conf:</p> <pre><code>pass .1.3.6.1.4.1.10876 /usr/bin/sudo /opt/Supermicro/SuperDoctor5/libs/native/snmpagent\n</code></pre> <p>Restart net-snmp:</p> <pre><code>service snmpd restart\n</code></pre>"},{"location":"Extensions/Syslog/","title":"Syslog support","text":""},{"location":"Extensions/Syslog/#syslog-integration-variants","title":"Syslog integration variants","text":"<p>This section explain different ways to recieve and process syslog with LibreNMS. Except of graylog, all Syslogs variants store their logs in the LibreNMS database. You need to enable the Syslog extension:</p> <p><pre><code>lnms config:set enable_syslog true\n</code></pre> A Syslog integration gives you a centralized view of information within the LibreNMS (device view, traps, event). Further more you can trigger alerts based on syslog messages (see rule collections).</p>"},{"location":"Extensions/Syslog/#traditional-syslog-server","title":"Traditional Syslog server","text":""},{"location":"Extensions/Syslog/#syslog-ng","title":"syslog-ng","text":"Debian / UbuntuCentOS / RedHat <pre><code>apt-get install syslog-ng-core\n</code></pre> <pre><code>yum install syslog-ng\n</code></pre> <p>Once syslog-ng is installed, create the config file  (/etc/syslog-ng/conf.d/librenms.conf) and paste the following:</p> <pre><code>source s_net {\n        tcp(port(514) flags(syslog-protocol));\n        udp(port(514) flags(syslog-protocol));\n};\n\ndestination d_librenms {\n        program(\"/opt/librenms/syslog.php\" template (\"$HOST||$FACILITY||$PRIORITY||$LEVEL||$TAG||$R_YEAR-$R_MONTH-$R_DAY $R_HOUR:$R_MIN:$R_SEC||$MSG||$PROGRAM\\n\") template-escape(yes));\n};\n\nlog {\n        source(s_net);\n        source(s_src);\n        destination(d_librenms);\n};\n</code></pre> <p>Next start syslog-ng:</p> <pre><code>service syslog-ng restart\n</code></pre> <p>If no messages make it to the syslog tab in LibreNMS, chances are you experience an issue with SELinux. If so, create a file mycustom-librenms-rsyslog.te , with the following content:</p> <pre><code>module mycustom-librenms-rsyslog 1.0;\n\nrequire {\n        type syslogd_t;\n        type httpd_sys_rw_content_t;\n        type ping_exec_t;\n        class process execmem;\n        class dir { getattr search write };\n        class file { append getattr execute open read };\n}\n\n#============= syslogd_t ==============\nallow syslogd_t httpd_sys_rw_content_t:dir { getattr search write };\nallow syslogd_t httpd_sys_rw_content_t:file { open read append getattr };\nallow syslogd_t self:process execmem;\nallow syslogd_t ping_exec_t:file execute;\n</code></pre> <p>Then, as root, execute the following commands:</p> <pre><code>checkmodule -M -m -o mycustom-librenms-rsyslog.mod mycustom-librenms-rsyslog.te\nsemodule_package -o mycustom-librenms-rsyslog.pp -m mycustom-librenms-rsyslog.mod\nsemodule -i mycustom-librenms-rsyslog.pp\n</code></pre>"},{"location":"Extensions/Syslog/#rsyslog","title":"rsyslog","text":"<p>If you prefer rsyslog, here are some hints on how to get it working.</p> <p>Add the following to your rsyslog config somewhere (could be at the top of the file in the step below, could be in <code>rsyslog.conf</code> if you are using remote logs for something else on this host)</p> <pre><code># Listen for syslog messages on UDP:514\n$ModLoad imudp\n$UDPServerRun 514\n</code></pre> <p>Create a file called <code>/etc/rsyslog.d/30-librenms.conf</code>and add the following depending on your version of rsyslog.</p> Version 8Version 7Legacy <pre><code># Feed syslog messages to librenms\nmodule(load=\"omprog\")\n\ntemplate(name=\"librenms\"\n        type=\"string\"\n        string= \"%fromhost%||%syslogfacility%||%syslogpriority%||%syslogseverity%||%syslogtag%||%$year%-%$month%-%$day% %timegenerated:8:25%||%msg%||%programname%\\n\")\n        action(type=\"omprog\"\n        binary=\"/opt/librenms/syslog.php\"\n        template=\"librenms\")\n\n&amp; stop\n</code></pre> <pre><code>#Feed syslog messages to librenms\n$ModLoad omprog\n\n$template librenms,\"%fromhost%||%syslogfacility%||%syslogpriority%||%syslogseverity%||%syslogtag%||%$year%-%$month%-%$day% %timegenerated:8:25%||%msg%||%programname%\\n\"\n\n*.* action(type=\"omprog\" binary=\"/opt/librenms/syslog.php\" template=\"librenms\")\n\n&amp; stop\n</code></pre> <pre><code># Feed syslog messages to librenms\n$ModLoad omprog\n$template librenms,\"%FROMHOST%||%syslogfacility-text%||%syslogpriority-text%||%syslogseverity%||%syslogtag%||%$YEAR%-%$MONTH%-%$DAY%    %timegenerated:8:25%||%msg%||%programname%\\n\"\n\n$ActionOMProgBinary /opt/librenms/syslog.php\n*.* :omprog:;librenms\n</code></pre> <p>If your rsyslog server is receiving messages relayed by another syslog server, you may try replacing <code>%fromhost%</code> with <code>%hostname%</code>, since <code>fromhost</code> is the host the message was received from, not the host that generated the message.  The <code>fromhost</code> property is preferred as it avoids problems caused by devices sending incorrect hostnames in syslog messages.</p>"},{"location":"Extensions/Syslog/#local-logstash","title":"Local Logstash","text":"<p>If you prefer logstash, and it is installed on the same server as LibreNMS, here are some hints on how to get it working.</p> <p>First, install the output-exec plugin for logstash:</p> <pre><code>/usr/share/logstash/bin/logstash-plugin install logstash-output-exec\n</code></pre> <p>Next, create a logstash configuration file (ex. /etc/logstash/conf.d/logstash-simple.conf), and add the following:</p> <pre><code>input {\nsyslog {\n    port =&gt; 514\n  }\n}\n\n\noutput {\n        exec {\n        command =&gt; \"echo `echo %{host},,,,%{facility},,,,%{priority},,,,%{severity},,,,%{facility_label},,,,``date --date='%{timestamp}' '+%Y-%m-%d %H:%M:%S'``echo ',,,,%{message}'``echo ,,,,%{program} | sed 's/\\x25\\x7b\\x70\\x72\\x6f\\x67\\x72\\x61\\x6d\\x7d/%{facility_label}/'` | sed 's/,,,,/||/g' | /opt/librenms/syslog.php &amp;\"\n        }\n        elasticsearch {\n        hosts =&gt; [\"10.10.10.10:9200\"]\n        index =&gt; \"syslog-%{+YYYY.MM.dd}\"\n        }\n}\n</code></pre> <p>Replace 10.10.10.10 with your primary elasticsearch server IP, and set the incoming syslog port. Alternatively, if you already have a logstash config file that works except for the LibreNMS export, take only the \"exec\" section from output and add it.</p>"},{"location":"Extensions/Syslog/#remote-logstash-or-any-json-source","title":"Remote Logstash (or any json source)","text":"<p>If you have a large logstash / elastic installation for collecting and filtering syslogs, you can simply pass the relevant logs as json to the LibreNMS API \"syslog sink\". This variant may be more flexible and secure in transport. It does not require any major changes to existing ELK setup. You can also pass simple json kv messages from any kind of application or script (example below) to this sink. </p> <p>For long term or advanced aggregation searches you might still use Kibana/Grafana/Graylog etc. It is recommended to keep <code>config['syslog_purge']</code> short.</p> <p>A schematic setup can look like this: <pre><code>  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n  \u2502Device\u251c\u2500\u25ba\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510                \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502Logstash Cluster   \u251c\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25ba\u2502ElasticSearch \u251c\u2510\n            \u2502  RabbitMQ         \u2502\u2502               \u2502 Cluster      \u2502\u2502\n \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u25ba\u2502    Filtering etc  \u2502\u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510      \u2514\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2502\n \u2502Device\u2502   \u2514\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2502        \u2502       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518        \u25bc\n                                      ~~~WAN~~~\n                                          \u2502\n                                        \u250c\u2500\u253c\u2500\u2510\n                                        \u2502\u253c\u253c\u253c\u2502 LB / Firewall / etc\n                                        \u2514\u2500\u253c\u2500\u2518\n                                          \u2502\n                                          \u25bc\n                         \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                         \u2502LibreNMS Sink       \u251c\u252c\u2500\u2500\u25ba\u2502LibreNMS Master     \u2502\n                         \u2502/api/v0/syslogsink/ \u2502\u2502   \u2502 MariaDB            \u2502\n                         \u2514\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2502   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                          \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre></p> <p>A minimal Logstash http output configuration can look like this:  <pre><code>output {\n....\n        #feed it to LibreNMS\n        http {\n            http_method =&gt; \"post\"\n            url =&gt; \"https://sink.librenms.org/api/v0/syslogsink/    # replace with your librenms host\n            format =&gt; \"json_batch\"                                  # put multiple syslogs in on HTTP message\n                retry_failed =&gt; false                               # if true, logstash is blocking if the API is unavailable, be careful! \n                headers =&gt; [\"X-Auth-Token\",\"xxxxxxxLibreNMSApiToken]\n\n                # optional if your mapping is not already done before or does not match. \"msg\" and \"host\" is mandatory. \n                # you might also use out the clone {} function to duplicate your log stream and a dedicated log filtering/mapping etc.\n                # mapping =&gt; {\n                # \"host\"=&gt; \"%{host}\"\n                # \"program\" =&gt; \"%{program}\"\n                # \"facility\" =&gt; \"%{facility_label}\"\n                # \"priority\" =&gt; \"%{syslog5424_pri}\"\n                # \"level\" =&gt; \"%{facility_label}\"                \n                # \"tag\" =&gt; \"%{topic}\"\n                # \"msg\" =&gt; \"%{message}\"\n                # \"timestamp\" =&gt; \"%{@timestamp}\"\n                # }\n        }\n}\n</code></pre></p> <p>Sample test data: <pre><code>curl -L -X POST 'https://sink.librenms.org/api/v0/syslogsink/' -H 'X-Auth-Token: xxxxxxxLibreNMSApiToken' --data-raw '[   \n    {\n        \"msg\": \"kernel: minimum Message\",\n        \"host\": \"mydevice.fqdn.com\"\n    },\n    {\n        \"msg\": \"Line protocol on Interface GigabitEthernet1/0/41, changed state to up\",\n        \"facility\": 23,\n        \"priority\": \"189\",\n        \"program\": \"LINEPROTO-5-UPDOWN\",\n        \"host\": \"172.29.10.24\",\n        \"@timestamp\": \"2022-12-01T20:14:28.257Z\",\n        \"severity\": 5,\n        \"level\": \"ERROR\"\n    },\n    {\n        \"msg\": \"kernel: a unknown host\",\n        \"host\": \"unknown.fqdn.com\"\n    }\n]'\n</code></pre> <code>msg</code> and <code>host</code> are the minimum keys. </p>"},{"location":"Extensions/Syslog/#graylog","title":"Graylog","text":"<p>This variant method use a external Graylog installation and its database. Please refer to the dedicated Graylog documentation.</p>"},{"location":"Extensions/Syslog/#client-configuration","title":"Client configuration","text":"<p>Below are sample configurations for a variety of clients. You should understand the config before using it as you may want to make some slight changes. Further configuration hints may be found in the file Graylog.md.</p> <p>Replace librenms.ip with IP or hostname of your LibreNMS install.</p> <p>Replace any variables in  with the relevant information."},{"location":"Extensions/Syslog/#syslog","title":"syslog","text":"<pre><code>*.*     @librenms.ip\n</code></pre>"},{"location":"Extensions/Syslog/#rsyslog_1","title":"rsyslog","text":"<pre><code>*.* @librenms.ip:514\n</code></pre>"},{"location":"Extensions/Syslog/#cisco-asa","title":"Cisco ASA","text":"<pre><code>logging enable\nlogging timestamp\nlogging buffer-size 200000\nlogging buffered debugging\nlogging trap notifications\nlogging host &lt;outside interface name&gt; librenms.ip\n</code></pre>"},{"location":"Extensions/Syslog/#cisco-ios","title":"Cisco IOS","text":"<pre><code>logging trap debugging\nlogging facility local6\nlogging librenms.ip\n</code></pre>"},{"location":"Extensions/Syslog/#cisco-nxos","title":"Cisco NXOS","text":"<pre><code>logging server librenms.ip 5 use-vrf default facility local6\n</code></pre>"},{"location":"Extensions/Syslog/#juniper-junos","title":"Juniper Junos","text":"<pre><code>set system syslog host librenms.ip authorization any\nset system syslog host librenms.ip daemon any\nset system syslog host librenms.ip kernel any\nset system syslog host librenms.ip user any\nset system syslog host librenms.ip change-log any\nset system syslog host librenms.ip source-address &lt;management ip&gt;\nset system syslog host librenms.ip exclude-hostname\nset system syslog time-format\n</code></pre>"},{"location":"Extensions/Syslog/#huawei-vrp","title":"Huawei VRP","text":"<pre><code>info-center loghost librenms.ip\ninfo-center timestamp debugging short-date without-timezone // Optional\ninfo-center timestamp log short-date // Optional\ninfo-center timestamp trap short-date // Optional\n//This is optional config, especially if the device is in public ip and you dont'want to get a lot of messages of ACL\ninfo-center filter-id bymodule-alias VTY ACL_DENY\ninfo-center filter-id bymodule-alias SSH SSH_FAIL\ninfo-center filter-id bymodule-alias SNMP SNMP_FAIL\ninfo-center filter-id bymodule-alias SNMP SNMP_IPLOCK\ninfo-center filter-id bymodule-alias SNMP SNMP_IPUNLOCK\ninfo-center filter-id bymodule-alias HTTP ACL_DENY\n</code></pre>"},{"location":"Extensions/Syslog/#huawei-smartax-gpon-olt","title":"Huawei SmartAX (GPON OLT)","text":"<pre><code>loghost add librenms.ip librenms\nloghost activate name librenms\n</code></pre>"},{"location":"Extensions/Syslog/#allied-telesis-alliedware-plus","title":"Allied Telesis Alliedware Plus","text":"<pre><code>log date-format iso // Required so syslog-ng/LibreNMS can correctly interpret the log message formatting.\nlog host x.x.x.x\nlog host x.x.x.x level &lt;errors&gt; // Required. A log-level must be specified for syslog messages to send.\nlog host x.x.x.x level notices program imish // Useful for seeing all commands executed by users.\nlog host x.x.x.x level notices program imi // Required for Oxidized Syslog hook log message.\nlog host source &lt;eth0&gt;\n</code></pre>"},{"location":"Extensions/Syslog/#hpearuba-procurve","title":"HPE/Aruba Procurve","text":"<pre><code>configure\nlogging severity warning\nlogging facility local6\nlogging librenms.ip control-descr \u201cLibreNMS\u201d\nlogging notify running-config-change\nwrite memory\n</code></pre> <p>If you have permitted udp and tcp 514 through any firewall then that should be all you need. Logs should start appearing and displayed within the LibreNMS web UI.</p>"},{"location":"Extensions/Syslog/#windows","title":"Windows","text":"<p>By Default windows has no native way to send logs to a remote syslog server.</p> <p>Using this how to you can download Datagram-Syslog Agent to send logs to a remote syslog server (LibreNMS).</p>"},{"location":"Extensions/Syslog/#note","title":"Note","text":"<p>Keep in mind you can use any agent or program to send the logs. We are just using this Datagram-Syslog Agent for this example.</p> <p>Link to How to</p> <p>You will need to download and install \"Datagram-Syslog Agent\" for this how to Link to Download</p>"},{"location":"Extensions/Syslog/#external-hooks","title":"External hooks","text":"<p>Trigger external scripts based on specific syslog patterns being matched with syslog hooks. Enable syslog hook support:</p> <pre><code>lnms config:set enable_syslog_hooks true\n</code></pre> <p>The below are some example hooks to call an external script in the event of a configuration change on Cisco ASA, IOS, NX-OS and IOS-XR devices.</p>"},{"location":"Extensions/Syslog/#cisco-asa_1","title":"Cisco ASA","text":"lnmslegacy config.php <pre><code>lnms config:set os.asa.syslog_hook '[{ \"regex\": \"/%ASA-(config-)?5-111005/\", \"script\": \"/opt/librenms/scripts/syslog-notify-oxidized.php\" }]'\n</code></pre> <pre><code>$config['os']['asa']['syslog_hook'][] = Array('regex' =&gt; '/%ASA-(config-)?5-111005/', 'script' =&gt; '/opt/librenms/scripts/syslog-notify-oxidized.php');\n</code></pre>"},{"location":"Extensions/Syslog/#cisco-ios_1","title":"Cisco IOS","text":"lnmslegacy config.php <pre><code>lnms config:set os.ios.syslog_hook '[{\"regex\":\"/%SYS-(SW[0-9]+-)?5-CONFIG_I/\",\"script\":\"/opt/librenms/scripts/syslog-notify-oxidized.php\"}]' \n</code></pre> <pre><code>$config['os']['ios']['syslog_hook'][] = Array('regex' =&gt; '/%SYS-(SW[0-9]+-)?5-CONFIG_I/', 'script' =&gt; '/opt/librenms/scripts/syslog-notify-oxidized.php');\n</code></pre>"},{"location":"Extensions/Syslog/#cisco-nxos_1","title":"Cisco NXOS","text":"lnmslegacy config.php <pre><code>lnms config:set os.nxos.syslog_hook '[{\"regex\":\"/%VSHD-5-VSHD_SYSLOG_CONFIG_I/\",\"script\":\"/opt/librenms/scripts/syslog-notify-oxidized.php\"}]' \n</code></pre> <pre><code>$config['os']['nxos']['syslog_hook'][] = Array('regex' =&gt; '/%VSHD-5-VSHD_SYSLOG_CONFIG_I/', 'script' =&gt; '/opt/librenms/scripts/syslog-notify-oxidized.php');\n</code></pre>"},{"location":"Extensions/Syslog/#cisco-iosxr","title":"Cisco IOSXR","text":"lnmslegacy config.php <pre><code>lnms config:set os.iosxr.syslog_hook '[{\"regex\":\"/%GBL-CONFIG-6-DB_COMMIT/\",\"script\":\"/opt/librenms/scripts/syslog-notify-oxidized.php\"}]'\n</code></pre> <pre><code>$config['os']['iosxr']['syslog_hook'][] = Array('regex' =&gt; '/%GBL-CONFIG-6-DB_COMMIT/', 'script' =&gt; '/opt/librenms/scripts/syslog-notify-oxidized.php');\n</code></pre>"},{"location":"Extensions/Syslog/#juniper-junos_1","title":"Juniper Junos","text":"lnmslegacy config.php <pre><code>lnms config:set os.junos.syslog_hook '[{\"regex\":\"/UI_COMMIT:/\",\"script\":\"/opt/librenms/scripts/syslog-notify-oxidized.php\"}]' \n</code></pre> <pre><code>$config['os']['junos']['syslog_hook'][] = Array('regex' =&gt; '/UI_COMMIT:/', 'script' =&gt; '/opt/librenms/scripts/syslog-notify-oxidized.php');\n</code></pre>"},{"location":"Extensions/Syslog/#juniper-screenos","title":"Juniper ScreenOS","text":"lnmslegacy config.php <pre><code>lnms config:set os.screenos.syslog_hook '[{\"regex\":\"/System configuration saved/\",\"script\":\"/opt/librenms/scripts/syslog-notify-oxidized.php\"}]' \n</code></pre> <pre><code>$config['os']['screenos']['syslog_hook'][] = Array('regex' =&gt; '/System configuration saved/', 'script' =&gt; '/opt/librenms/scripts/syslog-notify-oxidized.php');\n</code></pre>"},{"location":"Extensions/Syslog/#allied-telesis-alliedware-plus_1","title":"Allied Telesis Alliedware Plus","text":"<p>Note: At least software version 5.4.8-2.1 is required. <code>log host x.x.x.x level notices program imi</code> may also be required depending on configuration. This is to ensure the syslog hook log message gets sent to the syslog server.</p> lnmslegacy config.php <pre><code>lnms config:set os.awplus.syslog_hook '[{\"regex\":\"/IMI.+.Startup-config saved on/\",\"script\":\"/opt/librenms/scripts/syslog-notify-oxidized.php\"}]' \n</code></pre> <pre><code>$config['os']['awplus']['syslog_hook'][] = Array('regex' =&gt; '/IMI.+.Startup-config saved on/', 'script' =&gt; '/opt/librenms/scripts/syslog-notify-oxidized.php');\n</code></pre>"},{"location":"Extensions/Syslog/#hpearuba-procurve_1","title":"HPE/Aruba Procurve","text":"lnmslegacy config.php <pre><code>lnms config:set os.procurve.syslog_hook '[{\"regex\":\"/Running Config Change/\",\"script\":\"/opt/librenms/scripts/syslog-notify-oxidized.php\"}]' \n</code></pre> <pre><code>$config['os']['procurve']['syslog_hook'][] = Array('regex' =&gt; '/Running Config Change/', 'script' =&gt; '/opt/librenms/scripts/syslog-notify-oxidized.php');\n</code></pre>"},{"location":"Extensions/Syslog/#configuration-options","title":"Configuration Options","text":""},{"location":"Extensions/Syslog/#syslog-clean-up","title":"Syslog Clean Up","text":"<p>Default can be set:</p> lnmslegacy config.php <pre><code>lnms config:set syslog_purge 30\n</code></pre> <pre><code>$config['syslog_purge'] = 30;\n</code></pre> <p>The cleanup is run by daily.sh and any entries over X days old are automatically purged. Values are in days. See here for more Clean Up Options Link</p>"},{"location":"Extensions/Syslog/#matching-syslogs-to-hosts-with-different-names","title":"Matching syslogs to hosts with different names","text":"<p>In some cases, you may get logs that aren't being associated with the device in LibreNMS. For example, in LibreNMS the device is known as \"ne-core-01\", and that's how DNS resolves. However, the received syslogs are for \"loopback.core-nw\".</p> <p>To fix this issue, you can configure LibreNMS to translate the incoming syslog hostname into another hostname, so that the logs get associated with the correct device.</p> <p>Example:</p> lnmslegacy config.php <pre><code>lnms config:set syslog_xlate \\\n'{\n    \"loopback0.core7k1.noc.net\": \"n7k1-core7k1\",\n    \"loopback0.core7k2.noc.net\": \"n7k2-core7k2\"\n}'\n</code></pre> <pre><code>$config['syslog_xlate'] = array(\n        'loopback0.core7k1.noc.net' =&gt; 'n7k1-core7k1',\n        'loopback0.core7k2.noc.net' =&gt; 'n7k2-core7k2'\n);\n</code></pre>"},{"location":"Extensions/Two-Factor-Auth/","title":"Two-Factor Authentication","text":"<p>Over the last couple of years, the primary attack vector for internet accounts has been static passwords. Therefore static passwords are no longer sufficient to protect unauthorized access to accounts. Two Factor Authentication adds a variable part in authentication procedures. A user is now required to supply a changing 6-digit passcode in addition to their password to obtain access to the account.</p> <p>LibreNMS has a RFC4226 conformant implementation of both Time and Counter based One-Time-Passwords. It also allows the administrator to configure a throttle time to enforce after 3 failures exceeded. Unlike RFC4226 suggestions, this throttle time will not stack on the amount of failures.</p>"},{"location":"Extensions/Two-Factor-Auth/#types","title":"Types","text":"<p>In general, these two types do not differ in algorithmic terms. The types only differ in the variable being used to derive the passcodes from. The underlying HMAC-SHA1 remains the same for both types, security advantages or disadvantages of each are discussed further down.</p>"},{"location":"Extensions/Two-Factor-Auth/#timebased-one-time-password-totp","title":"Timebased One-Time-Password (TOTP)","text":"<p>Like the name suggests, this type uses the current Time or a subset of it to generate the passcodes. These passcodes solely rely on the secrecy of their Secretkey in order to provide passcodes. An attacker only needs to guess that Secretkey and the other variable part is any given time, presumably the time upon login. RFC4226 suggests a resynchronization attempt in case the passcode mismatches, providing the attacker a range of up to +/- 3 Minutes to create passcodes.</p>"},{"location":"Extensions/Two-Factor-Auth/#counterbased-one-time-password-hotp","title":"Counterbased One-Time-Password (HOTP)","text":"<p>This type uses an internal counter that needs to be in sync with the server's counter to successfully authenticate the passcodes. The main advantage over timebased OTP is the attacker doesn't only need to know the Secretkey but also the server's Counter in order to create valid passcodes. RFC4226 suggests a resynchronization attempt in case the passcode mismatches, providing the attacker a range of up to +4 increments from the actual counter to create passcodes.</p>"},{"location":"Extensions/Two-Factor-Auth/#configuration","title":"Configuration","text":""},{"location":"Extensions/Two-Factor-Auth/#webui","title":"WebUI","text":"<p>Enable 'Two-Factor' Via Global Settings in the Web UI under Authentication -&gt; General Authentication Settings.</p> <p>Optionally enter a throttle timer in seconds. This will unlock an account  after this time once it has failed 3 attempt to authenticate. Set to 0 (default)  to disable this feature, meaning accounts will remain locked after 3 attempts  and will need an administrator to clear.</p>"},{"location":"Extensions/Two-Factor-Auth/#cli","title":"CLI","text":"<p>Enable Two-Factor:</p> <p><code>./lnms config:set twofactor true</code></p> <p>Set throttle-time (in seconds):</p> <p><code>./lnms config:set twofactor_lock 300</code></p>"},{"location":"Extensions/Two-Factor-Auth/#user-administation","title":"User Administation","text":"<p>If Two-Factor is enabled, the Settings -&gt; Manage Users grid will show a '2FA' column  containing a green tick for users with active 2FA.</p> <p>There is no functionality to mandate 2FA for users.</p> <p>If a user has failed 3 attempts, their account can be unlocked or 2FA disabled by  editing the user from the Manage Users table.</p> <p>If a throttle timer is set, it will unlock accounts after this time. If set to the  default of 0, accounts will need to be manually unlocked by an administrator after 3  failed attempts.</p> <p>Locked accounts will report to the user stating to wait for the throttle time period, or to contact the administrator if no timer set.</p>"},{"location":"Extensions/Two-Factor-Auth/#end-user-enrolment","title":"End-User Enrolment","text":"<p>These steps imply that Two-Factor has been enabled system wide as above under Configuration.</p> <p>2FA is enabled by each user once they are logged in normally:</p> <ul> <li>Go to 'My Settings' (/preferences/)</li> <li>Choose TwoFactor type</li> <li>Click on 'Generate TwoFactor Secret Key'</li> <li>If your browser didn't reload, reload manually</li> <li>Scan provided QR or click on 'Manual' to see the Key</li> </ul>"},{"location":"Extensions/Two-Factor-Auth/#google-authenticator","title":"Google Authenticator","text":"<p>Installation guides for Google Authenticator can be found here.</p> <p>Usage:</p> <ul> <li>Create a key as described above</li> <li>Scan provided QR or click on 'Manual' and enter the Secret</li> <li>On next login, enter the passcode that the App provides</li> </ul>"},{"location":"Extensions/Two-Factor-Auth/#lastpass-authenticator","title":"LastPass Authenticator","text":"<p>LastPass Authenticator is confirmed to work with Timebased One-Time Passwords (TOTP).</p> <p>Installation guide for LastPass Authenticator can be found here.</p> <p>Usage:</p> <ul> <li>Create a Timerbased key as described above</li> <li>Click Add (+) and scan provided QR or click on 'NO QR CODE?' and enter naming details and the Secret</li> <li>On next login, enter the passcode that the App provides</li> </ul>"},{"location":"Extensions/Varnish/","title":"Varnish Installation Guide","text":"<p>This document explains how to install Varnish Reverse Proxy for LibreNMS.</p> <p>Varnish is caching software that sits logically between an HTTP client and an HTTP server. Varnish caches HTTP responses from the HTTP server. If an HTTP request can not be responded to by the Varnish cache it directs the request to the HTTP Server. This type of HTTP caching is called a reverse proxy server. Caching your HTTP server can decrease page load times significantly.</p>"},{"location":"Extensions/Varnish/#architecture","title":"Architecture","text":"<p>Simplified block diagram of an Apache HTTP server with Varnish 4.0 Reverse Proxy</p> <p></p>"},{"location":"Extensions/Varnish/#centos-7-varnish-installation","title":"CentOS 7 Varnish Installation","text":"<p>In this example we will assume your Apache 2.4.X HTTP server is working and configured to process HTTP requests on port 80.  If not, please see Installing LibreNMS</p>"},{"location":"Extensions/Varnish/#install-varnish-40-rpm","title":"Install Varnish 4.0 RPM","text":"<ul> <li>Enable the Varnish CentOS 7 repo and install</li> </ul> <pre><code>rpm --nosignature -i https://repo.varnish-cache.org/redhat/varnish-4.0.el7.rpm\nyum install varnish\n</code></pre> <p>By default Varnish listens for HTTP requests on port 6081.</p> <ul> <li>Temporarily add a firewalld rule for testing Varnish.</li> </ul> <pre><code>firewall-cmd --zone=public --add-port=6081/tcp\n</code></pre>"},{"location":"Extensions/Varnish/#test-varnish","title":"Test Varnish","text":"<ul> <li>Start Varnish</li> </ul> <pre><code>systemctl start varnish\n</code></pre> <p>Using a web browser navigate to :6081 or 127.0.0.1:6081. You should see a Varnish error message, this shows that Varnish is working. Example error message: <pre><code>Error 503 Backend fetch failed\n\nBackend fetch failed\n\nGuru Meditation:\n\nXID: 3\n\nVarnish cache server\n</code></pre>"},{"location":"Extensions/Varnish/#edit-varnish-parameters","title":"Edit Varnish Parameters","text":"<p>Now we need to configure Varnish to listen to HTTP requests on port 80 and relay those requests to the Apache HTTP server on port 8080 (see block diagram).</p> <ul> <li>Stop Varnish.</li> </ul> <pre><code>systemctl stop varnish\n</code></pre> <ul> <li>Create a back-up of varnish.params just in case you make a mistake.</li> </ul> <pre><code>cp /etc/varnish/varnish.params /etc/varnish/varnish.params.bak\n</code></pre> <ul> <li>Edit the varnish.params config.</li> </ul> <pre><code>vim /etc/varnish/varnish.params\n</code></pre> <p>Set the VCL location, IP address, port, and cache location and size. <code>malloc</code> sets the cache location to RAM, and <code>512M</code> sets the cache size to 512MB.</p> <pre><code>VARNISH_LISTEN_ADDRESS=192.168.1.10\nVARNISH_LISTEN_PORT=80\nVARNISH_VCL_CONF=/etc/varnish/librenms.vcl\nVARNISH_STORAGE=\"malloc,512M\"\n</code></pre> <p>Example varnish.params:</p> <pre><code># Set this to 1 to make systemd reload try to switch vcl without restart.\nRELOAD_VCL=1\n\n# Main configuration file. You probably want to change it.\nVARNISH_VCL_CONF=/etc/varnish/librenms.vcl\n\n# Default address and port to bind to. Blank address means all IPv4\n# and IPv6 interfaces, otherwise specify a host name, an IPv4 dotted\n# quad, or an IPv6 address in brackets.\nVARNISH_LISTEN_ADDRESS=192.168.1.10\nVARNISH_LISTEN_PORT=80\n\n# Admin interface listen address and port\nVARNISH_ADMIN_LISTEN_ADDRESS=127.0.0.1\nVARNISH_ADMIN_LISTEN_PORT=6082\n\n# Shared secret file for admin interface\nVARNISH_SECRET_FILE=/etc/varnish/secret\n\n# Backend storage specification, see Storage Types in the varnishd(5)\n# man page for details.\nVARNISH_STORAGE=\"malloc,512M\"\n\n# Default TTL used when the backend does not specify one\nVARNISH_TTL=120\n\n# User and group for the varnishd worker processes\nVARNISH_USER=varnish\nVARNISH_GROUP=varnish\n\n# Other options, see the man page varnishd(1)\nDAEMON_OPTS=\"-p thread_pool_min=5 -p thread_pool_max=500 -p thread_pool_timeout=300\"\n</code></pre>"},{"location":"Extensions/Varnish/#configure-apache-for-varnish","title":"Configure Apache for Varnish","text":"<p>Edit librenms.conf and modify the Apache Virtual Host listening port.</p> <ul> <li>Modify: <code>&lt;VirtualHost *:80&gt;</code> to <code>&lt;VirtualHost *:8080&gt;</code></li> </ul> <pre><code>vim /etc/httpd/conf.d/librenms.conf\n</code></pre> <p>Varnish can not share a port with Apache. Change the Apache listening port to 8080.</p> <ul> <li>Modify: <code>Listen 80</code> to <code>Listen 8080</code></li> </ul> <pre><code>vim /etc/httpd/conf/httpd.conf\n</code></pre> <ul> <li>Create the librenms.vcl</li> </ul> <pre><code>cd /etc/varnish\ntouch librenms.vcl\n</code></pre> <ul> <li>Set ownership and permissions for Varnish files.</li> </ul> <pre><code>chown varnish:varnish default.vcl varnish.params secret\nchmod 644 default.vcl varnish.params secret\n</code></pre> <p>Edit the librenms.vcl.</p> <pre><code>vim librenms.vcl\n</code></pre> <p>Paste example VCL config, read config comments for more information.</p> <pre><code>#\n# This is an example VCL file for Varnish.\n#\n# It does not do anything by default, delegating control to the\n# builtin VCL. The builtin VCL is called when there is no explicit\n# return statement.\n#\n# See the VCL chapters in the Users Guide at https://www.varnish-cache.org/docs/\n# and http://varnish-cache.org/trac/wiki/VCLExamples for more examples.\n\n# Marker to tell the VCL compiler that this VCL has been adapted to the\n# new 4.0 format.\nvcl 4.0;\n\n# Default backend definition. Set this to point to your Apache server.\nbackend librenms {\n    .host = \"127.0.0.1\";\n    .port = \"8080\";\n}\n\n# In this example our objective is to cache static content with Varnish and temporarily\n# cache dynamic content in the client web browser.\n\nsub vcl_recv {\n    # HTTP requests from client web browser.\n    # Here we remove any cookie HTTP requests for the 'librenms.domain.net' host\n    # containing the matching file extensions. We don't have to match by host if you\n    # only have LibreNMS running on Apache.\n    # If the cookies are not removed from the HTTP request then Varnish will not cache\n    # the files. 'else' function is set to 'pass', or don't cache anything that doesn't\n    # match.\n\n    if (req.http.host ~ \"^librenms.domain.net\") {\n        set req.backend_hint = librenms;\n        if (req.url ~ \"\\.(png|gif|jpg|jpeg|ico|pdf|js|css|svg|eot|otf|woff|woff2|ttf)$\") {\n            unset req.http.Cookie;\n        }\n\n        else{\n            return(pass);\n        }\n    }\n}\n\nsub vcl_backend_response {\n    # 'sub vcl_backend_response' is the same function as 'sub vcl_fetch' in Varnish 3, however,\n    # the syntax is slightly different\n    # This function happens after we read the response headers from the backend (Apache).\n    # First function 'if (bereq.url ~ \"\\' removes cookies from the Apache HTTP responses\n    # that match the file extensions that are between the quotes, and cache the files for 24 hours.\n    # This assumes you update LibreNMS once a day, otherwise restart Varnish to clear cache.\n    # Second function 'if (bereq.url ~ \"^/' removes the Pragma no-cache statements and sets the age\n    # of how long the client browser will cache the matching urls.\n    # LibreNMS graphs are updated every 300 seconds, 'max-age=300' is set to match this behavior.\n    # We could cache these URLs in Varnish but it would add to the complexity of the config.\n\n    if (bereq.http.host ~ \"^librenms.domain.net\") {\n        if (bereq.url ~ \"\\.(png|gif|jpg|jpeg|ico|pdf|js|css|svg|eot|otf|woff|woff2|ttf)$\") {\n            unset beresp.http.Set-cookie;\n            set beresp.ttl = 24h;\n        }\n\n        if (bereq.url ~ \"^/graph.php\" || \"^/device/\" || \"^/iftype/\" || \"^/customers/\" || \"^/health/\" || \"^/apps/\" || \"^/(plugin)$\" || \"^/(alert)$\" || \"^/eventlog/\" || \"^/graphs/\" || \"^/ports/\" ) {\n            unset beresp.http.Pragma;\n            set beresp.http.Cache-Control = \"max-age=300\";\n        }\n    }\n}\n\nsub vcl_deliver {\n    # Happens when we have all the pieces we need, and are about to send the\n    # response to the client.\n    # You can do accounting or modifying the final object here.\n\n    return (deliver);\n}\n</code></pre> <ul> <li>Reload rules to remove the temporary port rule we added earlier.</li> </ul> <pre><code>firewall-cmd --reload\n</code></pre> <p>Varnish caching does not take effect immediately.  You will need to browse the LibreNMS website to build up the cache.</p> <p>Use the command <code>varnishstat</code> to monitor Varnish caching.  Over time you should see 'MAIN.cache_hit' and 'MAIN.client_req' increase.  With the above VCL the hit to request ratio is approximately 84%.</p> <ul> <li> <p>Session based VCL (coming soon)</p> </li> <li> <p>Testing and debugging VCL (coming soon)</p> </li> </ul>"},{"location":"Extensions/VisJS-Config/","title":"Vis JS Configuration","text":"<p>The Network Maps and Dependency Maps have configuration options for the vis.js library, which affects the way the maps are rendered as well as the way that users can interact with the maps. This configuration can be adjusted by following the instructions below.</p> <p>This link will show you all the options and explain what they do.</p> <p>The commands to run to use the defaults is as follows:</p> <pre><code>lnms config:set network_map_vis_options '{\n  layout:{\n      randomSeed:2\n  },\n  \"edges\": {\n    arrows: {\n          to: {enabled: true, scaleFactor:0.5},\n    },\n    \"smooth\": {\n        enabled: false\n    },\n    font: {\n        size: 14,\n        color: \"red\",\n        face: \"sans\",\n        background: \"white\",\n        strokeWidth:3,\n        align: \"middle\",\n        strokeWidth: 2\n    }\n  },\n  \"physics\": {\n     \"barnesHut\": {\n      \"gravitationalConstant\": -2000,\n      \"centralGravity\": 0.3,\n      \"springLength\": 200,\n      \"springConstant\": 0.04,\n      \"damping\": 0.09,\n      \"avoidOverlap\": 1\n    },\n     \"forceAtlas2Based\": {\n      \"gravitationalConstant\": -50,\n      \"centralGravity\": 0.01,\n      \"springLength\": 200,\n      \"springConstant\": 0.08,\n      \"damping\": 0.4,\n      \"avoidOverlap\": 1\n    },\n     \"repulsion\": {\n      \"centralGravity\": 0.2,\n      \"springLength\": 250,\n      \"springConstant\": 0.2,\n      \"nodeDistance\": 200,\n      \"damping\": 0.07\n    },\n     \"hierarchicalRepulsion\": {\n      \"nodeDistance\": 300,\n      \"centralGravity\": 0.2,\n      \"springLength\": 300,\n      \"springConstant\": 0.2,\n      \"damping\": 0.07\n    },\n  \"maxVelocity\": 50,\n  \"minVelocity\": 0.4,\n  \"solver\": \"hierarchicalRepulsion\",\n  \"stabilization\": {\n    \"enabled\": true,\n    \"iterations\": 1000,\n    \"updateInterval\": 100,\n    \"onlyDynamicEdges\": false,\n    \"fit\": true\n  },\n  \"timestep\": 0.4,\n }\n}'\n</code></pre> <p>An example to override the device dependency map to use a hierarchical layout is below. Note that you can choose to enter the JSON config on one line if you want.</p> <pre><code>lnms config:set network_map_devicedependency_vis_options '{ layout:{ hierarchical: { enabled: true, direction: \"LR\", sortMethod: \"directed\", nodeSpacing: 50, treeSpacing: 50, levelSeparation: 300 } }, \"edges\": { arrows: { to: { enabled: true, scaleFactor:0.5 }, }, \"smooth\": { enabled: false }, font: { size: 14, color: \"red\", face: \"sans\", background: \"white\", strokeWidth:3, align: \"middle\", strokeWidth: 2 } }, \"physics\": {\"enabled\": false } }'\n</code></pre>"},{"location":"Extensions/VisJS-Config/#configurator-output","title":"Configurator Output","text":"<p>You may also access the dynamic configuration interface example here from within LibreNMS by adding the following to config.php</p> <p>Once you've achieved your desired map appearance, click the generate options button at the bottom to be given the necessary parameters to set in the lnms command. Note that the configurator will output the config with <code>const options</code> you will need to strip this out.</p> <pre><code>lnms config:set network_map_vis_options '{\n  \"nodes\": {\n    \"color\": {\n      \"background\": \"rgba(20,252,18,1)\"\n    },\n    \"font\": {\n      \"face\": \"tahoma\"\n    },\n    \"physics\": false\n  },\n  \"edges\": {\n    \"smooth\": {\n      \"forceDirection\": \"none\"\n    }\n  },\n  \"interaction\": {\n    \"hover\": true,\n    \"multiselect\": true,\n    \"navigationButtons\": true\n  },\n  \"manipulation\": {\n    \"enabled\": true\n  },\n  \"physics\": {\n    \"barnesHut\": {\n      \"avoidOverlap\": 0.11\n    },\n    \"minVelocity\": 0.75\n  }\n}'\n</code></pre> <p></p>"},{"location":"Extensions/Weathermap/","title":"Network-WeatherMap with LibreNMS","text":"<p>Network Weathermap does not work on any supported versions of PHP and access to the pages is not restricted by default (open to the world).</p> <p>It is not recommended to use Network Weathermap, use Custom Maps instead.</p>"},{"location":"Extensions/World-Map/","title":"World Map Configuration","text":"<p>LibreNMS comes with a configurable Geo Map based on World Map Widget to visualize where your equipment is located geographically.</p>"},{"location":"Extensions/World-Map/#world-map-widget","title":"World Map Widget","text":"<p>World Map Widget, requires you to have properly formatted addresses in sysLocation or sysLocation override. As part of the standard poller these addresses will be Geocoded by Google and stored in the database.</p> <p>Location resolution happens as follows</p> <ol> <li>If <code>device['location']</code> contains <code>[lat, lng]</code> (note the square    brackets), that is used</li> <li>If there is a location overide for the device in the WebUI and it    contains <code>[lat, lng]</code> (note the square brackets), that is used.</li> <li>Attempt to resolve lat, lng using <code>lnms config:set geoloc.engine</code></li> <li>Properly formatted addresses in sysLocation or sysLocation    override, under device settings.</li> </ol> <p>Example:</p> <pre><code>[40.424521, -86.912755]\n</code></pre> <p>or</p> <p><pre><code>1100 Congress Ave, Austin, TX 78701 (3rd floor cabinet)\n</code></pre> Information inside parentheses is ignored during GEO lookup</p> <p>We have two current mapping engines available:</p> <ul> <li>Leaflet (default)</li> <li>Jquery-Mapael</li> </ul>"},{"location":"Extensions/World-Map/#world-map-widget-settings","title":"World Map Widget Settings","text":"<ul> <li>Initial Latitude / Longitude: The map will be centered on those   coordinates.</li> <li>Initial Zoom: Initial zoom of the map. More information about   zoom levels.</li> <li>Grouping radius: Markers are grouped by area. This value define   the maximum size of grouping areas.</li> <li>Show devices: Show devices based on status.</li> </ul> <p>Example Settings:</p> <p></p>"},{"location":"Extensions/World-Map/#device-overview-world-map-settings","title":"Device Overview World Map Settings","text":"<p>If a device has a location with a valid latitude and logitude, the device overview page will have a panel showing the device on a world map.  The following settings affect this map:</p> <pre><code># Does the world map start opened, or does the user need to clivk to view\nlnms config:set device_location_map_open false\n# Do we show all other devices on the map as well\nlnms config:set device_location_map_show_devices false\n# Do we show a network map based on device dependencies\nlnms config:set device_location_map_show_device_dependencies false\n</code></pre>"},{"location":"Extensions/World-Map/#offline-openstreet-map","title":"Offline OpenStreet Map","text":"<p>If you can't access OpenStreet map directly you can run a local tile server. To specify a different url you can set:</p> <pre><code>lnms config:set leaflet.tile_url 'localhost.com'\n</code></pre>"},{"location":"Extensions/World-Map/#additional-leaflet-config","title":"Additional Leaflet config","text":"<pre><code>lnms config:set map.engine leaflet\nlnms config:set leaflet.default_lat \"51.981074\"\nlnms config:set leaflet.default_lng \"5.350342\"\nlnms config:set leaflet.default_zoom 8\n# Device grouping radius in KM default 80KM\nlnms config:set leaflet.group_radius 1\n# Enable network map on world map\nlnms config:set network_map_show_on_worldmap true\n# Use CDP/LLDP for network map, or device dependencies\nlnms config:set network_map_worldmap_link_type xdp/depends\n# Do not show devices that have notifications disabled\nlnms config:set network_map_worldmap_show_disabled_alerts false\n</code></pre> <p>Note</p> <p>If entering negative coordinates, use this format: <pre><code>lnms config:set leaflet.default_lng -- -5.350342\n</code></pre></p>"},{"location":"Extensions/World-Map/#geocode-engine-config","title":"Geocode engine config","text":"<p>external/location</p> <pre><code>lnms config:set geoloc.engine google\nlnms config:set geoloc.api_key 'abcdefghijklmnopqrstuvwxyz'\n</code></pre> <p>Google: Pros: fast, accurate Cons: requires a credit card even for a free account</p> <p>MapQuest: Pros: free, no credit card required Cons: inaccurate: most addresses are returned as locations at the center of the US</p> <p>Bing: Pros: free, no credit card required, accurate Cons: Microsoft (debatable)</p>"},{"location":"Extensions/World-Map/#jquery-mapael-config","title":"Jquery-Mapael config","text":"<p>Further custom options are available to load different maps of the world, set default coordinates of where the map will zoom and the zoom level by default. An example of this is:</p> <pre><code>lnms config:set map.engine jquery-mapael\nlnms config:set mapael.default_map 'mapael-maps/united_kingdom/united_kingdom.js'\nlnms config:set mapael.map_width 400\nlnms config:set mapael.default_lat '50.898482'\nlnms config:set mapael.default_lng '-3.401402'\nlnms config:set mapael.default_zoom 20\n</code></pre> <p>A list of maps can be found in <code>html/js/maps/</code> or <code>html/js/mapael-maps/</code>.</p>"},{"location":"Extensions/Applications/Apache/","title":"Apache","text":"<p>Either use SNMP extend or use the agent.</p> <p>Note</p> <p>That you need to install and configure the Apache mod_status  module before trying the script.</p> SNMP ExtendAgent <ol> <li>Download the script onto the desired host (the host must be added to LibreNMS devices)</li> </ol> <pre><code>wget https://raw.githubusercontent.com/librenms/librenms-agent/master/snmp/apache-stats.py -O /etc/snmp/apache-stats.py\n</code></pre> <ol> <li>Make the script executable</li> </ol> <pre><code>chmod +x /etc/snmp/apache-stats.py\n</code></pre> <ol> <li>Create the cache directory, '/var/cache/librenms/' and make sure that it is owned by the user running the SNMP daemon.</li> </ol> <pre><code>mkdir -p /var/cache/librenms/\n</code></pre> <ol> <li>Verify it is working by running /etc/snmp/apache-stats.py Package <code>urllib3</code> for python3 needs to be installed. In Debian-based systems for example you can achieve this by issuing:</li> </ol> <pre><code>apt-get install python3-urllib3\n</code></pre> <ol> <li>Edit your snmpd.conf file (usually /etc/snmp/snmpd.conf) and add:</li> </ol> <pre><code>extend apache /etc/snmp/apache-stats.py\n</code></pre> <ol> <li>Restart snmpd on your host</li> </ol> <pre><code>sudo systemctl snmpd restart\n</code></pre> <ol> <li>Test by running</li> </ol> <pre><code>snmpwalk &lt;various options depending on your setup&gt; localhost NET-SNMP-EXTEND-MIB::nsExtendOutput2Table\n</code></pre>"},{"location":"Extensions/Applications/Apache/#install-prerequisites","title":"Install prerequisites","text":"Debian/Ubuntu <pre><code>apt-get install libwww-perl\n</code></pre>"},{"location":"Extensions/Applications/Apache/#install-agent","title":"install agent","text":"<p>Install the agent) on this device if it isn't already and copy the <code>apache</code> script to <code>/usr/lib/check_mk_agent/local/</code></p> <ol> <li> <p>Verify it is working by running <code>/usr/lib/check_mk_agent/local/apache</code></p> </li> <li> <p>Create the cache directory, '/var/cache/librenms/' and make sure that it is owned by the user running the SNMP daemon.</p> <pre><code>mkdir -p /var/cache/librenms/\n</code></pre> </li> <li> <p>On the device page in Librenms, edit your host and check the <code>Apache</code> under the Applications tab.</p> </li> </ol>"},{"location":"Extensions/Applications/Asterisk/","title":"Asterisk","text":"<p>A small shell script that reports various Asterisk call status.</p>"},{"location":"Extensions/Applications/Asterisk/#snmp-extend","title":"SNMP Extend","text":"<ol> <li>Download the asterisk script to <code>/etc/snmp/</code> on your asterisk server.</li> </ol> <pre><code>wget https://raw.githubusercontent.com/librenms/librenms-agent/master/snmp/asterisk -O /etc/snmp/asterisk\n</code></pre> <ol> <li>Make the script executable</li> </ol> <pre><code>chmod +x /etc/snmp/asterisk\n</code></pre> <ol> <li> <p>Configure <code>ASCLI</code> in the script.</p> </li> <li> <p>Verify it is working by running <code>/etc/snmp/asterisk</code></p> </li> <li> <p>Edit your snmpd.conf file (usually <code>/etc/snmp/snmpd.conf</code>) and add:</p> </li> </ol> <pre><code>extend asterisk /etc/snmp/asterisk\n</code></pre> <ol> <li>Restart snmpd on your host</li> </ol> <p>The application should be auto-discovered as described at the top of the page. If it is not, please follow the steps set out under <code>SNMP Extend</code> heading top of page.</p>"},{"location":"Extensions/Applications/BIND9%20aka%20named/","title":"BIND9 aka named","text":""},{"location":"Extensions/Applications/BIND9%20aka%20named/#1-configure-cache-file","title":"1. Configure Cache file","text":"<p>Create stats file with appropriate permissions:</p> <p><pre><code>touch /var/cache/bind/stats\nchown bind:bind /var/cache/bind/stats\n</code></pre> Change <code>user:group</code> to the user and group that's running bind/named.</p>"},{"location":"Extensions/Applications/BIND9%20aka%20named/#2-bindnamed-configuration","title":"2. Bind/named configuration:","text":"<pre><code>options {\n    ...\n    statistics-file \"/var/cache/bind/stats\";\n    zone-statistics yes;\n    ...\n};\n</code></pre>"},{"location":"Extensions/Applications/BIND9%20aka%20named/#3-restart-your-bind9named-after-changing-the-configuration","title":"3. Restart your bind9/named after changing the configuration.","text":"<pre><code>sudo systemctl restart bind\n</code></pre>"},{"location":"Extensions/Applications/BIND9%20aka%20named/#4-verify-that-everything-works","title":"4. Verify that everything works","text":"<p>You can verify by executing <code>rndc stats &amp;&amp; cat /var/cache/bind/stats</code>.</p> <p>Failure</p> <p>In case you get a <code>Permission Denied</code> error, make sure you changed the ownership correctly.</p> <p>Note</p> <p>Also be aware that this file is appended to each time <code>rndc stats</code> is called. Given this it is suggested you setup file rotation for it. Alternatively you can also set zero_stats to 1 in the config.</p>"},{"location":"Extensions/Applications/BIND9%20aka%20named/#6-install-prerequisites","title":"6. Install Prerequisites","text":"<p>The script for this also requires the Perl module <code>File::ReadBackwards</code>.</p> FreeBSDCentOS/RedHatDebian/Ubuntu <pre><code>pkg install p5-File-ReadBackwards\n</code></pre> <pre><code>yum install perl-File-ReadBackwards\n</code></pre> <pre><code>sudo apt-get install libfile-readbackwards-perl\n</code></pre> <p>If it is not available, it can be installed by <code>cpan -i File::ReadBackwards</code>.</p>"},{"location":"Extensions/Applications/BIND9%20aka%20named/#7-you-may-possibly-need-to-configure-the-agentextend-script-as-well","title":"7. You may possibly need to configure the agent/extend script as well.","text":"<p>The config file's path defaults to the same path as the script, but with .config appended. So if the script is located at <code>/etc/snmp/bind</code>, the config file will be <code>/etc/snmp/bind.config</code>. Alternatively you can also specify a config via <code>-c $file</code>.</p> <p>Anything starting with a # is comment. The format for variables are $variable=$value. Empty lines are ignored. Spaces and tabs at either the start or end of a line are ignored.</p> <p>Content of an example /etc/snmp/bind.config . Please edit with your own settings.</p> <pre><code>rndc = The path to rndc. Default: /usr/bin/env rndc\ncall_rndc = A 0/1 boolean on whether or not to call rndc stats.\n    Suggest to set to 0 if using netdata. Default: 1\nstats_file = The path to the named stats file. Default: /var/cache/bind/stats\nagent = A 0/1 boolean for if this is being used as a LibreNMS\n    agent or not. Default: 0\nzero_stats = A 0/1 boolean for if the stats file should be zeroed\n    first. Default: 0 (1 if guessed)\n</code></pre> <p>If you want to guess at the configuration, call the script with <code>-g</code> and it will print out what it thinks it should be.</p>"},{"location":"Extensions/Applications/BIND9%20aka%20named/#configure-agent-or-extend","title":"Configure Agent or Extend","text":"SNMP ExtendAgent <ol> <li> <p>Copy the bind shell script, to the desired host.</p> <pre><code>wget https://github.com/librenms/librenms-agent/raw/master/snmp/bind -O /etc/snmp/bind\n</code></pre> </li> <li> <p>Make the script executable</p> <pre><code>chmod +x /etc/snmp/bind\n</code></pre> </li> <li> <p>Edit your snmpd.conf file and add:</p> <pre><code>extend bind /etc/snmp/bind\n</code></pre> </li> <li> <p>Restart snmpd on the host in question.</p> </li> </ol> <p>The application should be auto-discovered as described at the top of the page. If it is not, please follow the steps set out under <code>SNMP Extend</code> heading top of page.</p> <ol> <li> <p>Install the agent) on this device if it isn't</p> </li> <li> <p>Download the script onto the desired host:</p> <pre><code>wget https://raw.githubusercontent.com/librenms/librenms-agent/master/snmp/bind -O /usr/lib/check_mk_agent/local/bind\n</code></pre> </li> <li> <p>Make the script executable</p> <pre><code>chmod +x /usr/lib/check_mk_agent/local/bind\n</code></pre> </li> <li> <p>Set the variable 'agent' to '1' in the config.</p> </li> </ol>"},{"location":"Extensions/Applications/BIRD2/","title":"BIRD2","text":""},{"location":"Extensions/Applications/BIRD2/#bird2","title":"BIRD2","text":"<p>The BIRD Internet Routing Daemon (BGP)</p> <p>Due to the lack of SNMP support in the BIRD daemon, this application extracts all configured BGP protocols and parses it into LibreNMS. This application supports both IPv4 and IPv6 Peer processing.</p>"},{"location":"Extensions/Applications/BIRD2/#snmp-extend","title":"SNMP Extend","text":"<ol> <li>Edit your snmpd.conf file (usually /etc/snmp/snmpd.conf) and add:</li> </ol> <pre><code>extend bird2 '/usr/bin/sudo /usr/sbin/birdc -r show protocols all'\n</code></pre> <ol> <li>Edit your sudo users (usually <code>visudo</code>) and add at the bottom:</li> </ol> <pre><code>Debian-snmp ALL=(ALL) NOPASSWD: /usr/sbin/birdc\n</code></pre> <p>If your snmp daemon is running on a user that isnt <code>Debian-snmp</code> make sure that user has the correct permission to execute <code>birdc</code></p> <ol> <li>Verify the time format for bird2 is defined. Otherwise <code>iso short    ms</code> (hh:mm:ss) is the default value that will be used. Which is not    compatible with the datetime parsing logic used to parse the output    from the bird show command. <code>timeformat protocol</code> is the one    important to be defibned for the bird2 app parsing logic to work.</li> </ol> <p>Example starting point using Bird2 shorthand <code>iso long</code> (YYYY-MM-DD hh:mm:ss):</p> <pre><code>timeformat base iso long;\ntimeformat log iso long;\ntimeformat protocol iso long;\ntimeformat route iso long;\n</code></pre> <p>Timezone can be manually specified, example \"%F %T %z\" (YYYY-MM-DD hh:mm:ss +11:45). See the Bird 2 docs for more information</p> <ol> <li>Restart snmpd on your host</li> </ol> <p>The application should be auto-discovered as described at the top of the page. If it is not, please follow the steps set out under <code>SNMP Extend</code> heading top of page.</p>"},{"location":"Extensions/Applications/Backupninja/","title":"Backupninja","text":""},{"location":"Extensions/Applications/Backupninja/#backupninja","title":"backupninja","text":"<p>A small shell script that reports status of last backupninja backup.</p>"},{"location":"Extensions/Applications/Backupninja/#snmp-extend","title":"SNMP Extend","text":"<ol> <li>Download the backupninja script to <code>/etc/snmp/backupninja.py</code> on your backuped server.</li> </ol> <pre><code>wget https://raw.githubusercontent.com/librenms/librenms-agent/master/snmp/backupninja.py -O /etc/snmp/backupninja.py`\n</code></pre> <ol> <li>Make the script executable:</li> </ol> <pre><code>chmod +x /etc/snmp/backupninja.py\n</code></pre> <ol> <li>Edit your snmpd.conf file (usually <code>/etc/snmp/snmpd.conf</code>) and add:</li> </ol> <pre><code>extend backupninja /etc/snmp/backupninja.py\n</code></pre> <ol> <li>Restart snmpd on your host</li> </ol>"},{"location":"Extensions/Applications/BorgBackup/","title":"BorgBackup","text":""},{"location":"Extensions/Applications/BorgBackup/#borgbackup","title":"BorgBackup","text":""},{"location":"Extensions/Applications/BorgBackup/#snmp-extend","title":"SNMP Extend","text":"<ol> <li>Copy the shell script to the desired host.</li> </ol> <pre><code>wget https://raw.githubusercontent.com/librenms/librenms-agent/master/snmp/borgbackup -O /etc/snmp/borgbackup\n</code></pre> <ol> <li>Make the script executable</li> </ol> <pre><code>chmod +x /etc/snmp/borgbackup\n</code></pre> <ol> <li>Install depends.</li> </ol> FreeBSDDebian/UbuntuGeneric <pre><code>pkg install p5-Config-Tiny p5-JSON p5-File-Slurp p5-MIME-Base64 p5-String-ShellQuote\n</code></pre> <pre><code>apt-get install libconfig-tiny-perl libjson-perl libfile-slurp-perl libmime-base64-perl libstring-shellquote-perl\n</code></pre> <pre><code>cpanm Config::Tiny File::Slurp JSON MIME::Base64 String::ShellQuote\n</code></pre> <ol> <li>Set it up in cron.</li> </ol> <pre><code>*/5 * * * /etc/snmp/borgbackup 2&gt; /dev/null &gt; /dev/null\n</code></pre> <ol> <li> <p>Configure it. See further down below or <code>/etc/snmp/borgbackup --help</code>.</p> </li> <li> <p>Add the following to the SNMPD config.</p> </li> </ol> <pre><code>extend borgbackup /bin/cat /var/cache/borgbackup_extend/extend_return\n</code></pre> <ol> <li>Restart SNMPD and wait for the device to rediscover or tell it to    manually.</li> </ol>"},{"location":"Extensions/Applications/BorgBackup/#config","title":"Config","text":"<p>The config file is a ini file and handled by Config::Tiny.</p> <pre><code>- mode :: single or multi, for if this is a single repo or for\n        multiple repos.\n    - Default :: single\n\n- repo :: Directory for the borg backup repo.\n    - Default :: undef\n\n- passphrase :: Passphrase for the borg backup repo.\n    - Default :: undef\n\n- passcommand :: Passcommand for the borg backup repo.\n    - Default :: undef\n</code></pre> <p>For single repos all those variables are in the root section of the config, so lets the repo is at '/backup/borg' with a passphrase of '1234abc'.</p> <pre><code>repo=/backup/borg\nrepo=1234abc\n</code></pre> <p>For multi, each section outside of the root represents a repo. So if there is '/backup/borg1' with a passphrase of 'foobar' and '/backup/derp' with a passcommand of 'pass show backup' it would be like below.</p> <pre><code>mode=multi\n\n[borg1]\nrepo=/backup/borg1\npassphrase=foobar\n\n[derp]\nrepo=/backup/derp\npasscommand=pass show backup\n</code></pre> <p>If 'passphrase' and 'passcommand' are both specified, then passcommand is used.</p>"},{"location":"Extensions/Applications/BorgBackup/#metrics","title":"Metrics","text":"<p>The metrics are all from <code>.data.totals</code> in the extend return.</p> Value Type Description errored repos Total number of repos that info could not be fetched for. locked repos Total number of locked repos locked_for seconds Longest time any repo has been locked. time_since_last_modified seconds Largest time - mtime for the repo nonce total_chunks chunks Total number of chunks total_csize bytes Total compressed size of all archives in all repos. total_size byes Total uncompressed size of all archives in all repos. total_unique_chunks chunks Total number of unique chuckes in all repos. unique_csize bytes Total deduplicated size of all archives in all repos. unique_size chunks Total number of chunks in all repos."},{"location":"Extensions/Applications/C.H.I.P/","title":"C.H.I.P","text":""},{"location":"Extensions/Applications/C.H.I.P/#chip","title":"C.H.I.P","text":"<p>C.H.I.P. is a $9 R8 based tiny computer ideal for small projects. Further details: https://getchip.com/pages/chip</p> <ol> <li>Copy the shell script to the desired host.</li> </ol> <pre><code>wget https://raw.githubusercontent.com/librenms/librenms-agent/master/snmp/chip.sh -O /etc/snmp/power-stat.sh\n</code></pre> <ol> <li>Make the script executable</li> </ol> <pre><code>chmod +x /etc/snmp/power-stat.sh\n</code></pre> <ol> <li>Edit your snmpd.conf file (usually /etc/snmp/snmpd.conf) and add:</li> </ol> <pre><code>extend power-stat /etc/snmp/power-stat.sh\n</code></pre> <ol> <li>Restart snmpd on your host</li> </ol> <p>The application should be auto-discovered as described at the top of the page. If it is not, please follow the steps set out under <code>SNMP Extend</code> heading top of page.</p>"},{"location":"Extensions/Applications/CAPEv2/","title":"CAPEv2","text":""},{"location":"Extensions/Applications/CAPEv2/#capev2","title":"CAPEv2","text":"<ol> <li>Copy the shell script to the desired host.</li> </ol> <pre><code>wget https://raw.githubusercontent.com/librenms/librenms-agent/master/snmp/cape -O /etc/snmp/cape\n</code></pre> <ol> <li>Make the script executable</li> </ol> <pre><code>chmod +x /etc/snmp/cape\n</code></pre> <ol> <li>Edit your snmpd.conf file (usually /etc/snmp/snmpd.conf) and add:</li> </ol> <pre><code>extend cape /etc/snmp/cape\n</code></pre> <ol> <li>Install the required packages.</li> </ol> Debian/Ubuntu <pre><code>apt-get install libfile-readbackwards-perl libjson-perl libconfig-tiny-perl libdbi-perl libfile-slurp-perl libstatistics-lite-perl\n</code></pre> <ol> <li>Restart snmpd on your host</li> </ol> <p>The application should be auto-discovered as described at the top of the page. If it is not, please follow the steps set out under <code>SNMP Extend</code> heading top of page.</p>"},{"location":"Extensions/Applications/Certificate/","title":"Certificate","text":""},{"location":"Extensions/Applications/Certificate/#certificate","title":"Certificate","text":"<p>A small python3 script that checks age and remaining validity of certificates</p> Debian/Ubuntu <p>This script needs following packages on Debian/Ubuntu Systems:</p> <pre><code>apt-get install python3 python3-openssl\n</code></pre> <p>Content of an example /etc/snmp/certificate.json . Please edit with your own settings.</p> <pre><code>{\"domains\": [\n    {\"fqdn\": \"www.mydomain.com\"},\n    {\"fqdn\": \"some.otherdomain.org\",\n     \"port\": 8443},\n    {\"fqdn\": \"personal.domain.net\"},\n    {\"fqdn\": \"selfsignedcert_host.domain.com\",\n     \"cert_location\": \"/etc/pki/tls/certs/localhost.pem\"}\n]\n}\n</code></pre> <p>a. (Required): Key 'domains' contains a list of domains to check. b. (Optional): You can define a port. By default it checks on port 443. c. (Optional): You may define a certificate location for self-signed certificates.</p>"},{"location":"Extensions/Applications/Certificate/#snmp-extend","title":"SNMP Extend","text":"<ol> <li>Copy the shell script to the desired host.</li> </ol> <pre><code>wget https://raw.githubusercontent.com/librenms/librenms-agent/master/snmp/certificate.py -O /etc/snmp/certificate.py\n</code></pre> <ol> <li>Make the script executable</li> </ol> <pre><code>chmod +x /etc/snmp/certificate.py\n</code></pre> <ol> <li>Edit your snmpd.conf file (usually /etc/snmp/snmpd.conf) and add:</li> </ol> <p><pre><code>extend certificate /etc/snmp/certificate.py\n</code></pre> 4. Restart snmpd on your host</p> <p>The application should be auto-discovered as described at the top of the page. If it is not, please follow the steps set out under <code>SNMP Extend</code> heading top of page.</p>"},{"location":"Extensions/Applications/Chronyd/","title":"Chronyd","text":"<p>A shell script that gets the stats from chronyd and exports them with SNMP Extend.</p>"},{"location":"Extensions/Applications/Chronyd/#snmp-extend","title":"SNMP Extend","text":"<ol> <li> <p>Download the shell script onto the desired host</p> <pre><code>wget https://raw.githubusercontent.com/librenms/librenms-agent/master/snmp/chrony -O /etc/snmp/chrony\n</code></pre> </li> <li> <p>Make the script executable</p> <pre><code>chmod +x /etc/snmp/chrony\n</code></pre> </li> <li> <p>Edit the snmpd.conf file to include the extend by adding the following line to the end of the config file:</p> <pre><code>extend chronyd /etc/snmp/chrony\n</code></pre> <p>Note</p> <p>Some distributions need sudo-permissions for the script to work with SNMP Extend. See the instructions on the section SUDO for more information.</p> </li> <li> <p>Restart snmpd service on the host</p> <p>Application should be auto-discovered and its stats presented on the Apps-page on the host. Note: Applications module needs to be enabled on the host or globally for the statistics to work as intended.</p> </li> </ol>"},{"location":"Extensions/Applications/Docker%20Stats/","title":"Docker Stats","text":""},{"location":"Extensions/Applications/Docker%20Stats/#docker-stats","title":"Docker Stats","text":"<p>It gathers metrics about the docker containers, including: - cpu percentage - memory usage - container size - uptime - Totals per status</p> <p>This script requires python3 and the pip module python-dateutil</p>"},{"location":"Extensions/Applications/Docker%20Stats/#snmp-extend","title":"SNMP Extend","text":"<ol> <li>Install pip module</li> </ol> <pre><code>pip3 install python-dateutil\n</code></pre> <ol> <li>Copy the shell script to the desired host. By default, it will only show the status for containers that are running. To include all containers modify the constant in the script at the top of the file and change it to <code>ONLY_RUNNING_CONTAINERS = False</code></li> </ol> <pre><code>wget https://github.com/librenms/librenms-agent/raw/master/snmp/docker-stats.py -O /etc/snmp/docker-stats.py\n</code></pre> <ol> <li>Make the script executable</li> </ol> <pre><code>chmod +x /etc/snmp/docker-stats.py\n</code></pre> <ol> <li>Edit your snmpd.conf file (usually /etc/snmp/snmpd.conf) and add:</li> </ol> <pre><code>extend docker /etc/snmp/docker-stats.py\n</code></pre> <ol> <li>If your run Debian, you need to add the Debian-snmp user to the docker group</li> </ol> <pre><code>usermod -a -G docker Debian-snmp\n</code></pre> <ol> <li>Restart snmpd on your host</li> </ol> <pre><code>systemctl restart snmpd\n</code></pre>"},{"location":"Extensions/Applications/EXIM%20Stats/","title":"EXIM Stats","text":""},{"location":"Extensions/Applications/EXIM%20Stats/#exim-stats","title":"EXIM Stats","text":"<p>SNMP extend script to get your exim stats data into your host.</p>"},{"location":"Extensions/Applications/EXIM%20Stats/#snmp-extend","title":"SNMP Extend","text":"<ol> <li>Download the script onto the desired host.</li> </ol> <pre><code>wget https://raw.githubusercontent.com/librenms/librenms-agent/master/snmp/exim-stats.sh -O /etc/snmp/exim-stats.sh\n</code></pre> <ol> <li>Make the script executable</li> </ol> <pre><code>chmod +x /etc/snmp/exim-stats.sh\n</code></pre> <ol> <li>Edit your snmpd.conf file (usually <code>/etc/snmp/snmpd.conf</code>) and add:</li> </ol> <pre><code>extend exim-stats /etc/snmp/exim-stats.sh\n</code></pre> <ol> <li>If you are using sudo edit your sudo users (usually <code>visudo</code>) and add at the bottom:</li> </ol> <pre><code>snmp ALL=(ALL) NOPASSWD: /etc/snmp/exim-stats.sh, /usr/bin/exim*\n</code></pre> <ol> <li>Restart snmpd on your host</li> </ol> <p>The application should be auto-discovered as described at the top of the page. If it is not, please follow the steps set out under <code>SNMP Extend</code> heading top of page.</p>"},{"location":"Extensions/Applications/Entropy/","title":"Entropy","text":""},{"location":"Extensions/Applications/Entropy/#entropy","title":"Entropy","text":"<p>A small shell script that checks your system's available random entropy.</p>"},{"location":"Extensions/Applications/Entropy/#snmp-extend","title":"SNMP Extend","text":"<ol> <li>Download the script onto the desired host.</li> </ol> <pre><code>wget https://raw.githubusercontent.com/librenms/librenms-agent/master/snmp/entropy.sh -O /etc/snmp/entropy.sh\n</code></pre> <ol> <li>Make the script executable</li> </ol> <pre><code>chmod +x /etc/snmp/entropy.sh\n</code></pre> <ol> <li>Edit your snmpd.conf file (usually /etc/snmp/snmpd.conf) and add:</li> </ol> <pre><code>extend entropy /etc/snmp/entropy.sh\n</code></pre> <ol> <li>Restart snmpd on your host</li> </ol> <p>The application should be auto-discovered as described at the top of the page. If it is not, please follow the steps set out under <code>SNMP Extend</code> heading top of page.</p>"},{"location":"Extensions/Applications/Fail2ban/","title":"Fail2ban","text":"<p>A small shell script that checks your system's fail2ban status.</p>"},{"location":"Extensions/Applications/Fail2ban/#snmp-extend","title":"SNMP Extend","text":"<ol> <li> <p>Copy the shell script, fail2ban, to the desired host.</p> <pre><code>wget https://github.com/librenms/librenms-agent/raw/master/snmp/fail2ban -O /etc/snmp/fail2ban\n</code></pre> </li> <li> <p>Make the script executable</p> <pre><code>chmod +x /etc/snmp/fail2ban\n</code></pre> </li> <li> <p>Edit your snmpd.conf file (usually <code>/etc/snmp/snmpd.conf</code>) and add:</p> <pre><code>extend fail2ban /etc/snmp/fail2ban\n</code></pre> <ol> <li> <p>If you want to use the cache, it is as below, by using the -c switch.</p> <pre><code>extend fail2ban /etc/snmp/fail2ban -c\n</code></pre> </li> <li> <p>If you want to use the cache and update it if needed, this can by using the <code>-c</code> and <code>-U</code> switches.</p> <pre><code>extend fail2ban /etc/snmp/fail2ban -c -U\n</code></pre> </li> <li> <p>If you need to specify a custom location for the fail2ban-client, that can be done via the <code>-f</code> switch.</p> <pre><code>extend fail2ban /etc/snmp/fail2ban -f /foo/bin/fail2ban-client\n</code></pre> <p>If not specified, <code>/usr/bin/env fail2ban-client</code> is used.</p> </li> </ol> </li> <li> <p>Restart snmpd on your host</p> <p><pre><code>sudo systemctl restart snmpd\n</code></pre> 2. If you wish to use caching, add the following to /etc/crontab and restart cron.</p> <p>The following will update the cache every 3 minutes.</p> <pre><code>*/3    *    *    *    *    root    /etc/snmp/fail2ban -u\n</code></pre> </li> </ol> <p>If you have more than a few jails configured, you may need to use caching as each jail needs to be polled and fail2ban-client can't do so in a timely manner for than a few. This can result in failure of other SNMP information being polled.</p> <p>For additional details of the switches, please see the POD in the script it self at the top.</p>"},{"location":"Extensions/Applications/FreeRADIUS/","title":"FreeRADIUS","text":"<p>The FreeRADIUS application extension requires that status_server be enabled in your FreeRADIUS config.  For more information see: https://wiki.freeradius.org/config/Status</p> <p>You should note that status requests increment the FreeRADIUS request stats.  So LibreNMS polls will ultimately be reflected in your stats/charts.</p> <ol> <li> <p>Go to your FreeRADIUS configuration directory (usually /etc/raddb or /etc/freeradius).</p> </li> <li> <p><code>cd sites-enabled</code></p> </li> <li> <p><code>ln -s ../sites-available/status status</code></p> </li> <li> <p>Restart FreeRADIUS.</p> </li> <li> <p>You should be able to test with the radclient as follows...</p> </li> </ol> <pre><code>echo \"Message-Authenticator = 0x00, FreeRADIUS-Statistics-Type = 31, Response-Packet-Type = Access-Accept\" | \\\nradclient -x localhost:18121 status adminsecret\n</code></pre> <p>Note that adminsecret is the default secret key in status_server. Change if you've modified this.</p> SNMP ExtendAgent <ol> <li> <p>Copy the freeradius shell script, to the desired host.</p> <pre><code>wget https://raw.githubusercontent.com/librenms/librenms-agent/master/snmp/freeradius.sh -O /etc/snmp/freeradius.sh\n</code></pre> </li> <li> <p>Make the script executable</p> <pre><code>chmod +x /etc/snmp/freeradius.sh\n</code></pre> </li> <li> <p>If you've made any changes to the FreeRADIUS status_server config (secret key, port, etc.) edit freeradius.sh and adjust the config variable accordingly.</p> </li> <li> <p>Edit your snmpd.conf file and add:</p> <pre><code>extend freeradius /etc/snmp/freeradius.sh\n</code></pre> </li> <li> <p>Restart snmpd on the host in question.</p> </li> </ol> <p>The application should be auto-discovered as described at the top of the page. If it is not, please follow the steps set out under <code>SNMP Extend</code> heading top of page.</p> <ol> <li>Install the script to your agent</li> </ol> <pre><code>wget https://raw.githubusercontent.com/librenms/librenms-agent/master/snmp/freeradius.sh -O /usr/lib/check_mk_agent/local/freeradius.sh`\n</code></pre> <ol> <li>Make the script executable</li> </ol> <pre><code>chmod +x /usr/lib/check_mk_agent/local/freeradius.sh\n</code></pre> <ol> <li> <p>If you've made any changes to the FreeRADIUS status_server config (secret key, port, etc.) edit freeradius.sh and adjust the config variable accordingly.</p> </li> <li> <p>Edit the freeradius.sh script and set the variable 'AGENT' to '1' in the config.</p> </li> </ol>"},{"location":"Extensions/Applications/Freeswitch/","title":"Freeswitch","text":"<p>A small shell script that reports various Freeswitch call status.</p> <p>Install via the agent or extend.</p> AgentSNMP Extend <ol> <li>Install the agent on this device if it isn't already and copy the <code>freeswitch</code> script to <code>/usr/lib/check_mk_agent/local/</code></li> </ol> <pre><code>wget https://raw.githubusercontent.com/librenms/librenms-agent/master/agent-local/freeswitch -O /usr/lib/check_mk_agent/local/freeswitch`\n</code></pre> <ol> <li>Make the script executable</li> </ol> <pre><code>chmod +x /usr/lib/check_mk_agent/local/freeswitch\n</code></pre> <ol> <li> <p>Configure <code>FSCLI</code> in the script. You may also have to create an <code>/etc/fs_cli.conf</code> file if your <code>fs_cli</code> command requires authentication.</p> </li> <li> <p>Verify it is working by running <code>/usr/lib/check_mk_agent/local/freeswitch</code></p> </li> </ol> <ol> <li>Download the script onto the desired host</li> </ol> <pre><code>wget https://github.com/librenms/librenms-agent/raw/master/agent-local/freeswitch -O /etc/snmp/freeswitch\n</code></pre> <ol> <li>Make the script executable</li> </ol> <pre><code>chmod +x /etc/snmp/freeswitch\n</code></pre> <ol> <li> <p>Configure <code>FSCLI</code> in the script. You may also have to create an <code>/etc/fs_cli.conf</code> file if your <code>fs_cli</code> command requires authentication.</p> </li> <li> <p>Verify it is working by running <code>/etc/snmp/freeswitch</code></p> </li> <li> <p>Edit your snmpd.conf file (usually <code>/etc/snmp/snmpd.conf</code>) and add:</p> </li> </ol> <pre><code>extend freeswitch /etc/snmp/freeswitch\n</code></pre> <ol> <li>Restart snmpd on your host</li> </ol> <p>The application should be auto-discovered as described at the top of the page. If it is not, please follow the steps set out under <code>SNMP Extend</code> heading top of page.</p>"},{"location":"Extensions/Applications/GPSD/","title":"Global Positioning System  demon (GPSD)","text":"<p>GPSD is a daemon that can be used to monitor GPS devices.</p>"},{"location":"Extensions/Applications/GPSD/#installation","title":"Installation","text":"SNMP ExtendAgent <ol> <li>Download the script onto the desired host.</li> </ol> <pre><code>wget https://raw.githubusercontent.com/librenms/librenms-agent/master/snmp/gpsd -O /etc/snmp/gpsd\n</code></pre> <ol> <li>Make the script executable</li> </ol> <pre><code>chmod +x /etc/snmp/gpsd\n</code></pre> <ol> <li>Edit your snmpd.conf file (usually <code>/etc/snmp/snmpd.conf</code>) and add:</li> </ol> <pre><code>extend gpsd /etc/snmp/gpsd\n</code></pre> <ol> <li>Restart snmpd on your host</li> </ol> <p>The application should be auto-discovered as described at the top of the page. If it is not, please follow the steps set out under <code>SNMP Extend</code> heading at the top of the page.</p> <p>Install the agent on this device if it isn't already and copy the <code>gpsd</code> script to <code>/usr/lib/check_mk_agent/local/</code></p> <p>You may need to configure <code>$server</code> or <code>$port</code>.</p> <p>Verify it is working by running <code>/usr/lib/check_mk_agent/local/gpsd</code></p>"},{"location":"Extensions/Applications/HTTP%20Access%20Log%20Combined/","title":"HTTP Access Log Combined","text":""},{"location":"Extensions/Applications/HTTP%20Access%20Log%20Combined/#http-access-log-combined","title":"HTTP Access Log Combined","text":""},{"location":"Extensions/Applications/HTTP%20Access%20Log%20Combined/#snmp-extend","title":"SNMP Extend","text":"<ol> <li> <p>Download the script onto the desired host.</p> <pre><code>wget https://raw.githubusercontent.com/librenms/librenms-agent/master/snmp/http_access_log_combined -O /etc/snmp/http_access_log_combined\n</code></pre> </li> <li> <p>Make the script executable</p> <pre><code>chmod +x /etc/snmp/http_access_log_combined\n</code></pre> </li> <li> <p>Install the depends</p> FreeBSDDebian/Ubuntu <pre><code>pkg install p5-File-Slurp p5-MIME-Base64 p5-JSON p5-Statistics-Lite p5-File-ReadBackwards\n</code></pre> <pre><code>apt-get install libfile-slurp-perl libmime-base64-perl libjson-perl libstatistics-lite-perl libfile-readbackwards-perl\n</code></pre> </li> <li> <p>Configure it if neeeded. Uses    <code>/usr/local/etc/http_access_log_combined_extend.json</code>, unless    specified via <code>-c</code>. See further below for configuration    information.</p> </li> <li> <p>If on large setups where it won't complete in a timely manner, run it via cron.</p> If not using cronIf using cron <p>Add the following to <code>/etc/crontab.d/librenms_http_access_log_combined</code>:</p> <pre><code>*/5 * * * * root /etc/snmp/http_access_log_combined -b -q -w\n</code></pre> </li> <li> <p>Add one of the following to <code>/etc/snmp/snmpd.conf</code>.</p> If not using cronIf using cron <pre><code>extend http_access_log_combined /etc/snmp/http_access_log_combined -b\n</code></pre> <pre><code>extend http_access_log_combined cat /var/cache/http_access_log_combined.json.snmp\n</code></pre> </li> <li> <p>Either manually enable it for the device, rediscover the device, or    wait for it to be rediscovered.</p> </li> </ol> Key Type Description access hash A hash of access logs to monitor. The key is the reporting name while the value is the path to it. error hash A hash of errors logs to monitor. The key is the reporting name while the value is the path to it. Must have a matching entry in access auto boolean, 0/1 If auto mode should be used or not. If not defined and .access is not defined, then it will default to 1. Other wise it is undef, false. auto_dir string The dir to look for files in. Default: <code>/var/log/apache/</code> auto_end_regex string What to match files ending in. Default: <code>.log$</code> auto_access_regex string What will be prepended to the end regexp for looking for access log files. Default: <code>-access</code> auto_error_regex string What will be prepended to the end regexp for looking for error log files. Default: <code>-error</code> <p>Auto will attempt to generate a list of log files to process. Will look under the directory specified for files matching the built regexp. The regexp is built by joining the access/error regexps to the end regexp. so for access it would be come <code>-access.log$</code>.</p> <p>The default auto config would look like below.</p> <pre><code>{\n    \"auto\": 1,\n    \"auto_dir\": \"/var/log/apache/\",\n    \"auto_end_regex\": \".log$\",\n    \"auto_access_regex\": \"-access\",\n    \"auto_error_regex\": \"-error\"\n}\n</code></pre> <p>So lets say the log dir, <code>/some/dir</code> in our case, has the following files.</p> <pre><code>foo:80-access.log\nfoo:80-error.log\nfoo:443-access.log\nfoo:443-error.log\nbar-access.log\n</code></pre> <p>Then the auto generated stuff would be a like below.</p> <pre><code>{\n    \"access\":{\n        \"foo:80\": \"/some/dir/foo:80-access.log\",\n        \"foo:443\": \"/some/dir/foo:443-access.log\",\n        \"bar\": \"/some/dir/bar-access.log\",\n    },\n    \"error\":{\n        \"foo:80\": \"/some/dir/foo:80-error.log\",\n        \"foo:443\": \"/some/dir/foo:443-error.log\",\n    }\n}\n</code></pre> <p>A manual config would be like below. Note that only <code>foo</code> has a error log that the size will be checked for and reported via the stat <code>error_size</code>.</p> <pre><code>{\n    \"auto\": 0,\n    \"access\":{\n        \"foo\":\"/var/log/www/foo.log\",\n        \"bar:80\":\"/var/log/www/bar:80.log\"\n        \"bar:443\":\"/var/log/www/bar:443.log\"\n    },\n    \"error\":{\n        \"foo\":\"/var/log/www/foo-error.log\"\n    }\n}\n</code></pre> <ol> <li>(Optional) If you have SELinux in Enforcing mode, you must add a module so the script can open and read the httpd log files:</li> </ol> <pre><code>cat &lt;&lt; EOF &gt; snmpd_http_access_log_combined.te\nmodule snmp_http_access_log_combined 1.0;\n\nrequire {\n        type httpd_log_t;\n        type snmpd_t;\n        class file { open read };\n}\n\n#============= snmpd_t ==============\n\nallow snmpd_t httpd_log_t:file { open read };\n\nEOF\ncheckmodule -M -m -o snmpd_http_access_log_combined.mod snmpd_http_access_log_combined.te\nsemodule_package -o snmpd_http_access_log_combined.pp -m snmpd_http_access_log_combined.mod\nsemodule -i snmpd_http_access_log_combined.pp\n</code></pre>"},{"location":"Extensions/Applications/HV%20Monitor/","title":"HV Monitor","text":"<p>HV Monitor provides a generic way to monitor hypervisors. Currently CBSD+bhyve on FreeBSD and Libvirt+QEMU on Linux are support.</p> <p>For more information see HV::Monitor on Github or MetaCPAN.</p>"},{"location":"Extensions/Applications/HV%20Monitor/#snmp-extend","title":"SNMP Extend","text":"<ol> <li> <p>Install the SNMP Extend.</p> Debian/UbuntuFreeBSDGeneric <pre><code>apt-get install libjson-perl libmime-base64-perl cpanminus\ncpanm HV::Monitor\n</code></pre> <pre><code>pkg install p5-App-cpanminus p5-JSON p5-MIME-Base64 p5-Module-List\ncpanm HV::Monitor\n</code></pre> <pre><code>cpanm JSON MIME::Base64 Module::List\n</code></pre> </li> <li> <p>Set it up to be be ran by cron by root. Yes, you can directly call    this script from SNMPD, but be aware, especially with Libvirt,    there is a very real possibility of the snmpget timing out,    especially if a VM is spinning up/down as virsh domstats can block    for a few seconds or so then.</p> <pre><code>*/5 * * * * /usr/local/bin/hv_monitor &gt; /var/cache/hv_monitor.json -c 2&gt; /dev/null\n</code></pre> </li> <li> <p>Setup snmpd.conf as below.</p> <pre><code>extend hv-monitor /bin/cat\n/var/cache/hv_monitor.json\n</code></pre> </li> <li> <p>Restart SNMPD.</p> </li> <li> <p>Either wait for it to be re-discovered or manually enable it.</p> </li> </ol>"},{"location":"Extensions/Applications/ISC%20DHCP%20Stats/","title":"ISC DHCP Stats","text":"<p>A small python3 script that reports current DHCP leases stats and pool usage of ISC DHCP Server.</p> <p>Also you have to install the dhcpd-pools and the required Perl modules.</p>"},{"location":"Extensions/Applications/ISC%20DHCP%20Stats/#install-prerequisites","title":"Install prerequisites","text":"Debian/UbuntuFreeBSDGeneric <pre><code>apt install cpanminus libmime-base64-perl libfile-slurp-perl\ncpanm Net::ISC::DHCPd::Leases\n</code></pre> <pre><code>pkg install p5-JSON p5-MIME-Base64 p5-App-cpanminus p5-File-Slurp\ncpanm Net::ISC::DHCPd::Leases\n</code></pre> <pre><code>cpanm Net::ISC::DHCPd::Leases MIME::Base64 File::Slurp\n</code></pre>"},{"location":"Extensions/Applications/ISC%20DHCP%20Stats/#snmp-extend","title":"SNMP Extend","text":"<ol> <li> <p>Copy the shell script to the desired host.</p> <pre><code>wget https://github.com/librenms/librenms-agent/raw/master/snmp/dhcp -O /etc/snmp/dhcp\n</code></pre> </li> <li> <p>Make the script executable</p> <pre><code>chmod +x /etc/snmp/dhcp\n</code></pre> </li> <li> <p>Edit your snmpd.conf file     If on a slow system running it via cron may be needed.</p> If not using cronIf using cron <p>edit (usually <code>/etc/snmp/snmpd.conf</code>) and add:</p> <pre><code>extend dhcpstats /etc/snmp/dhcp -z\n</code></pre> <p>edit (usually <code>/etc/snmp/snmpd.conf</code>) and add:</p> <pre><code>extend dhcpstats /etc/snmp/dhcp -Z -w /var/cache/dhcp_extend\n</code></pre> <p>Setup cronjob to run every 5 minutes. add the following to cron <code>\\etc/crontab.d/librenms_dhcp</code>:</p> <pre><code>*/5 * * * * /etc/snmp/dhcp -Z -w /var/cache/dhcp_extend\n</code></pre> <p>The following options are also supported.</p> Option Description <code>-c $file</code> Path to dhcpd.conf. <code>-l $file</code> Path to lease file. <code>-Z</code> Enable GZip+Base64 compression. <code>-d</code> Do not de-dup. <code>-w $file</code> File to write it out to. </li> <li> <p>Restart snmpd on your host</p> <p>The application should be auto-discovered as described at the top of the page. If it is not, please follow the steps set out under <code>SNMP Extend</code> heading top of page.</p> </li> </ol>"},{"location":"Extensions/Applications/Icecast/","title":"Icecast","text":""},{"location":"Extensions/Applications/Icecast/#icecast","title":"Icecast","text":"<p>Shell script that reports load average/memory/open-files stats of Icecast</p>"},{"location":"Extensions/Applications/Icecast/#snmp-extend","title":"SNMP Extend","text":"<ol> <li> <p>Copy the shell script, icecast-stats.sh, to the desired host (the host must be added to LibreNMS devices)</p> <pre><code>wget https://github.com/librenms/librenms-agent/raw/master/snmp/icecast-stats.sh -O /etc/snmp/icecast-stats.sh\n</code></pre> </li> <li> <p>Make the script executable</p> <pre><code>chmod +x /etc/snmp/icecast-stats.sh\n</code></pre> </li> <li> <p>Verify it is working by running <code>/etc/snmp/icecast-stats.sh</code></p> </li> <li> <p>Edit your snmpd.conf file (usually <code>/etc/snmp/icecast-stats.sh</code>) and add:</p> <pre><code>extend icecast /etc/snmp/icecast-stats.sh\n</code></pre> </li> </ol>"},{"location":"Extensions/Applications/Linux%20Softnet%20Stat/","title":"Linux Softnet Stat","text":""},{"location":"Extensions/Applications/Linux%20Softnet%20Stat/#install-prereqs","title":"Install prereqs","text":"<pre><code>=== \"Debian/Ubuntu\"\n\n    ```bash\n    apt-get install libfile-slurp-perl libjson-perl libmime-base64-perl\n    ```\n\n=== \"FreeBSD\"\n\n    ```bash\n    pkg install p5-File-Slurp p5-JSON p5-MIME-Base64    \n    ```\n\n=== \"Generic\"\n\n    ```bash\n    cpanm File::Slurp JSON MIME::Base64 \n    ```\n</code></pre>"},{"location":"Extensions/Applications/Linux%20Softnet%20Stat/#snmp-extend","title":"SNMP Extend","text":"<ol> <li> <p>Download the script into the desired host.</p> <pre><code>wget https://raw.githubusercontent.com/librenms/librenms-agent/master/snmp/linux_softnet_stat -O /etc/snmp/linux_softnet_stat\n</code></pre> </li> <li> <p>Make the script executable</p> <pre><code>chmod +x /etc/snmp/linux_softnet_stat\n</code></pre> </li> <li> <p>Edit your snmpd.conf file (usually <code>/etc/snmp/snmpd.conf</code>) and add:</p> <pre><code>extend linux_softnet_stat /etc/snmp/linux_softnet_stat -b\n</code></pre> <p>Then either enable the application Linux Softnet Stat or wait for it to be re-discovered.</p> </li> </ol>"},{"location":"Extensions/Applications/Linux%20config%20files/","title":"Linux config files","text":"<p><code>linux_config_files</code> is an application intended to monitor a Linux distribution's configuration files via that distribution's configuration management tool/system.  At this time, ONLY RPM-based (Fedora/RHEL) SYSTEMS ARE SUPPORTED utilizing the rpmconf tool.  The <code>linux_config_files</code> application collects and graphs the total count of configuration files that are out of sync and graphs that number.</p> <p>Fedora/RHEL: Rpmconf is a utility that analyzes rpm configuration files using the RPM Package Manager.  Rpmconf reports when a new configuration file standard has been issued for an upgraded/downgraded piece of software.  Typically, rpmconf is used to provide a diff of the current configuration file versus the new, standard configuration file.  The administrator can then choose to install the new configuration file or keep the old one.</p>"},{"location":"Extensions/Applications/Linux%20config%20files/#snmp-extend","title":"SNMP Extend","text":"<ol> <li> <p>Copy the python script, linux_config_files.py, to the desired host</p> <pre><code>wget https://github.com/librenms/librenms-agent/raw/master/snmp/linux_config_files.py -O /etc/snmp/linux_config_files.py\n</code></pre> </li> <li> <p>Make the script executable</p> <pre><code>chmod +x /etc/snmp/linux_config_files.py\n</code></pre> </li> <li> <p>Edit your snmpd.conf file and add:</p> <pre><code>extend linux_config_files /etc/snmp/linux_config_files.py\n</code></pre> </li> <li> <p>(Optional on an RPM-based distribution) Create a /etc/snmp/linux_config_files.json file and specify the following:</p> <pre><code>{\n    \"pkg_system\": \"rpm\",\n    \"pkg_tool_cmd\": \"/bin/rpmconf\",\n}\n</code></pre> Parameter Description Default Value pkg_system String designating the distribution name, \"rpm\" pkg_tool_cmd String path to the package tool binary \"/sbin/rpmconf\" </li> <li> <p>Restart snmpd.</p> <pre><code>sudo systemctl restart snmpd\n</code></pre> </li> </ol>"},{"location":"Extensions/Applications/Logsize/","title":"Logsize","text":"<p>logsize is a small shell script that reports the size of log files.</p>"},{"location":"Extensions/Applications/Logsize/#snmp-extend","title":"SNMP Extend","text":"<ol> <li>Download the </li> </ol>"},{"location":"Extensions/Applications/Logsize/#logsize_1","title":"Logsize","text":""},{"location":"Extensions/Applications/Logsize/#snmp-extend_1","title":"SNMP Extend","text":"<ol> <li> <p>Download the script and make it executable.</p> <pre><code>wget https://raw.githubusercontent.com/librenms/librenms-agent/master/snmp/logsize -O /etc/snmp/logsize\nchmod +x /etc/snmp/logsize\n</code></pre> </li> <li> <p>Install the requirements.</p> Debian/UbuntuFreeBSDGeneric <pre><code>apt-get install libjson-perl libmime-base64-perl libfile-slurp-perl libtoml-perl libfile-find-rule-perl libstatistics-lite-perl\ncpanm Time::Piece\n</code></pre> <pre><code>pkg install p5-File-Find-Rule p5-JSON p5-TOML p5-Time-Piece p5-MIME-Base64 p5-File-Slurp p5-Statistics-Lite\n</code></pre> <pre><code>cpanm File::Find::Rule JSON TOML Time::Piece MIME::Base64 File::Slurp Statistics::Lite Time::Piece\n</code></pre> </li> <li> <p>Configure the config at <code>/usr/local/etc/logsize.conf</code>. You can find the documentation for the config file in the extend. Below is a small example.</p> <pre><code># monitor log sizes of logs directly udner /var/log\n[sets.var_log]\ndir=\"/var/log/\"\n\n# monitor remote logs from network devices\n[sets.remote_network]\ndir=\"/var/log/remote/network/\"\n\n# monitor remote logs from windows sources\n[sets.remote_windows]\ndir=\"/var/log/remote/windows/\"\n\n# monitor suricata flows logs sizes\n[sets.suricata_flows]\ndir=\"/var/log/suricata/flows/current\"\n</code></pre> </li> <li> <p>If the directories all readable via SNMPD, this script can be ran    via snmpd. Otherwise it needs setup in cron. Similarly is    processing a large number of files, it may also need setup in cron    if it takes the script awhile to run.</p> <pre><code>*/5 * * * * /etc/snmp/logsize -b 2&gt; /dev/null &gt; /dev/null\n</code></pre> </li> <li> <p>Make sure that <code>/var/cache/logsize_extend</code> exists and is writable    by the user running the extend.</p> <pre><code>mkdir -p /var/cache/logsize_extend\n</code></pre> </li> <li> <p>Configure it in the SNMPD config (usually <code>/etc/snmp/snmpd.conf</code>).</p> If not using cronIf using cron <p>Add:</p> <pre><code>extend logsize  /etc/snmp/logsize -b\n</code></pre> <p>Add:</p> <pre><code>extend logsize /bin/cat /var/cache/logsize_extend/extend_return\n</code></pre> <p>script and make it executable.</p> <pre><code>wget https://raw.githubusercontent.com/librenms/librenms-agent/master/snmp/logsize -O /etc/snmp/logsize\nchmod +x /etc/snmp/logsize\n</code></pre> </li> <li> <p>Install the requirements.</p> Debian/UbuntuFreeBSDGeneric <pre><code>apt-get install libjson-perl libmime-base64-perl libfile-slurp-perl libtoml-perl libfile-find-rule-perl libstatistics-lite-perl\ncpanm Time::Piece\n</code></pre> <pre><code>pkg install p5-File-Find-Rule p5-JSON p5-TOML p5-Time-Piece p5-MIME-Base64 p5-File-Slurp p5-Statistics-Lite\n</code></pre> <pre><code>cpanm File::Find::Rule JSON TOML Time::Piece MIME::Base64 File::Slurp Statistics::Lite Time::Piece\n</code></pre> </li> <li> <p>Configure the config at <code>/usr/local/etc/logsize.conf</code>. You can find the documentation for the config file in the extend. Below is a small example.</p> <pre><code># monitor log sizes of logs directly udner /var/log\n[sets.var_log]\ndir=\"/var/log/\"\n\n# monitor remote logs from network devices\n[sets.remote_network]\ndir=\"/var/log/remote/network/\"\n\n# monitor remote logs from windows sources\n[sets.remote_windows]\ndir=\"/var/log/remote/windows/\"\n\n# monitor suricata flows logs sizes\n[sets.suricata_flows]\ndir=\"/var/log/suricata/flows/current\"\n</code></pre> </li> <li> <p>If the directories all readable via SNMPD, this script can be ran    via snmpd. Otherwise it needs setup in cron. Similarly is    processing a large number of files, it may also need setup in cron    if it takes the script awhile to run.</p> <pre><code>*/5 * * * * /etc/snmp/logsize -b 2&gt; /dev/null &gt; /dev/null\n</code></pre> </li> <li> <p>Make sure that <code>/var/cache/logsize_extend</code> exists and is writable    by the user running the extend.</p> <pre><code>mkdir -p /var/cache/logsize_extend\n</code></pre> </li> <li> <p>Configure it in the SNMPD config (usually <code>/etc/snmp/snmpd.conf</code>).</p> If not using cronIf using cron <p>Add:</p> <pre><code>extend logsize  /etc/snmp/logsize -b\n</code></pre> <p>Add:</p> <pre><code>extend logsize /bin/cat /var/cache/logsize_extend/extend_return\n</code></pre> </li> </ol>"},{"location":"Extensions/Applications/Mailcow-dockerized%20postfix/","title":"mailcow-dockerized postfix","text":""},{"location":"Extensions/Applications/Mailcow-dockerized%20postfix/#snmp-extend","title":"SNMP Extend","text":"<ol> <li> <p>Download the script into the desired host.</p> <pre><code>wget https://raw.githubusercontent.com/librenms/librenms-agent/master/snmp/mailcow-dockerized-postfix -O /etc/snmp/mailcow-dockerized-postfix\n</code></pre> </li> <li> <p>Make the script executable</p> <pre><code>chmod +x /etc/snmp/mailcow-dockerized-postfix\n</code></pre> <p>Maybe you will need to install <code>pflogsumm</code> on debian based OS. Please check if you have package installed.</p> </li> <li> <p>Edit your snmpd.conf file (usually /etc/snmp/snmpd.conf) and add:</p> <pre><code>extend mailcow-postfix /etc/snmp/mailcow-dockerized-postfix\n</code></pre> </li> <li> <p>Restart snmpd on your host</p> <p>The application should be auto-discovered as described at the top of the page. If it is not, please follow the steps set out under <code>SNMP Extend</code> heading top of page.</p> </li> </ol>"},{"location":"Extensions/Applications/Mailscanner/","title":"Mailscanner","text":""},{"location":"Extensions/Applications/Mailscanner/#snmp-extend","title":"SNMP Extend","text":"<ol> <li> <p>Download the script onto the desired host. <pre><code>wget https://raw.githubusercontent.com/librenms/librenms-agent/master/snmp/mailscanner.php -O /etc/snmp/mailscanner.php\n</code></pre></p> </li> <li> <p>Make the script executable</p> <pre><code>chmod +x /etc/snmp/mailscanner.php\n</code></pre> </li> <li> <p>Edit your snmpd.conf file (usually /etc/snmp/snmpd.conf) and add:</p> <pre><code>extend mailscanner /etc/snmp/mailscanner.php\n</code></pre> </li> <li> <p>Restart snmpd on your host</p> <p>The application should be auto-discovered as described at the top of the page. If it is not, please follow the steps set out under <code>SNMP Extend</code> heading top of page.</p> </li> </ol>"},{"location":"Extensions/Applications/Mdadm/","title":"Mdadm","text":"<p>It allows you to checks mdadm health and array data</p>"},{"location":"Extensions/Applications/Mdadm/#install-prereqs","title":"Install prereqs","text":"<p>This script require: <code>jq</code></p> Debian/Ubuntu <pre><code>sudo apt install jq\n</code></pre>"},{"location":"Extensions/Applications/Mdadm/#snmp-extend","title":"SNMP Extend","text":"<ol> <li> <p>Download the script onto the desired host.</p> <pre><code>sudo wget https://raw.githubusercontent.com/librenms/librenms-agent/master/snmp/mdadm -O /etc/snmp/mdadm\n</code></pre> </li> <li> <p>Make the script executable</p> <pre><code>sudo chmod +x /etc/snmp/mdadm\n</code></pre> </li> <li> <p>Edit your snmpd.conf file (usually <code>/etc/snmp/snmpd.conf</code>) and add:</p> <pre><code>extend mdadm /etc/snmp/mdadm\n</code></pre> </li> <li> <p>Verify it is working by running</p> <pre><code>sudo /etc/snmp/mdadm\n</code></pre> </li> <li> <p>Restart snmpd on your host</p> <pre><code>sudo service snmpd restart\n</code></pre> <p>The application should be auto-discovered as described at the top of the page. If it is not, please follow the steps set out under <code>SNMP Extend</code> heading top of page.</p> </li> </ol>"},{"location":"Extensions/Applications/MegaRAID/","title":"MegaRAID","text":""},{"location":"Extensions/Applications/MegaRAID/#megaraid","title":"MegaRAID","text":"<p>This software from Broadcom/LSI let you monitor MegaRAID controller. This is agent for snmpd.</p> <ol> <li> <p>Download the external software and follow the included install instructions.</p> </li> <li> <p>Add the following line to your <code>snmpd.conf</code> file (usually <code>/etc/snmp/snmpd.conf</code>)</p> <pre><code>pass .1.3.6.1.4.1.3582 /usr/sbin/lsi_mrdsnmpmain\n</code></pre> </li> <li> <p>Restart snmpd on your host</p> </li> </ol>"},{"location":"Extensions/Applications/Memcached/","title":"Memcached","text":""},{"location":"Extensions/Applications/Memcached/#memcached","title":"Memcached","text":"<p>This script allows you to monitor memcached stats</p>"},{"location":"Extensions/Applications/Memcached/#snmp-extend","title":"SNMP Extend","text":"<ol> <li> <p>Copy the memcached    script    to <code>/etc/snmp/</code> on your remote server.</p> <pre><code>wget https://raw.githubusercontent.com/librenms/librenms-agent/master/snmp/memcached -O /etc/snmp/memcached\n</code></pre> </li> <li> <p>Make the script executable:</p> <pre><code>chmod +x /etc/snmp/memcached\n</code></pre> </li> <li> <p>Edit your snmpd.conf file (usually <code>/etc/snmp/snmpd.conf</code>) and add:</p> <pre><code>extend memcached /etc/snmp/memcached\n</code></pre> </li> <li> <p>Restart snmpd on your host</p> <p>The application should be auto-discovered as described at the top of the page. If it is not, please follow the steps set out under <code>SNMP Extend</code> heading top of page.</p> </li> </ol>"},{"location":"Extensions/Applications/Mojo%20CAPE%20Submit/","title":"Mojo CAPE Submit","text":""},{"location":"Extensions/Applications/Mojo%20CAPE%20Submit/#mojo-cape-submit","title":"Mojo CAPE Submit","text":""},{"location":"Extensions/Applications/Mojo%20CAPE%20Submit/#snmp-extend","title":"SNMP Extend","text":"<p>This assumes you've already configured <code>mojo_cape_submit</code> from <code>CAPE::Utils</code>.</p> <ol> <li> <p>Add the following to <code>snmpd.conf</code> and restarted SNMPD.</p> <pre><code>extend mojo_cape_submit /usr/local/bin/mojo_cape_submit_extend\n</code></pre> </li> <li> <p>Restart snmpd on your host</p> <pre><code>sudo systemctl restart snmpd\n</code></pre> </li> </ol> <p>Then just wait for the machine in question to be rediscovered or enabled it in the device settings app page.</p>"},{"location":"Extensions/Applications/Munin/","title":"Munin","text":""},{"location":"Extensions/Applications/Munin/#agent","title":"Agent","text":"<ol> <li> <p>Install the script to your agent:</p> <pre><code>wget https://raw.githubusercontent.com/librenms/librenms-agent/master/agent-local/munin -O /usr/lib/check_mk_agent/local/munin\n</code></pre> </li> <li> <p>Make the script executable</p> <pre><code>chmod +x /usr/lib/check_mk_agent/local/munin\n</code></pre> </li> <li> <p>Create the munin scripts dir:</p> <pre><code>mkdir -p /usr/share/munin/munin-scripts\n</code></pre> </li> <li> <p>Install your munin scripts into the above directory.</p> </li> </ol> <p>To create your own custom munin scripts, please see this example:</p> <pre><code>#!/bin/bash\nif [ \"$1\" = \"config\" ]; then\n    echo 'graph_title Some title'\n    echo 'graph_args --base 1000 -l 0' #not required\n    echo 'graph_vlabel Some label'\n    echo 'graph_scale no' #not required, can be yes/no\n    echo 'graph_category system' #Choose something meaningful, can be anything\n    echo 'graph_info This graph shows something awesome.' #Short desc\n    echo 'foobar.label Label for your unit' # Repeat these two lines as much as you like\n    echo 'foobar.info Desc for your unit.'\n    exit 0\nfi\necho -n \"foobar.value \" $(date +%s) #Populate a value, here unix-timestamp\n</code></pre>"},{"location":"Extensions/Applications/MySQL/","title":"MySQL","text":""},{"location":"Extensions/Applications/MySQL/#mysql","title":"MySQL","text":""},{"location":"Extensions/Applications/MySQL/#install-prereqs","title":"Install prereqs","text":"<p>The MySQL script requires PHP-CLI and the PHP MySQL extension, so please verify those are installed.</p> <p>May vary based on PHP version</p> Debian/UbuntuCentOS/RedHat <pre><code>apt-get install php-cli php-mysql\n</code></pre> <pre><code>yum install php-cli php-mysql\n</code></pre>"},{"location":"Extensions/Applications/MySQL/#create-the-cache-directory","title":"Create the cache directory","text":"<p>Create the cache directory, '/var/cache/librenms/' and make sure that it is owned by the user running the SNMP daemon.</p> <pre><code>mkdir -p /var/cache/librenms/\n</code></pre>"},{"location":"Extensions/Applications/MySQL/#mysql-user","title":"MySQL User","text":"<p>Refer to the Percona Documentation for details on how to create a MySQL user with privileges to read the required monitoring data from MySQL / MariaDB.</p>"},{"location":"Extensions/Applications/MySQL/#mysql-script","title":"MySQL script","text":"<p>Unlike most other scripts, the MySQL script requires a configuration file <code>mysql.cnf</code> in the same directory as the extend or agent script with following content:</p> <pre><code>&lt;?php\n$mysql_user = 'root';\n$mysql_pass = 'toor';\n$mysql_host = 'localhost';\n$mysql_port = 3306;\n</code></pre> <p>Note that depending on your MySQL installation (chrooted install for example), you may have to specify 127.0.0.1 instead of localhost. Localhost make a MySQL connection via the mysql socket, while 127.0.0.1 make a standard IP connection to mysql.</p> <p>Note also if you get a mysql error <code>Uncaught TypeError: mysqli_num_rows(): Argument #1</code>, this is because you are using a newer mysql version which doesnt support <code>UNBLOCKING</code> for slave statuses, so you need to also include the line <code>$chk_options['slave'] = false;</code> into <code>mysql.cnf</code> to skip checking slave statuses</p> AgentSNMP extend <p>Install the agent on this device if it isn't already</p> <p>and copy the <code>mysql</code> script to <code>/usr/lib/check_mk_agent/local/</code></p> <p>Verify it is working by running <code>/usr/lib/check_mk_agent/local/mysql</code></p> <ol> <li> <p>Copy the mysql script to the desired host.</p> <pre><code>wget https://github.com/librenms/librenms-agent/raw/master/snmp/mysql -O /etc/snmp/mysql\n</code></pre> </li> <li> <p>Make the file executable</p> <pre><code>chmod +x /etc/snmp/mysql\n</code></pre> </li> <li> <p>Edit <code>/etc/snmp/mysql</code> to set your MySQL connection constants or declare them in <code>/etc/snmp/mysql.cnf</code> (new file)</p> </li> <li> <p>Edit your snmpd.conf file and add:</p> <pre><code>extend mysql /etc/snmp/mysql\n</code></pre> </li> <li> <p>Restart snmpd.</p> </li> </ol> <p>The application should be auto-discovered as described at the top of the page. If it is not, please follow the steps set out under <code>SNMP Extend</code> heading top of page.</p>"},{"location":"Extensions/Applications/NFS%20FreeBSD%20Client/","title":"NFS FreeBSD Client","text":""},{"location":"Extensions/Applications/NFS%20FreeBSD%20Client/#freebsd-nfs-client","title":"FreeBSD NFS Client","text":"<p>Superseded by the generalized NFS support.</p>"},{"location":"Extensions/Applications/NFS%20FreeBSD%20Client/#snmp-extend","title":"SNMP Extend","text":"<ol> <li>Copy the shell script, fbsdnfsserver, to the desired host</li> </ol> <pre><code>wget https://github.com/librenms/librenms-agent/raw/master/snmp/fbsdnfsclient -O /etc/snmp/fbsdnfsclient\n</code></pre> <ol> <li>Make the script executable</li> </ol> <pre><code>chmod +x /etc/snmp/fbsdnfsclient\n</code></pre> <ol> <li>Edit your snmpd.conf file and add:</li> </ol> <pre><code>extend fbsdnfsclient /etc/snmp/fbsdnfsclient\n</code></pre> <ol> <li>Restart snmpd on your host</li> </ol> <p>The application should be auto-discovered as described at the top of the page. If it is not, please follow the steps set out under <code>SNMP Extend</code> heading top of page.</p>"},{"location":"Extensions/Applications/NFS%20FreeBSD%20Server/","title":"NFS FreeBSD Server","text":""},{"location":"Extensions/Applications/NFS%20FreeBSD%20Server/#freebsd-nfs-server","title":"FreeBSD NFS Server","text":"<p>Superseded by the generalized NFS support.</p>"},{"location":"Extensions/Applications/NFS%20FreeBSD%20Server/#snmp-extend","title":"SNMP Extend","text":"<ol> <li>Copy the shell script, fbsdnfsserver, to the desired host</li> </ol> <pre><code>wget https://github.com/librenms/librenms-agent/raw/master/snmp/fbsdnfsserver -O /etc/snmp/fbsdnfsserver\n</code></pre> <ol> <li>Make the script executable</li> </ol> <pre><code>chmod +x /etc/snmp/fbsdnfsserver\n</code></pre> <ol> <li>Edit your snmpd.conf file and add:</li> </ol> <pre><code>extend fbsdnfsserver /etc/snmp/fbsdnfsserver\n</code></pre> <ol> <li>Restart snmpd on your host</li> </ol> <p>The application should be auto-discovered as described at the top of the page. If it is not, please follow the steps set out under <code>SNMP Extend</code> heading top of page.</p>"},{"location":"Extensions/Applications/NFS%20Linux%20Server/","title":"NFS Linux Server","text":""},{"location":"Extensions/Applications/NFS%20Linux%20Server/#linux-nfs-server","title":"Linux NFS Server","text":"<p>Superseded by the generalized NFS support.</p> <p>Export the NFS stats from as server.</p>"},{"location":"Extensions/Applications/NFS%20Linux%20Server/#snmp-extend","title":"SNMP Extend","text":"<ol> <li> <p>Edit your snmpd.conf file (usually <code>/etc/snmp/snmpd.conf</code>) and add :</p> <p>Note</p> <p>find out where cat is located using : <code>which cat</code></p> <pre><code>extend nfs-server /bin/cat /proc/net/rpc/nfsd\n</code></pre> </li> <li> <p>reload snmpd service to activate the configuration</p> <pre><code>sudo systemctl reload snmpd\n</code></pre> </li> </ol>"},{"location":"Extensions/Applications/NFS/","title":"NFS","text":"<p>Provides both NFS client and server support.</p> <p>Currently supported OSes are as below.</p> <ul> <li>FreeBSD</li> <li>Linux</li> </ul>"},{"location":"Extensions/Applications/NFS/#install-prereqs","title":"Install prereqs","text":"Debian/UbuntuCentOS/RedHatFreeBSDGeneric <pre><code>apt-get install libjson-perl libfile-slurp-perl libmime-base64-perl\n</code></pre> <pre><code>yum install perl-JSON perl-File-Slurp perl-MIME-Base64\n</code></pre> <pre><code>pkg install p5-JSON p5-File-Slurp p5-MIME-Base64\n</code></pre> <pre><code>cpanm JSON File::Slurp MIME::Base64\n</code></pre>"},{"location":"Extensions/Applications/NFS/#snmpd-extend","title":"SNMPd extend","text":"<ol> <li> <p>Download the extend.</p> <pre><code>wget https://raw.githubusercontent.com/librenms/librenms-agent/master/snmp/nfs -O /etc/snmp/nfs\n</code></pre> </li> <li> <p>Make it executable.</p> <pre><code>chmod +x /etc/snmp/nfs\n</code></pre> </li> <li> <p>Add it to <code>/etc/snmp/snmpd.conf</code>:</p> <pre><code>extend nfs /usr/bin/env PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin /etc/snmp/nfs\n</code></pre> </li> <li> <p>Restart <code>snmpd</code> on your host</p> </li> <li> <p>Either wait for it to be rediscovered, rediscover it, or enable it.</p> </li> </ol>"},{"location":"Extensions/Applications/NFS/#selinux","title":"SELinux","text":"<p>If using SELinux, the following is needed.</p> <ol> <li> <p><code>setsebool -P nis_enabled 1</code></p> </li> <li> <p>Make a file (<code>snmp_nfs.te</code>) with the following contents and install    the policy with the command <code>semodule -i snmp_nfs.te</code>.</p> </li> </ol> <pre><code>module local_snmp 1.0;\n\nrequire {\n    type snmpd_t;\n    type portmap_port_t;\n    type sysctl_rpc_t;\n    type device_t;\n    type mountd_port_t;\n    type hi_reserved_port_t;\n    class tcp_socket { name_bind name_connect };\n    class udp_socket name_bind;\n    class dir search;\n    class file { read getattr open };\n    class chr_file { open ioctl read write };\n}\n\n# Allow snmpd_t to connect to tcp_socket of type portmap_port_t\nallow snmpd_t portmap_port_t:tcp_socket name_connect;\nallow snmpd_t hi_reserved_port_t:tcp_socket name_bind;\nallow snmpd_t hi_reserved_port_t:udp_socket name_bind;\nallow snmpd_t mountd_port_t:tcp_socket name_connect;\n\n# Allow snmpd_t to search directories and access files of type sysctl_rpc_t\nallow snmpd_t sysctl_rpc_t:dir search;\nallow snmpd_t sysctl_rpc_t:file { read getattr open };\n\n# Allow snmpd_t to perform open, ioctl, read, and write operations on chr_file of type device_t\nallow snmpd_t device_t:chr_file { open ioctl read write };\n\n# this policy allows :\n# zfs extension (fixes root needs to run this)\n# nfs extension (fixes file not found error)\n</code></pre>"},{"location":"Extensions/Applications/NGINX/","title":"NGINX","text":"<p>NGINX is a free, open-source, high-performance HTTP server: https://www.nginx.org/</p> <p>It's required to have the following directive in your nginx configuration responsible for the localhost server:</p> <pre><code>location /nginx-status {\n    stub_status on;\n    access_log  off;\n    allow 127.0.0.1;\n    allow ::1;\n    deny  all;\n}\n</code></pre>"},{"location":"Extensions/Applications/NGINX/#agent-or-snmp-extend","title":"Agent or SNMP Extend","text":"SNMP ExtendAgent <ol> <li> <p>Download the script onto the desired host.</p> <pre><code>wget https://raw.githubusercontent.com/librenms/librenms-agent/master/snmp/nginx -O /etc/snmp/nginx\n</code></pre> </li> <li> <p>Make the script executable</p> <pre><code>chmod +x /etc/snmp/nginx\n</code></pre> </li> <li> <p>Edit your snmpd.conf file (usually /etc/snmp/snmpd.conf) and add:</p> <pre><code>extend nginx /etc/snmp/nginx\n</code></pre> </li> <li> <p>Restart snmpd on your host</p> </li> </ol> <p>The application should be auto-discovered as described at the top of the page. If it is not, please follow the steps set out under <code>SNMP Extend</code> heading top of page.</p> <p>Install the agent on this device if it isn't already and copy the <code>nginx</code> script to <code>/usr/lib/check_mk_agent/local/</code></p>"},{"location":"Extensions/Applications/NGINX/#selinux","title":"SELinux","text":"<p>(Optional) If you have SELinux in Enforcing mode, you must add a module so the script can request /nginx-status:</p> <pre><code>cat &lt;&lt; EOF &gt; snmpd_nginx.te\nmodule snmpd_nginx 1.0;\n\nrequire {\n        type httpd_t;\n        type http_port_t;\n        type snmpd_t;\n        class tcp_socket name_connect;\n}\n\n#============= snmpd_t ==============\n\nallow snmpd_t http_port_t:tcp_socket name_connect;\nEOF\ncheckmodule -M -m -o snmpd_nginx.mod snmpd_nginx.te\nsemodule_package -o snmpd_nginx.pp -m snmpd_nginx.mod\nsemodule -i snmpd_nginx.pp\n</code></pre>"},{"location":"Extensions/Applications/NTP%20Client/","title":"NTP Client","text":"<p>A shell script that gets stats from ntp client.</p>"},{"location":"Extensions/Applications/NTP%20Client/#snmp-extend","title":"SNMP Extend","text":"<ol> <li> <p>Download the script onto the desired host.</p> <pre><code>wget https://raw.githubusercontent.com/librenms/librenms-agent/master/snmp/ntp-client -O /etc/snmp/ntp-client\n</code></pre> </li> <li> <p>Make the script executable</p> <pre><code>chmod +x /etc/snmp/ntp-client\n</code></pre> </li> <li> <p>Edit your snmpd.conf file (usually /etc/snmp/snmpd.conf) and add:</p> <pre><code>extend ntp-client /etc/snmp/ntp-client\n</code></pre> </li> <li> <p>Restart snmpd on your host</p> <p>The application should be auto-discovered as described at the top of the page. If it is not, please follow the steps set out under <code>SNMP Extend</code> heading top of page.</p> </li> </ol>"},{"location":"Extensions/Applications/NTP%20Server/","title":"NTP Server aka NTPD","text":"<p>A shell script that gets stats from ntp server (ntpd).</p>"},{"location":"Extensions/Applications/NTP%20Server/#snmp-extend","title":"SNMP Extend","text":"<ol> <li> <p>Download the script onto the desired host.</p> <pre><code>wget https://raw.githubusercontent.com/librenms/librenms-agent/master/snmp/ntp-server.sh -O /etc/snmp/ntp-server.sh\n</code></pre> </li> <li> <p>Make the script executable</p> <pre><code>chmod +x /etc/snmp/ntp-server.sh\n</code></pre> </li> <li> <p>Edit your snmpd.conf file (usually <code>/etc/snmp/snmpd.conf</code>) and add:</p> <pre><code>extend ntp-server /etc/snmp/ntp-server.sh\n</code></pre> </li> <li> <p>Restart snmpd on your host</p> <pre><code>sudo systemctl restart snmpd\n</code></pre> <p>The application should be auto-discovered as described at the top of the page. If it is not, please follow the steps set out under <code>SNMP Extend</code> heading top of page.</p> </li> </ol>"},{"location":"Extensions/Applications/Nextcloud/","title":"Nextcloud","text":""},{"location":"Extensions/Applications/Nextcloud/#install-prereqs","title":"Install prereqs","text":"Debian/UbuntuCentOS/RedHatFreeBSDGeneric <pre><code>apt-get install libjson-perl libfile-slurp-perl libmime-base64-perl cpanminus\ncpanm Time::Piece\n</code></pre> <pre><code>yum install perl-JSON perl-File-Slurp perl-MIME-Base64 perl-String-ShellQuote perl-Time-Piece\n</code></pre> <pre><code>pkg install p5-JSON p5-File-Slurp p5-MIME-Base64 p5-Time-Piece   \n</code></pre> <pre><code>cpanm JSON File::Slurp MIME::Base64 String::ShellQuote Time::Piece\n</code></pre>"},{"location":"Extensions/Applications/Nextcloud/#snmp-extend","title":"SNMP Extend","text":"<ol> <li> <p>Copy the shell script to the desired host.</p> <pre><code>wget https://raw.githubusercontent.com/librenms/librenms-agent/master/snmp/nextcloud -O /etc/snmp/nextcloud\n</code></pre> </li> <li> <p>Make the script executable</p> <pre><code>chmod +x /etc/snmp/nextcloud\n</code></pre> </li> <li> <p>Create the cache dir and chown it to the user Nextcloud is running    as.</p> <pre><code>mkdir /var/cache/nextcloud_extend\nchown -R $nextcloud_user /var/cache/nextcloud_extend\n</code></pre> </li> <li> <p>Set it up in the crontab for the Nextcloud user using <code>-i</code> to point    it to the Nextcloud install dir.</p> <pre><code>*/5 * * * * /etc/snmpd/nextcloud -q -i $install_dir\n</code></pre> </li> <li> <p>Add it to snmpd.conf</p> <pre><code>extend nextcloud /bin/cat /var/cache/nextcloud_extend/snmp\n</code></pre> </li> </ol> <p>Then just wait for it to be rediscovered.</p>"},{"location":"Extensions/Applications/Nvidia%20GPU/","title":"Nvidia GPU","text":""},{"location":"Extensions/Applications/Nvidia%20GPU/#nvidia-gpu","title":"Nvidia GPU","text":""},{"location":"Extensions/Applications/Nvidia%20GPU/#snmp-extend","title":"SNMP Extend","text":"<ol> <li> <p>Copy the shell script, nvidia, to the desired host</p> <pre><code>wget https://github.com/librenms/librenms-agent/raw/master/snmp/nvidia -O /etc/snmp/nvidia\n</code></pre> </li> <li> <p>Make the script executable</p> <pre><code>chmod +x /etc/snmp/nvidia\n</code></pre> </li> <li> <p>Edit your snmpd.conf file and add:</p> <pre><code>extend nvidia /etc/snmp/nvidia\n</code></pre> </li> <li> <p>Restart snmpd on your host.</p> <pre><code>sudo systemctl restart snmpd\n</code></pre> </li> <li> <p>Verify you have nvidia-smi installed, which it generally should be if you have the driver from Nvida installed.</p> <p>The GPU numbering on the graphs will correspond to how the nvidia-smi sees them as being.</p> <p>For questions about what the various values are/mean, please see the nvidia-smi man file under the section covering dmon.</p> </li> </ol>"},{"location":"Extensions/Applications/OS%20Level%20Virtualization%20Monitoring/","title":"OS Level Virtualization Monitoring","text":"OS Supported FreeBSD jails Linux cgroups v2(Docker, Podman included)"},{"location":"Extensions/Applications/OS%20Level%20Virtualization%20Monitoring/#install-prereqs","title":"Install prereqs","text":"Debian/UbuntuFreeBSDGeneric <pre><code>apt-get install libjson-perl libclone-perl libmime-base64-perl libfile-slurp-perl libio-interface-perl cpanminus\ncpanm OSLV::Monitor\n</code></pre> <pre><code>pkg install p5-OSLV-Monitor\n</code></pre> <pre><code>cpanm JSON Clone Mime::Base64 File::Slurp IO::Interface\ncpanm OSLV::Monitor\n</code></pre>"},{"location":"Extensions/Applications/OS%20Level%20Virtualization%20Monitoring/#snmp-extend","title":"SNMP Extend","text":"<ol> <li> <p>Setup cron.</p> <pre><code>*/5 * * * * /usr/local/bin/oslv_monitor -q &gt; /dev/null 2&gt; /dev/null\n</code></pre> </li> <li> <p>Setup snmpd.</p> <pre><code>extend oslv_monitor /bin/cat /var/cache/oslv_monitor/snmp\n</code></pre> </li> <li> <p>Restart snmpd.</p> <pre><code>sudo systemctl restart snmpd\n</code></pre> </li> </ol> <p>Wait for it to be rediscovered by LibreNMS.</p> <p>An optional config file may be specified via -f or placed at <code>/usr/local/etc/oslv_monitor.json</code>.</p> <p>The following keys are used in the JSON config file.</p> Option Description Default include An array of regular expressions to include. [\"^.*$\"] exclude An array of regular expressions to exclude. undef backend Override the backend and automatically choose it. time_divider Override the time_divider value. see chapter under Time divider."},{"location":"Extensions/Applications/OS%20Level%20Virtualization%20Monitoring/#time-divider","title":"Time divider","text":"<p>The default value varies per backend and if it is needed. </p> <p>cgroups</p> <p>While the default for usec to sec conversion should be <code>1000000</code>, some settings report the value in nanoseconds, requiring <code>1000000000</code>.</p> Backend Time Divider Default cgroups usec to sec 1000000 FreeBSD Not used"},{"location":"Extensions/Applications/OS%20Level%20Virtualization%20Monitoring/#backend","title":"Backend","text":"<p>By Defaults the backends are as below.</p> Backend Default FreeBSD FreeBSD Linux cgroups"},{"location":"Extensions/Applications/OS%20Level%20Virtualization%20Monitoring/#default-would-be-like-this","title":"Default would be like this.","text":"<pre><code>{\n  \"include\": [\"^.*$\"]\n}\n</code></pre>"},{"location":"Extensions/Applications/OS%20Level%20Virtualization%20Monitoring/#metric-notes","title":"Metric Notes","text":"Key Description <code>running_$name</code> 0 or 1 based on if it is running or not. <code>oslvm___$name___$stat</code> The a specific stat for a specific OSLVMs. <code>totals_$stat</code> A stat representing a total for all stats across all OSLVMs. <p>Something is considered not running if it has been seen. How long something is considred to have been seen is controlled by <code>apps.oslv_monitor.seen_age</code>, which is the number of seconds ago it would of have to be seen. The default is <code>604800</code> which is seven days in seconds.</p> <p>All time values are in seconds.</p> <p>All counter stats are per second values for that time period.</p>"},{"location":"Extensions/Applications/OS%20Level%20Virtualization%20Monitoring/#backend-notes","title":"Backend Notes","text":""},{"location":"Extensions/Applications/OS%20Level%20Virtualization%20Monitoring/#freebsd","title":"FreeBSD","text":"<p>The stats names match those produced by <code>ps --libxo json</code>.</p>"},{"location":"Extensions/Applications/OS%20Level%20Virtualization%20Monitoring/#linux-cgroups-v2","title":"Linux cgroups v2","text":"<p>The cgroup to name mapping is done like below.</p> Input Output systemd s_$name user u_$name docker d_$name podman p_$name anything else $name <p>The following <code>ps</code> to stats mapping are as below.</p> <code>ps</code> stats %cpu percent-cpu %mem percent-memory rss rss vsize virtual-size trs text-size drs data-size size size <p><code>procs</code> is a total number of procs in that cgroup.</p> <p>The rest of the values are pulled from the following files with the names kept as is.</p> <ul> <li>cpu.stat</li> <li>io.stat</li> <li>memory.stat</li> </ul> <p>The following mappings are done though.</p> <p>The following mappings are done though.</p> cgroupv2 stats pgfault minor-faults pgmajfault major-faults usage_usec cpu-time system_usec system-time user_usec user-time throttled_usecs throttled-time"},{"location":"Extensions/Applications/OS%20Updates/","title":"OS Updates","text":"<p>A small shell script that checks your system package manager for any available updates. Supports <code>apt-get</code>/<code>pacman</code>/<code>yum</code>/<code>zypper</code> package managers.</p> <p>For pacman users automatically refreshing the database, it is recommended you use an alternative database location <code>--dbpath=/var/lib/pacman/checkupdate</code></p>"},{"location":"Extensions/Applications/OS%20Updates/#agent-or-snmp-extend","title":"Agent or SNMP Extend","text":"SNMP ExtendAgent <ol> <li> <p>Download the script onto the desired host.</p> <pre><code>wget https://raw.githubusercontent.com/librenms/librenms-agent/master/snmp/osupdate -O /etc/snmp/osupdate\n</code></pre> </li> <li> <p>Make the script executable</p> <pre><code>chmod +x /etc/snmp/osupdate\n</code></pre> </li> <li> <p>Edit your snmpd.conf file (usually <code>/etc/snmp/snmpd.conf</code>) and add:</p> <pre><code>extend osupdate /etc/snmp/osupdate\n</code></pre> </li> <li> <p>Restart snmpd on your host</p> <pre><code>sudo systemctl restart snmpd\n</code></pre> </li> </ol> <p>Debian/Ubuntu Apt</p> <p>The apt-get depends on an updated package index. There are several ways to have your system run <code>apt-get update</code> automatically. </p> <p>The easiest is to create <code>/etc/apt/apt.conf.d/10periodic</code> and pasting the following in it: </p> <pre><code>APT::Periodic::Update-Package-Lists \"1\"; \n</code></pre> <p>If you have <code>apticron</code>, <code>cron-apt</code> or <code>apt-listchanges</code> installed and configured, chances are that packages are already updated periodically .</p> <p>The application should be auto-discovered as described at the top of the page. If it is not, please follow the steps set out under <code>SNMP Extend</code> heading top of page.</p> <p>Install the agent on this device if it isn't already and copy the <code>osupdate</code> script to <code>/usr/lib/check_mk_agent/local/</code></p> <p>Then uncomment the line towards the top marked to be uncommented if using it as a agent.</p>"},{"location":"Extensions/Applications/Open%20Grid%20Scheduler/","title":"Open Grid Scheduler","text":""},{"location":"Extensions/Applications/Open%20Grid%20Scheduler/#open-grid-scheduler","title":"Open Grid Scheduler","text":"<p>Shell script to track the OGS/GE jobs running on clusters.</p>"},{"location":"Extensions/Applications/Open%20Grid%20Scheduler/#snmp-extend","title":"SNMP Extend","text":"<ol> <li> <p>Download the script onto the desired host.</p> <pre><code>wget https://raw.githubusercontent.com/librenms/librenms-agent/master/agent-local/rocks.sh -O /etc/snmp/rocks.sh\n</code></pre> </li> <li> <p>Make the script executable</p> <pre><code>chmod +x /etc/snmp/rocks.sh\n</code></pre> </li> <li> <p>Edit your snmpd.conf file (usually <code>/etc/snmp/snmpd.conf</code>) and add:</p> <pre><code>extend ogs /etc/snmp/rocks.sh\n</code></pre> </li> <li> <p>Restart snmpd.</p> <p>The application should be auto-discovered as described at the top of the page. If it is not, please follow the steps set out under <code>SNMP Extend</code> heading top of page.</p> </li> </ol>"},{"location":"Extensions/Applications/Opensearch/","title":"Opensearch\\Elasticsearch","text":""},{"location":"Extensions/Applications/Opensearch/#install-prereqs","title":"Install prereqs","text":"Debian/UbuntuFreeBSDGeneric <pre><code>apt-get install libjson-perl libfile-slurp-perl liblwp-protocol-https-perl libmime-base64-perl\n</code></pre> <pre><code>pkg install p5-JSON p5-File-Slurp p5-LWP-Protocol-https p5-MIME-Base64\n</code></pre> <pre><code>cpanm JSON Libwww File::Slurp LWP::Protocol::HTTPS MIME::Base64\n</code></pre>"},{"location":"Extensions/Applications/Opensearch/#snmp-extend","title":"SNMP Extend","text":"<ol> <li> <p>Download the script onto the desired host.</p> <pre><code>wget https://raw.githubusercontent.com/librenms/librenms-agent/master/snmp/opensearch -O /etc/snmp/opensearch\n</code></pre> </li> <li> <p>Make it executable</p> <pre><code>chmod +x /etc/snmp/opensearch\n</code></pre> </li> <li> <p>Update your <code>snmpd.conf</code>.</p> <p>Can be directly or via cron. It recommended to use cron if under heavy load it time out waiting for Opensearch.</p> If not using cronIf using cron <pre><code>extend opensearch /etc/snmp/opensearch\n</code></pre> <pre><code>extend opensearch /bin/cat /var/cache/opensearch.json.snmp\n</code></pre> <p>Update root crontab with. This is required as it will this will likely time out otherwise. Use <code>*/1</code> if you want to have the most recent stats when polled or to <code>*/5</code> if you just want at exactly a 5 minute interval.</p> <pre><code>*/5 * * * * /etc/snmp/opensearch -w -q\n</code></pre> </li> <li> <p>Restart snmpd on your host.</p> <pre><code>sudo systemctl restart snmpd\n</code></pre> </li> <li> <p>Enable it or wait for the device to be re-disocvered.</p> </li> </ol>"},{"location":"Extensions/Applications/Opensips/","title":"Opensips","text":"<p>Script that reports load-average/memory/open-files stats of Opensips</p>"},{"location":"Extensions/Applications/Opensips/#snmp-extend","title":"SNMP Extend","text":"<ol> <li> <p>Download the script onto the desired host</p> <pre><code>wget https://raw.githubusercontent.com/librenms/librenms-agent/master/snmp/opensips-stats.sh -O /etc/snmp/opensips-stats.sh\n</code></pre> </li> <li> <p>Make the script executable:</p> <pre><code>chmod +x /etc/snmp/opensips-stats.sh\n</code></pre> </li> <li> <p>Verify it is working by running <code>/etc/snmp/opensips-stats.sh</code></p> </li> <li> <p>Edit your snmpd.conf file (usually <code>/etc/snmp/snmpd.conf</code>) and add:</p> <pre><code>extend opensips /etc/snmp/opensips-stats.sh\n</code></pre> </li> </ol>"},{"location":"Extensions/Applications/PHP-FPM/","title":"PHP-FPM","text":"<p>A small shell script that reports the status of PHP-FPM (FastCGI Process Manager).</p>"},{"location":"Extensions/Applications/PHP-FPM/#install-prereqs","title":"Install prereqs","text":"Debian/UbuntuFreeBSDFedora <pre><code>apt-get install libfile-slurp-perl libjson-perl libstring-shellquote-perl libmime-base64-perl\n</code></pre> <pre><code>pkg install p5-File-Slurp p5-JSON p5-String-ShellQuote p5-MIME-Base64\n</code></pre> <pre><code>dnf install perl-JSON perl-File-Slurp perl-String-ShellQuote\n</code></pre>"},{"location":"Extensions/Applications/PHP-FPM/#agent-or-snmp-extend","title":"Agent or SNMP Extend","text":"SNMP ExtendAgent <ol> <li> <p>Copy the shell script, phpfpmsp, to the desired host</p> <pre><code>wget https://github.com/librenms/librenms-agent/raw/master/snmp/php-fpm -O /etc/snmp/php-fpm\n</code></pre> </li> <li> <p>Make the script executable</p> <pre><code>chmod +x /etc/snmp/php-fpm\n</code></pre> </li> <li> <p>Edit your snmpd.conf file (usually /etc/snmp/snmpd.conf) and add: <pre><code>extend phpfpmsp /etc/snmp/php-fpm\n</code></pre></p> </li> <li> <p>Create the config file <code>/usr/local/etc/php-fpm_extend.json</code>. Alternate locations may be specified using the the <code>-f</code> switch. Akin to like below. For more information, see <code>/etc/snmp/php-fpm --help</code>.</p> <pre><code>{\n\"pools\":{\n        \"thefrog\": \"https://thefrog/fpm-status\",\n        \"foobar\": \"https://foo.bar/fpm-status\"\n    }\n}\n</code></pre> </li> <li> <p>Restart snmpd on the host</p> <pre><code>sudo systemctl restart snmpd\n</code></pre> <p>The application should be auto-discovered as described at the top of the page. If it is not, please follow the steps set out under <code>SNMP Extend</code> heading top of page.</p> </li> </ol> <p>Install the agent on this device if it isn't already and copy the <code>phpfpmsp</code> script to <code>/usr/lib/check_mk_agent/local/</code></p>"},{"location":"Extensions/Applications/Pi-hole/","title":"Pi hole","text":""},{"location":"Extensions/Applications/Pi-hole/#pi-hole","title":"Pi-hole","text":"<p>Pi-hole is a DNS server that can be used to block ads and other unwanted content.  This script reports the status of Pi-hole.</p>"},{"location":"Extensions/Applications/Pi-hole/#snmp-extend","title":"SNMP Extend","text":"<ol> <li> <p>Copy the shell script, pi-hole, to the desired host.</p> <pre><code>wget https://github.com/librenms/librenms-agent/raw/master/snmp/pi-hole -O /etc/snmp/pi-hole\n</code></pre> </li> <li> <p>Make the script executable</p> <pre><code>chmod +x /etc/snmp/pi-hole\n</code></pre> </li> <li> <p>Edit your snmpd.conf file and add:</p> <pre><code>extend pi-hole /etc/snmp/pi-hole\n</code></pre> </li> <li> <p>To get all data you must get your <code>API auth token</code> from Pi-hole server and change the <code>API_AUTH_KEY</code> entry inside the snmp script.</p> </li> <li> <p>Restard snmpd.</p> <pre><code>sudo systemctl restart snmpd\n</code></pre> <p>The application should be auto-discovered as described at the top of the page. If it is not, please follow the steps set out under <code>SNMP Extend</code> heading top of page.</p> </li> </ol>"},{"location":"Extensions/Applications/Portactivity/","title":"Portactivity","text":""},{"location":"Extensions/Applications/Portactivity/#portactivity","title":"Portactivity","text":""},{"location":"Extensions/Applications/Portactivity/#snmp-extend","title":"SNMP Extend","text":"<ol> <li> <p>Install missing packages - Ubuntu is shown below.</p> <pre><code>apt install libparse-netstat-perl\napt install libjson-perl\n</code></pre> </li> <li> <p>Copy the Perl script to the desired host (the host must be added to LibreNMS devices)</p> <pre><code>wget https://github.com/librenms/librenms-agent/raw/master/snmp/portactivity -O /etc/snmp/portactivity\n</code></pre> </li> <li> <p>Make the script executable</p> <pre><code>chmod +x /etc/snmp/portactivity\n</code></pre> </li> <li> <p>Edit your <code>snmpd.conf</code> file (usually <code>/etc/snmp/snmpd.conf</code>) and add:</p> <pre><code>extend portactivity /etc/snmp/portactivity -p http,ldap,imap\n</code></pre> </li> </ol> <p>portactivity</p> <p>Will monitor HTTP, LDAP, and IMAP. The <code>-p</code> switch specifies what ports to use. This is a comma seperated list.</p> <p>These must be found in '/etc/services' or where ever NSS is set to fetch it from. If not, it will throw an error.</p> <p>If you want to JSON returned by it to be printed in a pretty format use the <code>-P</code> flag.</p> <ol> <li> <p>Restart snmpd on your host.</p> <pre><code>sudo systemctl restart snmpd\n</code></pre> </li> </ol> <p>Please note that for only TCP[46] services are supported.</p>"},{"location":"Extensions/Applications/Postfix/","title":"Postfix","text":""},{"location":"Extensions/Applications/Postfix/#postfix","title":"Postfix","text":""},{"location":"Extensions/Applications/Postfix/#snmp-extend","title":"SNMP Extend","text":"<ol> <li> <p>Copy the shell script, postfix-queues, to the desired host</p> <pre><code>wget https://github.com/librenms/librenms-agent/raw/master/snmp/postfix-queues -O /etc/snmp/postfix-queues\n</code></pre> </li> <li> <p>Copy the Perl script, postfixdetailed, to the desired host</p> <pre><code>wget https://github.com/librenms/librenms-agent/raw/master/snmp/postfixdetailed -O /etc/snmp/postfixdetailed\n</code></pre> </li> <li> <p>Make both scripts executable</p> <pre><code>chmod +x /etc/snmp/postfixdetailed /etc/snmp/postfix-queues\n</code></pre> </li> <li> <p>Edit your snmpd.conf file and add:</p> <pre><code>extend mailq /etc/snmp/postfix-queues\nextend postfixdetailed /etc/snmp/postfixdetailed\n</code></pre> </li> <li> <p>Restart snmpd.</p> <pre><code>sudo systemctl restart snmpd\n</code></pre> </li> <li> <p>Install pflogsumm for your OS.</p> </li> <li> <p>Make sure the cache file in <code>/etc/snmp/postfixdetailed</code> is some place that snmpd can write too. This file is used for tracking changes between various values between each time it is called by snmpd. Also make sure the path for pflogsumm is correct.</p> </li> <li> <p>Run <code>/etc/snmp/postfixdetailed</code> to create the initial cache file so you don't end up with some crazy initial starting value. </p> </li> </ol> <p>Note</p> <p>that each time <code>/etc/snmp/postfixdetailed</code> is ran, the cache file is updated, so if this happens in between LibreNMS doing it then the values will be thrown off for that polling period.</p> <p>The application should be auto-discovered as described at the top of the page. If it is not, please follow the steps set out under <code>SNMP Extend</code> heading top of page.</p> <p>Note</p> <p>If using RHEL for your postfix server, <code>qshape</code> must be installed manually as it is not officially supported. CentOs 6 rpms seem to work without issues.</p>"},{"location":"Extensions/Applications/Postgres/","title":"Postgres","text":""},{"location":"Extensions/Applications/Postgres/#snmp-extend","title":"SNMP Extend","text":"<ol> <li> <p>Copy the shell script, postgres, to the desired host</p> <pre><code>wget https://github.com/librenms/librenms-agent/raw/master/snmp/postgres -O /etc/snmp/postgres\n</code></pre> </li> <li> <p>Make the script executable</p> <pre><code>chmod +x /etc/snmp/postgres\n</code></pre> </li> <li> <p>Edit your snmpd.conf file and add:</p> <pre><code>extend postgres /etc/snmp/postgres\n</code></pre> </li> <li> <p>Restart snmpd on your host</p> </li> <li> <p>Install the Nagios check <code>check_postgres.pl</code> on your system: https://github.com/bucardo/check_postgres</p> </li> <li> <p>Verify the path to <code>check_postgres.pl</code> in <code>/etc/snmp/postgres</code> is correct.</p> </li> <li> <p>(Optional) If you wish to change the DB username (default: <code>pgsql</code>), enable the postgres DB in totalling (e.g. set ignorePG to 0, default: 1), or set a hostname for <code>check_postgres.pl</code> to connect to (default: the Unix Socket <code>postgresql</code> is running on), then create the file <code>/etc/snmp/postgres.config</code> with the following contents (note that not all of them need be defined, just whichever you'd like to change):</p> </li> </ol> <pre><code>DBuser=monitoring\nignorePG=0\nDBhost=localhost\n</code></pre> <p>Note that if you are using netdata or the like, you may wish to set ignorePG to 1 or otherwise that total will be very skewed on systems with light or moderate usage.</p> <p>The application should be auto-discovered as described at the top of the page. If it is not, please follow the steps set out under <code>SNMP Extend</code> heading top of page.</p>"},{"location":"Extensions/Applications/Poudriere/","title":"Poudriere","text":""},{"location":"Extensions/Applications/Poudriere/#intall-prerequisites","title":"Intall prerequisites","text":"FreeBSD <pre><code>pkg install p5-Data-Dumper p5-JSON p5-MIME-Base64 p5-File-Slurp\n</code></pre>"},{"location":"Extensions/Applications/Poudriere/#snmp-extend","title":"SNMP Extend","text":"<ol> <li> <p>Copy the extend into place</p> <pre><code>wget https://github.com/librenms/librenms-agent/raw/master/snmp/poudriere -O /usr/local/etc/snmp/poudriere\n</code></pre> </li> <li> <p>Make it executable.</p> <pre><code>chmod +x /usr/local/etc/snmp/poudriere\n</code></pre> </li> <li> <p>Setup the cronjob. The extend needs to be ran as root. See <code>poudriere --help</code> for option info.     <pre><code>4/5 * * * * root /usr/local/etc/snmp/poudriere -q -a -w -z\n</code></pre></p> </li> <li> <p>Add the extend to snmpd.conf and restart snmpd     <pre><code>extend poudriere cat /var/cache/poudriere.json.snmp\n</code></pre></p> </li> </ol>"},{"location":"Extensions/Applications/PowerDNS%20Recursor/","title":"PowerDNS Recursor","text":"<p>A recursive DNS server: https://www.powerdns.com/recursor.html</p>"},{"location":"Extensions/Applications/PowerDNS%20Recursor/#direct-agent-or-snmp-extend","title":"Direct, Agent or SNMP Extend","text":"DirectAgentSNMP Extend <p>The LibreNMS polling host must be able to connect to port 8082 on the monitored device. The web-server must be enabled, see the Recursor docs: https://doc.powerdns.com/md/recursor/settings/#webserver</p> <p>Install the agent on this device if it isn't already and copy the <code>powerdns-recursor</code> script to <code>/usr/lib/check_mk_agent/local/</code></p> <p>This script uses <code>rec_control get-all</code> to collect stats.</p> <ol> <li>Copy the shell script, powerdns-recursor, to the desired host</li> </ol> <pre><code>wget https://github.com/librenms/librenms-agent/raw/master/snmp/powerdns-recursor -O /etc/snmp/powerdns-recursor\n</code></pre> <ol> <li>Make the script executable</li> </ol> <pre><code>chmod +x /etc/snmp/powerdns-recursor\n</code></pre> <ol> <li>Edit your snmpd.conf file and add:</li> </ol> <pre><code>extend powerdns-recursor /etc/snmp/powerdns-recursor\n</code></pre> <ol> <li>Restart snmpd on your host</li> </ol> <p>The application should be auto-discovered as described at the top of the page. If it is not, please follow the steps set out under <code>SNMP Extend</code> heading top of page.</p>"},{"location":"Extensions/Applications/PowerDNS%20Recursor/#variables","title":"Variables","text":"<p><code>$config['apps']['powerdns-recursor']['api-key']</code> required, this is defined in the Recursor config</p> <p><code>$config['apps']['powerdns-recursor']['port']</code> numeric, defines the port to connect to PowerDNS Recursor on.  The default is 8082</p> <p><code>$config['apps']['powerdns-recursor']['https']</code> true or false, defaults to use http.</p>"},{"location":"Extensions/Applications/PowerDNS-dnsdist/","title":"PowerDNS dnsdist","text":""},{"location":"Extensions/Applications/PowerDNS-dnsdist/#powerdns-dnsdist","title":"PowerDNS-dnsdist","text":""},{"location":"Extensions/Applications/PowerDNS-dnsdist/#snmp-extend","title":"SNMP Extend","text":"<ol> <li> <p>Copy the BASH script to the desired host. <pre><code>wget https://github.com/librenms/librenms-agent/raw/master/snmp/powerdns-dnsdist -O /etc/snmp/powerdns-dnsdist\n</code></pre></p> </li> <li> <p>Make the script executable <pre><code>chmod +x /etc/snmp/powerdns-dnsdist\n</code></pre></p> </li> <li> <p>Edit your snmpd.conf file (usually /etc/snmp/snmpd.conf) and add: <pre><code>extend powerdns-dnsdist /etc/snmp/powerdns-dnsdist\n</code></pre></p> </li> <li> <p>Restart snmpd on your host.</p> </li> </ol> <p>The application should be auto-discovered as described at the top of the page. If it is not, please follow the steps set out under <code>SNMP Extend</code> heading top of page.</p>"},{"location":"Extensions/Applications/PowerDNS/","title":"PowerDNS","text":""},{"location":"Extensions/Applications/PowerDNS/#powerdns","title":"PowerDNS","text":"<p>An authoritative DNS server: https://www.powerdns.com/auth.html</p> SNMP ExtendAgentPermissions <ol> <li>Copy the shell script, powerdns.py, to the desired host</li> </ol> <pre><code>wget https://github.com/librenms/librenms-agent/raw/master/snmp/powerdns.py -O /etc/snmp/powerdns.py\n</code></pre> <ol> <li>Make the script executable</li> </ol> <pre><code>chmod +x /etc/snmp/powerdns.py\n</code></pre> <ol> <li>Edit your snmpd.conf file and add:</li> </ol> <pre><code>extend powerdns /etc/snmp/powerdns.py\n</code></pre> <ol> <li>Restart snmpd on your host</li> </ol> <p>The application should be auto-discovered as described at the top of the page. If it is not, please follow the steps set out under <code>SNMP Extend</code> heading top of page.</p> <p>Install the agent on this device if it isn't already</p> <p>and copy the <code>powerdns</code> script to <code>/usr/lib/check_mk_agent/local/</code></p> <p>If snmpd is running as an unpriveledged user, you may need to use sudo.    Here is a rough outline of one way to accomplish this.</p> <p>Add <code>Debian-snmp ALL=(ALL) NOPASSWD: /usr/bin/pdns_control list</code> to your sudoers file</p> <p>In powerdns.py, modify the process from <code>[pdnscontrol, \"list\"]</code> to <code>[\"/usr/bin/sudo\", pdnscontrol, \"list\"]</code></p>"},{"location":"Extensions/Applications/PowerMon/","title":"PowerMon","text":"<p>PowerMon tracks the power usage on your host and can report on both consumption and cost, using a python script installed on the host.</p> <p>PowerMon consumption graph</p> <p>Currently the script uses one of two methods to determine current power usage:</p> <ul> <li> <p>ACPI via <code>libsensors</code></p> </li> <li> <p><code>HP-Health</code> (HP Proliant servers only)</p> </li> </ul> <p>The ACPI method is quite unreliable as it is usually only implemented by battery-powered devices, e.g. laptops. YMMV. However, it's possible to support any method as long as it can return a power value, usually in Watts.</p> <p>Tip</p> <p>You can achieve this by adding a method and a function for that method to the script. It should be called by getData() and return a dictionary.</p> <p>Because the methods are unreliable for all hardware, you need to declare to the script which method to use. The are several options to assist with testing, see the <code>--help</code>.</p>"},{"location":"Extensions/Applications/PowerMon/#snmp-extend","title":"SNMP Extend","text":""},{"location":"Extensions/Applications/PowerMon/#initial-setup","title":"Initial setup","text":"<ol> <li> <p>Download the python script onto the host:</p> <pre><code>wget https://raw.githubusercontent.com/librenms/librenms-agent/master/snmp/powermon-snmp.py -O /usr/local/bin/powermon-snmp.py\n</code></pre> </li> <li> <p>Make the script executable:</p> <pre><code>chmod +x /usr/local/bin/powermon-snmp.py\n</code></pre> </li> <li> <p>Edit the script and set the cost per kWh for your supply. You must uncomment this line for the script to work: <pre><code>vi /usr/local/bin/powermon-snmp.py\n#costPerkWh = 0.15\n</code></pre></p> </li> <li> <p>Choose you method below:</p> Method 1. sensorsMethod 2. hpasmcli <ul> <li> <p>Install dependencies: <pre><code>dnf install lm_sensors\npip install PySensors\n</code></pre></p> </li> <li> <p>Test the script from the command-line. For example: <pre><code>$ /usr/local/bin/powermon-snmp.py -m sensors -n -p\n{\n  \"meter\": {\n    \"0\": {\n      \"reading\": 0.0\n    }\n  },\n  \"psu\": {},\n  \"supply\": {\n    \"rate\": 0.15\n  },\n  \"reading\": \"0.0\"\n}\n</code></pre></p> </li> </ul> <p>If you see a reading of <code>0.0</code> it is likely this method is not supported for your system. If not, continue.</p> <ul> <li> <p>Obtain the hp-health package for your system. Generally there are three options:</p> <ul> <li>Standalone package from HPE Support</li> <li>From the HP Management Component Pack (MCP).</li> <li>Included in the HP Service Pack for Proliant (SPP)</li> </ul> </li> <li> <p>If you've downloaded the standalone package, install it. For example: <pre><code>rpm -ivh hp-health-10.91-1878.11.rhel8.x86_64.rpm\n</code></pre></p> </li> <li> <p>Check the service is running: <pre><code>systemctl status hp-health\n</code></pre></p> </li> <li> <p>Test the script from the command-line. For example: <pre><code>$ /usr/local/bin/powermon-snmp.py -m hpasmcli -n -p\n{\n  \"meter\": {\n    \"1\": {\n      \"reading\": 338.0\n    }\n  },\n  \"psu\": {\n    \"1\": {\n      \"present\": \"Yes\",\n      \"redundant\": \"No\",\n      \"condition\": \"Ok\",\n      \"hotplug\": \"Supported\",\n      \"reading\": 315.0\n    },\n    \"2\": {\n      \"present\": \"Yes\",\n      \"redundant\": \"No\",\n      \"condition\": \"FAILED\",\n      \"hotplug\": \"Supported\"\n    }\n  },\n  \"supply\": {\n    \"rate\": 0.224931\n  },\n  \"reading\": 338.0\n}\n</code></pre></p> </li> </ul> <p>If you see a reading of <code>0.0</code> it is likely this method is not supported for your system. If not, continue.</p> </li> </ol>"},{"location":"Extensions/Applications/PowerMon/#finishing-up","title":"Finishing Up","text":"<ol> <li> <p>Edit your snmpd.conf file (usually <code>/etc/snmp/snmpd.conf</code>) and add the following: <pre><code>extend  powermon   /usr/local/bin/powermon-snmp.py -m hpasmcli\n</code></pre></p> <p>NOTE: Avoid using other script options in the snmpd config as the results may not be interpreted correctly by LibreNMS.</p> </li> <li> <p>Reload your snmpd service: <pre><code>systemctl reload snmpd\n</code></pre></p> </li> <li> <p>You're now ready to enable the application in LibreNMS.</p> </li> </ol>"},{"location":"Extensions/Applications/Privoxy/","title":"Privoxy","text":"<p>For this to work, the following log items need enabled for Privoxy.</p> <pre><code>debug     2 # show each connection status\ndebug   512 # Common Log Format\ndebug  1024 # Log the destination for requests Privoxy didn't let through, and the reason why.\ndebug  4096 # Startup banner and warnings\ndebug  8192 # Non-fatal errors\n</code></pre>"},{"location":"Extensions/Applications/Privoxy/#install-prerequisites","title":"Install prerequisites","text":"Debian/UbuntuFreeBSDGeneric <pre><code>apt-get install libjson-perl libmime-base64-perl libfile-slurp-perl libfile-readbackwards-perl libipc-run3-perl cpanminus\ncpanm Time::Piece\n</code></pre> <pre><code>pkg install p5-JSON p5-MIME-Base64 p5-File-Slurp p5-File-ReadBackwards p5-IPC-Run3 p5-Time-Piece\n</code></pre> <pre><code>cpanm Time::Piece JSON MIME::Base64 File::Slurp File::ReadBackwards IPC::Run3\n</code></pre>"},{"location":"Extensions/Applications/Privoxy/#snmp-extend","title":"SNMP Extend","text":"<ol> <li> <p>Download the extend and make sure it is executable. <pre><code>wget https://github.com/librenms/librenms-agent/raw/master/snmp/privoxy -O /etc/snmp/privoxy\nchmod +x /etc/snmp/privoxy\n</code></pre></p> </li> <li> <p>Add the extend to snmpd.conf and restart snmpd.</p> </li> </ol> <pre><code>extend privoxy /etc/snmp/privoxy\n</code></pre> <p>If your logfile is not at <code>/var/log/privoxy/logfile</code>, that may be changed via the <code>-f</code> option.</p> <p>If <code>privoxy-log-parser.pl</code> is not found in your standard <code>$PATH</code> setting, you may will need up call the extend via <code>/usr/bin/env</code> with a <code>$PATH</code> set to something that includes it.</p> <p>Once that is done, just wait for the server to be rediscovered or just enable it manually.</p>"},{"location":"Extensions/Applications/Privoxy/#cron","title":"Cron","text":"<p>If you are having timeouts or there is privelege seperation issues, then it can be ran via cron like below. <code>-w</code> can be used to write it out and <code>-o</code> can be used to control where it is written to. See <code>--help</code> for more information.</p> <p>Add the following to your <code>/etc/crontab.d/librenms_privoxy</code>: </p> <pre><code>*/5 * * * * root /etc/snmp/privoxy -w &gt; /dev/null\n</code></pre> <p>Add/Change the following to your <code>/etc/snmp/snmpd.conf</code>:</p> <pre><code>extend privoxy /bin/cat /var/cache/privoxy_extend.json.snmp\n</code></pre>"},{"location":"Extensions/Applications/Proxmox/","title":"Proxmox","text":""},{"location":"Extensions/Applications/Proxmox/#install-prerequisites","title":"Install prerequisites","text":"Debian/Ubuntu <pre><code>apt install libpve-apiclient-perl\n</code></pre>"},{"location":"Extensions/Applications/Proxmox/#snmp-extend","title":"SNMP Extend","text":"<ol> <li> <p>Download the script onto the desired host</p> <pre><code>wget https://raw.githubusercontent.com/librenms/librenms-agent/master/agent-local/proxmox -O /usr/local/bin/proxmox\n</code></pre> </li> <li> <p>Make the script executable</p> <pre><code>chmod +x /usr/local/bin/proxmox\n</code></pre> </li> <li> <p>Edit your snmpd.conf file (usually <code>/etc/snmp/snmpd.conf</code>) and add:</p> <pre><code>extend proxmox /usr/local/bin/proxmox\n</code></pre> </li> <li> <p>Note: if your snmpd doesn't run as root, you might have to invoke    the script using sudo and modify the \"extend\" line</p> <pre><code>extend proxmox /usr/bin/sudo /usr/local/bin/proxmox\n</code></pre> <p>after, edit your sudo users (usually <code>visudo</code>) and add at the bottom:</p> <pre><code>Debian-snmp ALL=(ALL) NOPASSWD: /usr/local/bin/proxmox\n</code></pre> </li> <li> <p>Restart snmpd on your host</p> </li> </ol>"},{"location":"Extensions/Applications/Puppet%20Agent/","title":"Puppet Agent","text":"<p>SNMP extend script to get your Puppet Agent data into your host.</p>"},{"location":"Extensions/Applications/Puppet%20Agent/#snmp-extend","title":"SNMP Extend","text":"<ol> <li> <p>Download the script onto the desired host <pre><code>wget https://raw.githubusercontent.com/librenms/librenms-agent/master/snmp/puppet_agent.py -O /etc/snmp/puppet_agent.py\n</code></pre></p> </li> <li> <p>Make the script executable <pre><code>chmod +x /etc/snmp/puppet_agent.py\n</code></pre></p> </li> <li> <p>Edit your snmpd.conf file (usually <code>/etc/snmp/snmpd.conf</code>) and add: <pre><code>extend puppet-agent /etc/snmp/puppet_agent.py\n</code></pre></p> </li> </ol> <p>The Script needs <code>python3-yaml</code> package to be installed.</p> <p>Per default script searches for on of this files:</p> <ul> <li>/var/cache/puppet/state/last_run_summary.yaml</li> <li>/opt/puppetlabs/puppet/cache/state/last_run_summary.yaml</li> </ul> <p>optionally you can add a specific summary file with creating <code>/etc/snmp/puppet.json</code> <pre><code>{\n     \"agent\": {\n        \"summary_file\": \"/my/custom/path/to/summary_file\"\n     }\n}\n</code></pre> custom summary file has highest priority</p> <ol> <li>Restart snmpd on the host</li> </ol>"},{"location":"Extensions/Applications/PureFTPd/","title":"PureFTPd","text":"<p>SNMP extend script to monitor PureFTPd.</p>"},{"location":"Extensions/Applications/PureFTPd/#snmp-extend","title":"SNMP Extend","text":"<ol> <li> <p>Download the script onto the desired host</p> <pre><code>wget https://raw.githubusercontent.com/librenms/librenms-agent/master/snmp/pureftpd.py -O /etc/snmp/pureftpd.py\n</code></pre> </li> <li> <p>Make the script executable</p> <pre><code>chmod +x /etc/snmp/pureftpd.py\n</code></pre> </li> <li> <p>Edit your snmpd.conf file (usually <code>/etc/snmp/snmpd.conf</code>) and add:</p> <pre><code>extend pureftpd sudo /etc/snmp/pureftpd.py\n</code></pre> </li> <li> <p>Edit your sudo users (usually <code>visudo</code>) and add at the bottom:</p> <pre><code>snmp ALL=(ALL) NOPASSWD: /etc/snmp/pureftpd.py\n</code></pre> <p>or the path where your pure-ftpwho is located</p> </li> <li> <p>If pure-ftpwho is not located in /usr/sbin</p> <p>you will also need to create a config file, which is named <code>/etc/snmp/.pureftpd.json</code>: </p> <pre><code>{\"pureftpwho_cmd\": \"/usr/sbin/pure-ftpwho\"\n}\n</code></pre> </li> <li> <p>Restart snmpd on your host</p> </li> </ol>"},{"location":"Extensions/Applications/Pwrstatd/","title":"Pwrstatd","text":""},{"location":"Extensions/Applications/Pwrstatd/#pwrstatd","title":"Pwrstatd","text":"<p>Pwrstatd (commonly known as powerpanel) is an application/service available from CyberPower to monitor their PSUs over USB.  It is currently capable of reading the status of only one PSU connected via USB at a time.  The powerpanel software is available here: https://www.cyberpowersystems.com/products/software/power-panel-personal/</p>"},{"location":"Extensions/Applications/Pwrstatd/#snmp-extend","title":"SNMP Extend","text":"<ol> <li> <p>Copy the python script, pwrstatd.py, to the desired host</p> <pre><code>wget https://github.com/librenms/librenms-agent/raw/master/snmp/pwrstatd.py -O /etc/snmp/pwrstatd.py\n</code></pre> </li> <li> <p>Make the script executable</p> <pre><code>chmod +x /etc/snmp/pwrstatd.py\n</code></pre> </li> <li> <p>Edit your snmpd.conf file and add:</p> <pre><code>extend pwrstatd /etc/snmp/pwrstatd.py\n</code></pre> </li> <li> <p>(Optional) Create a <code>/etc/snmp/pwrstatd.json</code> file and specify the path to the pwrstat executable [the default path is <code>/sbin/pwrstat</code>]:</p> <pre><code>{\n    \"pwrstat_cmd\": \"/sbin/pwrstat\"\n}\n</code></pre> </li> <li> <p>Restart snmpd.</p> <pre><code>sudo systemctl restart snmpd\n</code></pre> </li> </ol>"},{"location":"Extensions/Applications/RRDCached/","title":"RRDCached","text":"<p>Install/Setup: For Install/Setup Local Librenms RRDCached: Please see RRDCached</p> <p>Will collect stats by: 1. Connecting directly to the associated device on port 42217 2. Monitor thru snmp with SNMP extend, as outlined below 3. Connecting to the rrdcached server specified by the <code>rrdcached</code> setting</p> <p>SNMP extend script to monitor your (remote) RRDCached via snmp</p>"},{"location":"Extensions/Applications/RRDCached/#snmp-extend","title":"SNMP Extend","text":"<ol> <li> <p>Download the script onto the desired host <pre><code>wget https://raw.githubusercontent.com/librenms/librenms-agent/master/agent-local/rrdcached -O /etc/snmp/rrdcached\n</code></pre></p> </li> <li> <p>Make the script executable <pre><code>chmod +x /etc/snmp/rrdcached\n</code></pre></p> </li> <li> <p>Edit your snmpd.conf file (usually <code>/etc/snmp/snmpd.conf</code>) and add: <pre><code>extend rrdcached /etc/snmp/rrdcached\n</code></pre></p> </li> </ol>"},{"location":"Extensions/Applications/Raspberry%20PI/","title":"Raspberry PI","text":"<p>SNMP extend script to get your PI data into your host.</p>"},{"location":"Extensions/Applications/Raspberry%20PI/#snmp-extend","title":"SNMP Extend","text":"<ol> <li> <p>Download the script onto the desired host</p> <pre><code>wget https://raw.githubusercontent.com/librenms/librenms-agent/master/snmp/raspberry.sh -O /etc/snmp/raspberry.sh\n</code></pre> </li> <li> <p>Make the script executable</p> <pre><code>chmod +x /etc/snmp/raspberry.sh\n</code></pre> </li> <li> <p>Edit your snmpd.conf file (usually <code>/etc/snmp/snmpd.conf</code>) and add:</p> <pre><code>extend raspberry /usr/bin/sudo /bin/sh /etc/snmp/raspberry.sh\n</code></pre> </li> <li> <p>Edit your sudo users (usually <code>visudo</code>) and add at the bottom:</p> <pre><code>snmp ALL=(ALL) NOPASSWD: /bin/sh /etc/snmp/raspberry.sh\n</code></pre> </li> </ol> <p>Note</p> <p>If you are using Raspian, the default user is <code>Debian-snmp</code>. Change <code>snmp</code> above to <code>Debian-snmp</code>. You can verify the user snmpd is using with <code>ps aux | grep snmpd</code></p> <ol> <li>Restart snmpd on PI host</li> </ol>"},{"location":"Extensions/Applications/Raspberry%20Pi%20GPIO%20Monitor/","title":"Raspberry Pi GPIO Monitor","text":""},{"location":"Extensions/Applications/Raspberry%20Pi%20GPIO%20Monitor/#raspberry-pi-gpio-monitor","title":"Raspberry Pi GPIO Monitor","text":"<p>SNMP extend script to monitor your IO pins or sensor modules connected to your GPIO header.</p>"},{"location":"Extensions/Applications/Raspberry%20Pi%20GPIO%20Monitor/#snmp-extend","title":"SNMP Extend","text":"<p>1: Make sure you have wiringpi installed on your Raspberry Pi. In Debian-based systems for example you can achieve this by issuing:</p> <pre><code>sudo apt-get install wiringpi\n</code></pre> <p>2: Download the script to your Raspberry Pi. </p> <pre><code>```bash\nwget https://raw.githubusercontent.com/librenms/librenms-agent/master/snmp/rpigpiomonitor.php\n-O /etc/snmp/rpigpiomonitor.php\n```\n</code></pre> <p>3: (optional) Download the example configuration to your Raspberry Pi. </p> <pre><code>```bash \nwget https://raw.githubusercontent.com/librenms/librenms-agent/master/snmp/rpigpiomonitor.ini\n-O /etc/snmp/rpigpiomonitor.ini\n```\n</code></pre> <p>4: Make the script executable: </p> <pre><code>```bash\nchmod +x /etc/snmp/rpigpiomonitor.php\n```\n</code></pre> <p>5: Create or edit your <code>rpigpiomonitor.ini</code> file according to your needs.</p> <p>6: Check your configuration with <code>rpigpiomonitor.php -validate</code></p> <p>7: Edit your snmpd.conf file (usually <code>/etc/snmp/snmpd.conf</code>) and add:</p> <pre><code>```bash\nextend rpigpiomonitor /etc/snmp/rpigpiomonitor.php\n```\n</code></pre> <p>8: Restart snmpd on your Raspberry Pi and, if your Raspberry Pi is already present in LibreNMS, perform a manual rediscover.</p>"},{"location":"Extensions/Applications/Redis/","title":"Redis","text":"<p>Script to monitor your Redis Server</p>"},{"location":"Extensions/Applications/Redis/#agent-or-snmp-extend","title":"Agent or SNMP Extend","text":"SNMP ExtendAgent <ol> <li> <p>Download the script onto the desired host</p> <pre><code>wget https://raw.githubusercontent.com/librenms/librenms-agent/master/snmp/redis.py -O /etc/snmp/redis.py\n</code></pre> </li> <li> <p>Make the script executable</p> <pre><code>chmod +x /etc/snmp/redis.py\n</code></pre> </li> <li> <p>Edit your snmpd.conf file (usually <code>/etc/snmp/snmpd.conf</code>) and add:</p> </li> </ol> <pre><code>extend redis /etc/snmp/redis.py\n</code></pre> <p>Install the agent on this device if it isn't already and copy the <code>redis</code> script to <code>/usr/lib/check_mk_agent/local/</code></p>"},{"location":"Extensions/Applications/Redis/#selinux","title":"SELINUX","text":"<p>(Optional) If you have SELinux in Enforcing mode, you must add a module so the script can get redis informations and write them:</p> <pre><code>cat &lt;&lt; EOF &gt; snmpd_redis.te\nmodule snmpd_redis 1.0;\n\nrequire {\n        type tmp_t;\n        type redis_port_t;\n        type snmpd_t;\n        class tcp_socket name_connect;\n        class dir { add_name write };\n}\n\n#============= snmpd_t ==============\n\nallow snmpd_t redis_port_t:tcp_socket name_connect;\nallow snmpd_t tmp_t:dir { write add_name };\nEOF\ncheckmodule -M -m -o snmpd_redis.mod snmpd_redis.te\nsemodule_package -o snmpd_redis.pp -m snmpd_redis.mod\nsemodule -i snmpd_redis.pp\n</code></pre>"},{"location":"Extensions/Applications/SDFS%20info/","title":"SDFS info","text":"<p>A small shell script that exportfs SDFS volume info.</p>"},{"location":"Extensions/Applications/SDFS%20info/#snmp-extend","title":"SNMP Extend","text":"<ol> <li>Download the script onto the desired host</li> </ol> <pre><code>wget https://raw.githubusercontent.com/librenms/librenms-agent/master/snmp/sdfsinfo -O /etc/snmp/sdfsinfo\n</code></pre> <ol> <li>Make the script executable</li> </ol> <pre><code>chmod +x /etc/snmp/sdfsinfo\n</code></pre> <ol> <li>Edit your snmpd.conf file (usually /etc/snmp/snmpd.conf) and add:</li> </ol> <pre><code>extend sdfsinfo /etc/snmp/sdfsinfo\n</code></pre> <ol> <li>Restart snmpd on your host</li> </ol> <p>The application should be auto-discovered as described at the top of the page. If it is not, please follow the steps set out under <code>SNMP Extend</code> heading top of page.</p>"},{"location":"Extensions/Applications/SMART/","title":"SMART","text":""},{"location":"Extensions/Applications/SMART/#install-prerequisites","title":"Install prerequisites","text":"Debian/UbuntuFreeBSDRedHat/CentOS <pre><code>apt-get install smartmontools libjson-perl libmime-base64-perl\n</code></pre> <pre><code>pkg install p5-JSON p5-MIME-Base64 smartmontools\n</code></pre> <pre><code>dnf install smartmontools perl-JSON perl-MIME-Base64\n</code></pre>"},{"location":"Extensions/Applications/SMART/#snmp-extend","title":"SNMP Extend","text":"<ol> <li>Copy the Perl script, smart, to the desired host.</li> </ol> <pre><code>wget https://github.com/librenms/librenms-agent/raw/master/snmp/smart-v1 -O /etc/snmp/smart\n</code></pre> <ol> <li>Make the script executable</li> </ol> <pre><code>chmod +x /etc/snmp/smart\n</code></pre> <ol> <li>Setup a cronjob to run it. This ensures slow to poll disks won't    result in errors.</li> </ol> <pre><code> */5 * * * * /etc/snmp/smart -u -Z\n</code></pre> <ol> <li>Edit your snmpd.conf file and add:</li> </ol> <pre><code>extend smart /bin/cat /var/cache/smart\n</code></pre> <ol> <li> <p>You will also need to create the config file, which defaults to the same path as the script, but with .config appended. So if the script is located at /etc/snmp/smart, the config file will be <code>/etc/snmp/smart.config</code>. Alternatively you can also specific a config via <code>-c</code>.</p> </li> <li> <p>Anything starting with a # is comment. </p> </li> <li>variables is $variable=$value.  </li> <li>Empty lines are ignored. </li> <li>Spaces and tabes at either the start or end of a line are ignored. </li> <li>Any line with out a matched variable or # are treated as a disk.</li> </ol> <pre><code>#This is a comment\ncache=/var/cache/smart\nsmartctl=/usr/bin/env smartctl\nuseSN=1\nada0\nada1\nda5 /dev/da5 -d sat\ntwl0,0 /dev/twl0 -d 3ware,0\ntwl0,1 /dev/twl0 -d 3ware,1\ntwl0,2 /dev/twl0 -d 3ware,2\n</code></pre> <p>The variables are as below.</p> Variable Default Description cache /var/cache/smart The path to the cache file to use. smartctl /usr/bin/env smartctl The path to use for smartctl. useSN 1 If set to 1, it will use the disks SN for reporting instead of the device name. <p>A disk line is can be as simple as just a disk name under /dev/. Such as in the config above The line <code>ada0</code> would resolve to <code>/dev/ada0</code> and would be called with no special argument. If a line has a space in it, everything before the space is treated as the disk name and is what used for reporting and everything after that is used as the argument to be passed to <code>smartctl</code>.</p> <p>If you want to guess at the configuration, call it with <code>-g</code> and it will print out what it thinks it should be.</p> <ol> <li> <p>Restart snmpd on your host</p> <pre><code>sudo systemctl restart snmpd\n</code></pre> </li> </ol> <p>The application should be auto-discovered as described at the top of the page. If it is not, please follow the steps set out under <code>SNMP Extend</code> heading top of page.</p> <ol> <li> <p>Optionally setup nightly self tests for the disks. The exend will    run the specified test on all configured disks if called with the    <code>-t</code> flag and the name of the SMART test to run.</p> <pre><code>0 0 * * * /etc/snmp/smart -t long\n</code></pre> </li> </ol>"},{"location":"Extensions/Applications/Sagan/","title":"Sagan","text":"<p>For metrics the stats are migrated as below from the stats JSON.</p> <p><code>f_drop_percent</code> and <code>drop_percent</code> are computed based on the found data.</p> Instance Key Stats JSON Key uptime .stats.uptime total .stats.captured.total drop .stats.captured.drop ignore .stats.captured.ignore threshold .stats.captured.theshold after .stats.captured.after match .stats.captured.match bytes .stats.captured.bytes_total bytes_ignored .stats.captured.bytes_ignored max_bytes_log_line .stats.captured.max_bytes_log_line eps .stats.captured.eps f_total .stats.flow.total f_dropped .stats.flow.dropped <p>Those keys are appended with the name of the instance running with <code>_</code> between the instance name and instance metric key. So <code>uptime</code> for <code>ids</code> would be <code>ids_uptime</code>.</p> <p>The default is named 'ids' unless otherwise specified via the extend.</p> <p>There is a special instance name of <code>.total</code> which is the total of all the instances. So if you want the total eps, the metric would be <code>.total_eps</code>. Also worth noting that the alert value is the highest one found among all the instances.</p>"},{"location":"Extensions/Applications/Sagan/#snmp-extend","title":"SNMP Extend","text":"<ol> <li>Install prerequisites</li> </ol> Debian/UbuntuFreeBSDGeneric <pre><code>apt-get install libjson-perl libfile-readbackwards-perl libfile-slurp-perl libmime-base64-perl cpanminus\ncpanm Sagan::Monitoring\n</code></pre> <pre><code>pkg install p5-JSON p5-File-ReadBackwards p5-File-Slurp p5-MIME-Base64 p5-Time-Piece p5-App-cpanminus\ncpanm Sagan::Monitoring\n</code></pre> <pre><code>cpanm Sagan::Monitoring\n</code></pre> <ol> <li> <p>Setup cron. Below is a example.</p> <pre><code>*/5 * * * * /usr/local/bin/sagan_stat_check &gt; /dev/null\n</code></pre> </li> <li> <p>Configure snmpd.conf</p> <pre><code>extend sagan-stats /usr/bin/env PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin sagan_stat_check -c\n</code></pre> </li> <li> <p>Restart snmpd on your system.</p> </li> </ol> <p>You will want to make sure that sagan is setup to with the values set below for stats-json processor, for a single instance setup..</p> <pre><code>enabled: yes\ntime: 300\nsubtract_old_values: true\nfilename: \"$LOG_PATH/stats.json\"\n</code></pre> <p>Any configuration of sagan_stat_check should be done in the cron setup. If the default does not work, check the docs for it at MetaCPAN for sagan_stat_check</p>"},{"location":"Extensions/Applications/Seafile/","title":"Seafile","text":""},{"location":"Extensions/Applications/Seafile/#seafile","title":"Seafile","text":"<p>SNMP extend script to monitor your Seafile Server</p>"},{"location":"Extensions/Applications/Seafile/#snmp-extend","title":"SNMP Extend","text":"<ol> <li>Copy the Python script, seafile.py, to the desired host <pre><code>wget https://github.com/librenms/librenms-agent/raw/master/snmp/seafile.py -O /etc/snmp/seafile.py\n</code></pre></li> </ol> <p>Also you have to install the requests Package for Python3. Under Ubuntu/Debian just run <code>apt install python3-requests</code></p> <ol> <li> <p>Make the script executable <pre><code>chmod +x /etc/snmp/seafile.py\n</code></pre></p> </li> <li> <p>Edit your snmpd.conf file and add: <pre><code>extend seafile /etc/snmp/seafile.py\n</code></pre></p> </li> <li> <p>You will also need to create the config file, which is named seafile.json . The script has to be located at /etc/snmp/.</p> </li> </ol> <pre><code>{\"url\": \"https://seafile.mydomain.org\",\n \"username\": \"some_admin_login@mail.address\",\n \"password\": \"password\",\n \"account_identifier\": \"name\"\n \"hide_monitoring_account\": true\n}\n</code></pre> <p>The variables are as below.</p> Variable Description url Url how to get access to Seafile Server username Login to Seafile Server.It is important that used Login has admin privileges.Otherwise most API calls will be denied. password Password to the configured login. account_identifier Defines how user accounts are listed in RRD Graph.Options are: name, email hide_monitoring_account With this Boolean you can hide the Account which youuse to access Seafile API <p>Note</p> <p>It is recommended to use a dedicated Administrator account for monitoring.</p>"},{"location":"Extensions/Applications/Sneck/","title":"Sneck","text":"<p>This is for replacing Nagios/Icinga or the LibreNMS service integration in regards to NRPE. This allows LibreNMS to query what checks were ran on the server and keep track of totals of OK, WARNING, CRITICAL, and UNKNOWN statuses.</p> <p>The big advantage over this compared to a NRPE are as below.</p> <ul> <li>It does not need to know what checks are configured on it.</li> <li>Also does not need to wait for the tests to run as sneck is meant to   be ran via cron and the then return the cache when queried via SNMP,   meaning a lot faster response time, especially if slow checks are   being performed.</li> <li>Works over proxied SNMP connections.</li> </ul> <p>Included are alert examples. Although for setting up custom ones, the metrics below are provided.</p> Metric Description ok Total OK checks warning Total WARNING checks critical Total CRITICAL checks unknown Total UNKNOWN checks errored Total checks that errored time_to_polling Differnce in seconds between when polling data was generated and when polled time_to_polling_abs The absolute value of time_to_polling. check_$CHECK Exit status of a specific check <code>$CHECK</code> is equal to the name of the check in question. So <code>foo</code> would be <code>check_foo</code> <p>The standard Nagios/Icinga style exit codes are used and those are as below.</p> Exit Meaning 0 okay 1 warning 2 critical 3+ unknown <p>To use <code>time_to_polling</code>, it will need to enabled via setting the config item below. The default is false. Unless set to true, this value will default to 0. If enabling this, one will want to make sure that NTP is in use every were or it will alert if it goes over a difference of 540s.</p> <pre><code>lnms config:set app.sneck.polling_time_diff true\n</code></pre> <p>For more information on Sneck, check it out at MetaCPAN or Github.</p> <p>For poking systems using Sneck, also check out boop_snoot if one wants to query those systems via the CLI. Docs on it at MetaCPAN and Github.</p>"},{"location":"Extensions/Applications/Sneck/#install-prerequisites","title":"Install prerequisites","text":"Debian/UbuntuFreeBSDGeneric <pre><code>apt-get install cpanminus libjson-perl libfile-slurp-perl libmime-base64-perl\ncpanm Monitoring::Sneck\n</code></pre> <pre><code>pkg install p5-JSON p5-File-Slurp p5-MIME-Base64 p5-App-cpanminus\ncpanm Monitoring::Sneck\n</code></pre> <pre><code>cpanm Monitoring::Sneck\n</code></pre>"},{"location":"Extensions/Applications/Sneck/#snmp-extend","title":"SNMP Extend","text":"<ol> <li> <p>Configure any of the checks you want to run in    <code>/usr/local/etc/sneck.conf</code>. You con find it documented    here.</p> </li> <li> <p>Set it up in cron. This will mean you don't need to wait for all    the checks to complete when polled via SNMP, which for like SMART    or other long running checks will mean it timing out. Also means it    does not need called via sudo as well.</p> <pre><code>*/5 * * * * /usr/bin/env PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin /usr/local/bin/sneck -u 2&gt; /dev/null &gt; /dev/null\n</code></pre> </li> <li> <p>Set it up in the snmpd config and restart snmpd. If calling <code>sneck -c</code> instead or catting the non-snmp cache file, there is the possibility    of snmpd mangling the return. To avoid this cat the snmp cache file as below or call <code>sneck -c -b</code>.</p> <pre><code>extend sneck /bin/cat /var/cache/sneck.cache.snmp\n</code></pre> </li> <li> <p>In LibreNMS, enable the application for the server in question or wait for auto discovery to find it.</p> </li> </ol>"},{"location":"Extensions/Applications/Socket%20Statistics%20%28ss%29/","title":"Socket Statistics (ss)","text":""},{"location":"Extensions/Applications/Socket%20Statistics%20%28ss%29/#socket-statistics-ss","title":"Socket Statistics (ss)","text":"<p>The Socket Statistics application polls ss and scrapes socket statuses.  Individual sockets and address-families may be filtered out within the script's optional configuration JSON file.</p> <ol> <li> <p>The following socket types are polled directly.  Filtering a socket type will disable direct polling as-well-as indirect polling within any address-families that list the socket type as their child: <pre><code>dccp (also exists within address-families \"inet\" and \"inet6\")\nmptcp (also exists within address-families \"inet\" and \"inet6\")\nraw (also exists within address-families \"inet\" and \"inet6\")\nsctp (also exists within address-families \"inet\" and \"inet6\")\ntcp (also exists within address-families \"inet\" and \"inet6\")\nudp (also exists within address-families \"inet\" and \"inet6\")\nxdp\n</code></pre></p> </li> <li> <p>The following socket types are polled within an address-family only: <pre><code>inet6 (within address-family \"inet6\")\np_dgr (within address-family \"link\")\np_raw (within address-family \"link\")\nti_dg (within address-family \"tipc\")\nti_rd (within address-family \"tipc\")\nti_sq (within address-family \"tipc\")\nti_st (within address-family \"tipc\")\nv_dgr (within address-family \"vsock\")\nv_str (within address-family \"vsock\")\nunknown (within address-families \"inet\", \"inet6\", \"link\", \"tipc\", and \"vsock\")\n</code></pre></p> </li> <li> <p>The following address-families are polled directly and have their child socket types tab-indented below them.  Filtering a socket type (see \"1\" above) will filter it from the address-family.  Filtering an address-family will filter out all of its child socket types.  However, if those socket types are not DIRECTLY filtered out (see \"1\" above), then they will continue to be monitored either directly or within other address-families in which they exist: <pre><code>inet\n    dccp\n    mptcp\n    raw\n    sctp\n    tcp\n    udp\n    unknown\ninet6\n    dccp\n    icmp6\n    mptcp\n    raw\n    sctp\n    tcp\n    udp\n    unknown\nlink\n    p_dgr\n    p_raw\n    unknown\nnetlink\ntipc\n    ti_dg\n    ti_rd\n    ti_sq\n    ti_st\n    unknown\nunix\n    u_dgr\n    u_seq\n    u_str\nvsock\n    v_dgr\n    v_str\n    unknown\n</code></pre></p> </li> </ol>"},{"location":"Extensions/Applications/Socket%20Statistics%20%28ss%29/#snmp-extend","title":"SNMP Extend","text":"<ol> <li> <p>Copy the python script, ss.py, to the desired host</p> <pre><code>wget https://github.com/librenms/librenms-agent/raw/master/snmp/ss.py -O /etc/snmp/ss.py\n</code></pre> </li> <li> <p>Make the script executable</p> <pre><code>chmod +x /etc/snmp/ss.py\n</code></pre> </li> <li> <p>Edit your snmpd.conf file and add:</p> <pre><code>extend ss /etc/snmp/ss.py\n</code></pre> </li> <li> <p>(Optional) Create a /etc/snmp/ss.json file and specify:</p> <ol> <li> <p>\"ss_cmd\" - String path to the ss binary: [\"/sbin/ss\"]</p> </li> <li> <p>\"socket_types\" - A comma-delimited list of socket types to include.  The following socket types are valid: dccp, icmp6, mptcp, p_dgr, p_raw, raw, sctp, tcp, ti_dg, ti_rd, ti_sq, ti_st, u_dgr, u_seq, u_str, udp, unknown, v_dgr, v_dgr, xdp.  Please note that the \"unknown\" socket type is represented in /sbin/ss output with the netid \"???\".  Please also note that the p_dgr and p_raw socket types are specific to the \"link\" address family; the ti_dg, ti_rd, ti_sq, and ti_st socket types are specific to the \"tipc\" address family; the u_dgr, u_seq, and u_str socket types are specific to the \"unix\" address family; and the v_dgr and v_str socket types are specific to the \"vsock\" address family.  Filtering out the parent address families for the aforementioned will also filter out their specific socket types.  Specifying \"all\" includes all of the socket types.  For example: to include only tcp, udp, icmp6 sockets, you would specify \"tcp,udp,icmp6\": [\"all\"]</p> </li> <li> <p>\"addr_families\" - A comma-delimited list of address families to include.  The following families are valid: inet, inet6, link, netlink, tipc, unix, vsock.  As mentioned above under (b), filtering out the link, tipc, unix, or vsock address families will also filter out their respective socket types.  Specifying \"all\" includes all of the families.  For example: to include only inet and inet6 families, you would specify \"inet,inet6\": [\"all\"]</p> </li> </ol> </li> </ol> <p><pre><code>{\n    \"ss_cmd\": \"/sbin/ss\",\n    \"socket_types\": \"all\"\n    \"addr_families\": \"all\"\n}\n</code></pre> In order to filter out uncommon/unused socket types, the following JSON configuration is recommended: <pre><code>{\n    \"ss_cmd\": \"/sbin/ss\",\n    \"socket_types\": \"icmp6,p_dgr,p_raw,raw,tcp,u_dgr,u_seq,u_str,udp\",\n    \"addr_families\": \"inet,inet6,link,netlink,unix\"\n}\n</code></pre></p> <ol> <li> <p>(Optional) If SELinux is in Enforcing mode, you must add a module so the script can poll sockets: <pre><code>cat &lt;&lt; EOF &gt; snmpd_ss.te\nmodule snmp_ss 1.0;\n\nrequire {\n    type snmpd_t;\n    class netlink_tcpdiag_socket { bind create getattr nlmsg_read read setopt write };\n}\n\n#============= snmpd_t ==============\n\nallow snmpd_t self:netlink_tcpdiag_socket { bind create getattr nlmsg_read read setopt write };\nEOF\ncheckmodule -M -m -o snmpd_ss.mod snmpd_ss.te\nsemodule_package -o snmpd_ss.pp -m snmpd_ss.mod\nsemodule -i snmpd_ss.pp\n</code></pre></p> </li> <li> <p>Restart snmpd.</p> </li> </ol>"},{"location":"Extensions/Applications/Squid/","title":"Squid","text":""},{"location":"Extensions/Applications/Squid/#squid","title":"Squid","text":""},{"location":"Extensions/Applications/Squid/#snmp-proxy","title":"SNMP Proxy","text":"<ol> <li>Enable SNMP for Squid like below, if you have not already, and restart it.</li> </ol> <pre><code>acl snmppublic snmp_community public\nsnmp_port 3401\nsnmp_access allow snmppublic localhost\nsnmp_access deny all\n</code></pre> <ol> <li> <p>Restart squid on your host.</p> </li> <li> <p>Edit your <code>/etc/snmp/snmpd.conf</code> file and add, making sure you have the same community, host, and port as above:</p> </li> </ol> <pre><code>proxy -v 2c -Cc -c public 127.0.0.1:3401 1.3.6.1.4.1.3495\n</code></pre> <p>For more advanced information on Squid and SNMP or setting up proxying for net-snmp, please see the links below.</p> <p>http://wiki.squid-cache.org/Features/Snmp http://www.net-snmp.org/wiki/index.php/Snmpd_proxy</p>"},{"location":"Extensions/Applications/Supervisord/","title":"Supervisord","text":"<p>It shows you the totals per status and also the uptime per process. That way you can add alerts for instance when there are process in state <code>FATAL</code>.</p>"},{"location":"Extensions/Applications/Supervisord/#snmp-extend","title":"SNMP Extend","text":"<ol> <li> <p>Copy the python script to the desired host.</p> <pre><code>wget https://github.com/librenms/librenms-agent/raw/master/snmp/supervisord.py -O /etc/snmp/supervisord.py\n</code></pre> <p>Notice that this will use the default unix socket path. Modify the <code>unix_socket_path</code> variable in the script if your path differs from the default.</p> </li> <li> <p>Make the script executable</p> <pre><code>chmod +x /etc/snmp/supervisord.py\n</code></pre> </li> <li> <p>Edit your snmpd.conf file (usually /etc/snmp/snmpd.conf) and add:</p> <pre><code>extend supervisord /etc/snmp/supervisord.py\n</code></pre> </li> <li> <p>Restart snmpd on your host</p> <pre><code>systemctl restart snmpd\n</code></pre> </li> </ol>"},{"location":"Extensions/Applications/Suricata%20Extract/","title":"Suricata Extract","text":""},{"location":"Extensions/Applications/Suricata%20Extract/#suricata-extract","title":"Suricata Extract","text":""},{"location":"Extensions/Applications/Suricata%20Extract/#snmp-extend","title":"SNMP Extend","text":"<ol> <li> <p>Add the following to your snmpd config and restart. Path may have to be adjusted depending on where <code>suricata_extract_submit_extend</code> is installed to.</p> <pre><code>extend suricata_extract /usr/local/bin/suricata_extract_submit_extend\n</code></pre> </li> <li> <p>Restart snmpd on your system.</p> <pre><code>sudo systemctl restart snmpd\n</code></pre> <p>Then just wait for the system to be rediscovered or enable it manually for the server in question.</p> </li> </ol>"},{"location":"Extensions/Applications/Suricata/","title":"Suricata","text":""},{"location":"Extensions/Applications/Suricata/#snmp-extend","title":"SNMP Extend","text":"<ol> <li>Install the extend.</li> </ol> Debian/UbuntuFreeBSDGeneric <pre><code>apt-get install libjson-perl libfile-path-perl libfile-slurp-perl libmime-base64-perl cpanminus\ncpanm Suricata::Monitoring\n</code></pre> <pre><code>pkg install p5-JSON p5-File-Path p5-File-Slurp p5-Time-Piece p5-MIME-Base64 p5-Hash-Flatten p5-Carp p5-App-cpanminus\ncpanm Suricata::Monitoring\n</code></pre> <pre><code>cpanm Suricata::Monitoring\n</code></pre> <ol> <li> <p>Setup cron. Below is a example.</p> <pre><code>*/5 * * * * /usr/local/bin/suricata_stat_check &gt; /dev/null\n</code></pre> </li> <li> <p>Configure snmpd.conf</p> <pre><code>extend suricata-stats /usr/bin/env PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin suricata_stat_check -c\n</code></pre> </li> </ol> <p>Or if you want to use try compressing the return via Base64+GZIP...</p> <pre><code>```bash\nextend suricata-stats /usr/bin/env PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin suricata_stat_check -c -b\n```\n</code></pre> <ol> <li>Restart snmpd on your system.</li> </ol> <p>You will want to make sure Suricata is set to output the stats to the eve file once a minute. This will help make sure that it won't be to far back in the file and will make sure it is recent when the cronjob runs.</p> <p>Any configuration of suricata_stat_check should be done in the cron setup. If the default does not work, check the docs for it at MetaCPAN for suricata_stat_check</p>"},{"location":"Extensions/Applications/Systemd/","title":"Systemd","text":"<p>The systemd application polls systemd and scrapes systemd units' load, activation, and sub states.</p>"},{"location":"Extensions/Applications/Systemd/#snmp-extend","title":"SNMP Extend","text":"<ol> <li> <p>Copy the python script, systemd.py, to the desired host</p> <pre><code>wget https://github.com/librenms/librenms-agent/raw/master/snmp/systemd.py -O /etc/snmp/systemd.py\n</code></pre> </li> <li> <p>Make the script executable</p> <pre><code>chmod +x /etc/snmp/systemd.py\n</code></pre> </li> <li> <p>Edit your snmpd.conf file and add:</p> <pre><code>extend systemd /etc/snmp/systemd.py\n</code></pre> </li> <li> <p>(Optional) Create a /etc/snmp/systemd.json file and specify:</p> <ol> <li>\"systemctl_cmd\" - String path to the systemctl binary [Default: \"/usr/bin/systemctl\"]</li> <li>\"include_inactive_units\" - True/False string to include inactive units in results [Default: \"False\"] <pre><code>{\n    \"systemctl_cmd\": \"/bin/systemctl\",\n    \"include_inactive_units\": \"True\"\n}\n</code></pre></li> </ol> </li> <li> <p>(Optional) If you have SELinux in Enforcing mode, you must add a module so the script can access systemd state:</p> </li> </ol> <pre><code>cat &lt;&lt; EOF &gt; snmpd_systemctl.te\nmodule snmpd_systemctl 1.0;\n\nrequire {\n        type snmpd_t;\n        type systemd_systemctl_exec_t;\n        type init_t;\n        class file { execute execute_no_trans map open read };\n        class unix_stream_socket connectto;\n        class system status;\n}\n\n#============= snmpd_t ==============\nallow snmpd_t init_t:system status;\nallow snmpd_t init_t:unix_stream_socket connectto;\nallow snmpd_t systemd_systemctl_exec_t:file { execute execute_no_trans map open read };\nEOF\ncheckmodule -M -m -o snmpd_systemctl.mod snmpd_systemctl.te\nsemodule_package -o snmpd_systemctl.pp -m snmpd_systemctl.mod\nsemodule -i snmpd_systemctl.pp\n</code></pre> <ol> <li> <p>Restart snmpd.</p> <pre><code>sudo systemctl restart snmpd\n</code></pre> </li> </ol>"},{"location":"Extensions/Applications/TinyDNS%20aka%20djbdns/","title":"TinyDNS aka djbdns","text":""},{"location":"Extensions/Applications/TinyDNS%20aka%20djbdns/#tinydns-aka-djbdns","title":"TinyDNS aka djbdns","text":""},{"location":"Extensions/Applications/TinyDNS%20aka%20djbdns/#agent","title":"Agent","text":"<p>Install the agent on this device if it isn't already and copy the <code>tinydns</code> script to <code>/usr/lib/check_mk_agent/local/</code></p> <p>Note</p> <p>We assume that you use DJB's Daemontools to start/stop tinydns. And that your tinydns instance is located in <code>/service/dns</code>, adjust this path if necessary.</p> <ol> <li> <p>Replace your log's <code>run</code> file, typically located in    <code>/service/dns/log/run</code> with:</p> <pre><code>#!/bin/sh\nexec setuidgid dnslog tinystats ./main/tinystats/ multilog t n3 s250000 ./main/\n</code></pre> </li> <li> <p>Create tinystats directory and chown:</p> <pre><code>mkdir /service/dns/log/main/tinystats\nchown dnslog:nofiles /service/dns/log/main/tinystats\n</code></pre> </li> <li> <p>Restart TinyDNS and Daemontools: <code>/etc/init.d/svscan restart</code></p> </li> </ol> <p>Note</p> <p>Some say <code>svc -t /service/dns</code> is enough, on my install (Gentoo) it doesn't rehook the logging and I'm forced to restart it entirely.</p>"},{"location":"Extensions/Applications/UPS-apcups/","title":"UPS-apcups","text":"<p>A small shell script that exports apcacess ups status.</p>"},{"location":"Extensions/Applications/UPS-apcups/#snmp-extend","title":"SNMP Extend","text":"<ol> <li> <p>Copy the shell script, unbound, to the desired host</p> <pre><code>wget https://github.com/librenms/librenms-agent/raw/master/snmp/ups-apcups -O /etc/snmp/ups-apcups\n</code></pre> </li> <li> <p>Make the script executable</p> <pre><code>chmod +x /etc/snmp/ups-apcups\n</code></pre> </li> <li> <p>Edit your snmpd.conf file (usually /etc/snmp/snmpd.conf) and add:</p> <pre><code>extend ups-apcups /etc/snmp/ups-apcups\n</code></pre> <p>If 'apcaccess' is not in the PATH enviromental variable snmpd is using, you may need to do something like below.</p> <pre><code>extend ups-apcups/usr/bin/env PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin /etc/snmp/ups-apcups\n</code></pre> </li> <li> <p>Restart snmpd on your host</p> </li> </ol> <p>The application should be auto-discovered as described at the top of the page. If it is not, please follow the steps set out under <code>SNMP Extend</code> heading top of page.</p>"},{"location":"Extensions/Applications/UPS-nut/","title":"UPS-nut","text":"<p>A small shell script that exports nut ups status.</p>"},{"location":"Extensions/Applications/UPS-nut/#snmp-extend","title":"SNMP Extend","text":"<ol> <li> <p>Copy the shell script, unbound, to the desired host</p> <pre><code>wget https://github.com/librenms/librenms-agent/raw/master/snmp/ups-nut.sh -O /etc/snmp/ups-nut.sh\n</code></pre> </li> <li> <p>Make the script executable</p> <pre><code>chmod +x /etc/snmp/ups-nut.sh\n</code></pre> </li> <li> <p>Edit your snmpd.conf file (usually /etc/snmp/snmpd.conf) and add:</p> <pre><code>extend ups-nut /etc/snmp/ups-nut.sh\n</code></pre> </li> <li> <p>Restart snmpd on your host</p> </li> </ol> <p>The application should be auto-discovered as described at the top of the page. If it is not, please follow the steps set out under <code>SNMP Extend</code> heading top of page.</p> <p>Optionally if you have multiple UPS or your UPS is not named APCUPS you can specify its name as an argument into <code>/etc/snmp/ups-nut.sh</code></p> <pre><code>```bash\nextend ups-nut /etc/snmp/ups-nut.sh ups1\nextend ups-nut /etc/snmp/ups-nut.sh ups2\n```\n</code></pre>"},{"location":"Extensions/Applications/Unbound/","title":"Unbound","text":"<p>Unbound configuration:</p> <pre><code># Enable extended statistics.\nserver:\n        extended-statistics: yes\n        statistics-cumulative: yes\n\nremote-control:\n        control-enable: yes\n        control-interface: 127.0.0.1\n</code></pre> <p>Restart your unbound after changing the configuration, verify it is working by running <code>unbound-control stats</code>.</p>"},{"location":"Extensions/Applications/Unbound/#agent-or-snmp-extend","title":"Agent or SNMP Extend","text":"SNMP ExtendAgent <p>(Preferred and easiest method)</p> <ol> <li>Copy the shell script, unbound, to the desired host</li> </ol> <pre><code>wget https://github.com/librenms/librenms-agent/raw/master/snmp/unbound -O /etc/snmp/unbound\n</code></pre> <ol> <li>Make the script executable</li> </ol> <pre><code>chmod +x /etc/snmp/unbound\n</code></pre> <ol> <li>Edit your snmpd.conf file and add:</li> </ol> <pre><code>extend unbound /usr/bin/sudo /etc/snmp/unbound\n</code></pre> <ol> <li>Restart snmpd.</li> </ol> <p>The application should be auto-discovered as described at the top of the page. If it is not, please follow the steps set out under <code>SNMP Extend</code> heading top of page.</p> <p>Install the agent on this device if it isn't already and copy the <code>unbound.sh</code> script to <code>/usr/lib/check_mk_agent/local/</code></p>"},{"location":"Extensions/Applications/Voip-monitor/","title":"Voip-monitor","text":"<p>Shell script that reports cpu-load/memory/open-files files stats of Voip Monitor</p>"},{"location":"Extensions/Applications/Voip-monitor/#snmp-extend","title":"SNMP Extend","text":"<ol> <li> <p>Download the script onto the desired host</p> <pre><code>wget https://raw.githubusercontent.com/librenms/librenms-agent/master/snmp/voipmon-stats.sh -O /etc/snmp/voipmon-stats.sh\n</code></pre> </li> <li> <p>Make the script executable</p> <pre><code>chmod +x /etc/snmp/voipmon-stats.sh\n</code></pre> </li> <li> <p>Edit your snmpd.conf file (usually <code>/etc/snmp/voipmon-stats.sh</code>) and add:</p> <pre><code>extend voipmon /etc/snmp/voipmon-stats.sh\n</code></pre> </li> </ol>"},{"location":"Extensions/Applications/Wireguard/","title":"Wireguard","text":"<p>The Wireguard application polls the Wireguard service and scrapes all client statistics for all interfaces configured as Wireguard interfaces.</p>"},{"location":"Extensions/Applications/Wireguard/#snmp-extend","title":"SNMP Extend","text":"<ol> <li> <p>Copy the python script, wireguard.py, to the desired host</p> <pre><code>wget https://github.com/librenms/librenms-agent/raw/master/snmp/wireguard.pl -O /etc/snmp/wireguard.pl\n</code></pre> </li> <li> <p>Install the depends.</p> </li> </ol> Debian/UbuntuFreeBSDGeneric <pre><code>apt-get install libjson-perl libmime-base64-perl libfile-slurp-perl\n</code></pre> <pre><code>pkg install p5-JSON p5-File-Slurp p5-MIME-Base64\n</code></pre> <pre><code>cpanm JSON MIME::Base64 File::Slurp\n</code></pre> <ol> <li> <p>Make the script executable</p> <pre><code>chmod +x /etc/snmp/wireguard.pl\n</code></pre> </li> <li> <p>Edit your snmpd.conf file and add:</p> <pre><code>extend wireguard /etc/snmp/wireguard.pl\n</code></pre> </li> <li> <p>Create the optional config file,    <code>/usr/local/etc/wireguard_extend.json</code>.</p> </li> </ol> key default description include_pubkey 0 Include the pubkey with the return. use_short_hostname 1 If the hostname should be shortened to just the first part. public_key_to_arbitrary_name {} A hash of pubkeys to name mappings. pubkey_resolvers Resolvers to use for the pubkeys. <p>The default for <code>pubkey_resolvers</code> is <code>config,endpoint_if_first_allowed_is_subnet_use_hosts,endpoint_if_first_allowed_is_subnet_use_ip,first_allowed_use_hosts,first_allowed_use_ip</code>.</p> resolver description config Use the mappings from <code>.public_key_to_arbitrary_name</code> . endpoint_if_first_allowed_is_subnet_use_hosts If the first allowed IP is a subnet, see if a matching IP can be found in hosts for the endpoint. endpoint_if_first_allowed_is_subnet_use_getent If the first allowed IP is a subnet, see if a hit can be found for the endpoint IP via getent hosts. endpoint_if_first_allowed_is_subnet_use_ip If the first allowed IP is a subnet, use the endpoint IP for the name. first_allowed_use_hosts See if a match can be found in hosts for the first allowed IP. first_allowed_use_getent Use getent hosts to see try to fetch a match for the first allowed IP. first_allowed_use_ip Use the first allowed IP as the name. <ol> <li> <p>Restart snmpd.</p> <pre><code>sudo systemctl restart snmpd\n</code></pre> </li> </ol>"},{"location":"Extensions/Applications/ZFS/","title":"ZFS","text":""},{"location":"Extensions/Applications/ZFS/#snmp-extend","title":"SNMP Extend","text":"<p>1: Install the depends.</p> Debian/UbuntuFreeBSDGeneric <pre><code>apt-get install -y libjson-perl libmime-base64-perl libfile-slurp-perl\n</code></pre> <pre><code>pkg install p5-JSON p5-MIME-Base64 p5-File-Slurp\n</code></pre> <pre><code>cpanm JSON MIME::Base64 File::Slurp\n</code></pre> <p>2: Fetch the script in question and make it executable.</p> <pre><code>```bash\nwget https://github.com/librenms/librenms-agent/raw/master/snmp/zfs -O /etc/snmp/zfs\nchmod +x /etc/snmp/zfs\n```\n</code></pre> <p>3: Add the following to <code>/etc/snmp/snmpd.conf</code> and restart snmpd. If <code>-s</code>, passed as a arg, status is returned for display.</p> <pre><code>```bash\nextend zfs /etc/snmp/zfs -b\n```\n</code></pre>"},{"location":"Extensions/metrics/Graphite/","title":"Enabling support for Graphite","text":"<p>This module sends all metrics to a remote graphite service. You need something like Grafana for graphing.</p>"},{"location":"Extensions/metrics/Graphite/#what-you-dont-get","title":"What you don't get","text":"<ul> <li>Pretty graphs, this is why at present you need Grafana. You need to   build your own graphs within Grafana.</li> </ul> <p>RRD will continue to function as normal so LibreNMS itself should continue to function as normal.</p>"},{"location":"Extensions/metrics/Graphite/#configuration","title":"Configuration","text":"<p>poller/graphite</p> <pre><code>lnms config:set graphite.enable true\nlnms config:set graphite.host 'your.graphite.server'\nlnms config:set graphite.port 2003\nlnms config:set graphite.prefix 'your.metric.prefix'\n</code></pre> <p>Your metric path can be prefixed if required, otherwise the metric path for Graphite will be in the form of <code>hostname.measurement.fieldname</code>, interfaces will be stored as <code>hostname.ports.ifName.fieldname</code>.</p> <p>The same data then stored within rrd will be sent to Graphite and recorded. You can then create graphs within Grafana to display the information you need.</p>"},{"location":"Extensions/metrics/Graphite/#graphite-configuration","title":"Graphite Configuration","text":"<p>As LibreNMS updates its metrics every 5 minutes, the following addition to your storage-schemas.conf is suggested.</p> <pre><code>[network]\npattern = your\\.metric\\.prefix\\..*\nretentions = 5m:30d,15m:90d,1h:1y\n</code></pre>"},{"location":"Extensions/metrics/InfluxDB/","title":"Enabling support for InfluxDB","text":"<p>Before we get started it is important that you know and understand that InfluxDB support is currently alpha at best. All it provides is the sending of data to a InfluxDB install. Due to the current changes that are constantly being made to InfluxDB itself then we cannot guarantee that your data will be ok so enabling this support is at your own risk!</p>"},{"location":"Extensions/metrics/InfluxDB/#requirements","title":"Requirements","text":"<ul> <li>InfluxDB &gt;= 0.94 &lt; 2.0</li> <li>Grafana</li> </ul> <p>The setup of the above is completely out of scope here and we aren't really able to provide any help with this side of things.</p>"},{"location":"Extensions/metrics/InfluxDB/#what-you-dont-get","title":"What you don't get","text":"<ul> <li>Pretty graphs, this is why at present you need Grafana. You need to   build your own graphs within Grafana.</li> <li>Support for InfluxDB or Grafana, we would highly recommend that you   have some level of experience with these.</li> </ul> <p>RRD will continue to function as normal so LibreNMS itself should continue to function as normal.</p>"},{"location":"Extensions/metrics/InfluxDB/#configuration","title":"Configuration","text":"<p>poller/influxdb</p> <pre><code>lnms config:set influxdb.enable true\nlnms config:set influxdb.transport http\nlnms config:set influxdb.host '127.0.0.1'\nlnms config:set influxdb.port 8086\nlnms config:set influxdb.db 'librenms'\nlnms config:set influxdb.username 'admin'\nlnms config:set influxdb.password 'admin'\nlnms config:set influxdb.timeout 0\nlnms config:set influxdb.verifySSL false\n</code></pre> <p>No credentials are needed if you don't use InfluxDB authentication.</p> <p>The same data then stored within rrd will be sent to InfluxDB and recorded. You can then create graphs within Grafana to display the information you need.</p>"},{"location":"Extensions/metrics/InfluxDBv2/","title":"Enabling support for InfluxDBv2","text":"<p>Before we get started it is important that you know and understand that InfluxDBv2 support is currently alpha at best. All it provides is the sending of data to a InfluxDBv2 bucket. Due to the current changes that are constantly being made to InfluxDB itself then we cannot guarantee that your data will be ok so enabling this support is at your own risk!</p> <p>It is also important to understand that InfluxDBv2 only supports the InfluxDBv2 API used in InfluxDB version 2.0 or higher. If you are looking to send data to any other version of InfluxDB than you should use the InfluxDB datastore instead.</p>"},{"location":"Extensions/metrics/InfluxDBv2/#requirements","title":"Requirements","text":"<ul> <li>InfluxDB &gt;= 2.0</li> </ul> <p>The setup of the above is completely out of scope here and we aren't really able to provide any help with this side of things.</p>"},{"location":"Extensions/metrics/InfluxDBv2/#what-you-dont-get","title":"What you don't get","text":"<ul> <li>Support for InfluxDB, we would highly recommend that you   have some level of experience with these.</li> </ul> <p>RRD will continue to function as normal so LibreNMS itself should continue to function as normal.</p>"},{"location":"Extensions/metrics/InfluxDBv2/#configuration","title":"Configuration","text":"<p>poller/influxdbv2</p> <pre><code>lnms config:set influxdbv2.enable true\nlnms config:set influxdbv2.transport http\nlnms config:set influxdbv2.host '127.0.0.1'\nlnms config:set influxdbv2.port 8086\nlnms config:set influxdbv2.bucket 'librenms'\nlnms config:set influxdbv2.token 'admin'\nlnms config:set influxdbv2.allow_redirect true\nlnms config:set influxdbv2.organization 'librenms'\nlnms config:set influxdbv2.debug false\nlnms config:set influxdbv2.log_file '/opt/librenms/logs/influxdbv2.log'\nlnms config:set influxdbv2.groups-exclude [\"group_name_1\",\"group_name_2\"]\nlnms config:set influxdbv2.timeout 5\nlnms config:set influxdbv2.verify false\nlnms config:set influxdbv2.batch_size 1000\nlnms config:set influxdbv2.max_retry 2\n</code></pre> <p>The same data stored within rrd will be sent to InfluxDB and recorded. You can then create graphs within Grafana or InfluxDB to display the information you need.</p> <p>Please note that polling will slow down when the poller isn't able to reach or write data to InfluxDBv2.</p>"},{"location":"Extensions/metrics/OpenTSDB/","title":"Enabling support for OpenTSDB","text":"<p>This module sends all metrics to OpenTSDB server. You need something like Grafana for graphing.</p>"},{"location":"Extensions/metrics/OpenTSDB/#requirements","title":"Requirements","text":"<ul> <li>OpenTSDB</li> <li>Grafana</li> </ul>"},{"location":"Extensions/metrics/OpenTSDB/#what-you-dont-get","title":"What you don't get","text":"<p>Pretty graphs, this is why at present you need Grafana. You need to  build your own graphs within Grafana.</p> <p>RRD will continue to function normally so LibreNMS itself should continue to function normally.</p> <p>You can add the following to your config:</p>"},{"location":"Extensions/metrics/OpenTSDB/#configuration","title":"Configuration","text":"<p>poller/opentsdb</p> <pre><code>lnms config:set opentsdb.enable true\nlnms config:set opentsdb.host '127.0.0.1'\nlnms config:set opentsdb.port 4242\n</code></pre> <p>The same data than the one stored within rrd will be sent to OpenTSDB and recorded. You can then create graphs within Grafana to display the information you need.</p>"},{"location":"Extensions/metrics/Prometheus/","title":"Enabling support for Prometheus","text":"<p>Please be aware Prometheus support is alpha at best, It hasn't been extensively tested and is still in development All it provides is the sending of data to a a Prometheus PushGateway. Please be careful when enabling this support you use it at your own risk!</p>"},{"location":"Extensions/metrics/Prometheus/#requirements-older-versions-may-work-but-havent-been-tested","title":"Requirements (Older versions may work but haven't been tested","text":"<ul> <li>Prometheus &gt;= 2.0</li> <li>PushGateway &gt;= 0.4.0</li> <li>Grafana</li> <li>PHP-CURL</li> </ul> <p>The setup of the above is completely out of scope here and we aren't really able to provide any help with this side of things.</p>"},{"location":"Extensions/metrics/Prometheus/#what-you-dont-get","title":"What you don't get","text":"<ul> <li>Pretty graphs, this is why at present you need Grafana. You need to   build your own graphs within Grafana.</li> <li>Support for Prometheus or Grafana, we would highly recommend that   you have some level of experience with these.</li> </ul> <p>RRD will continue to function as normal so LibreNMS itself should continue to function as normal.</p>"},{"location":"Extensions/metrics/Prometheus/#configuration","title":"Configuration","text":"<p>poller/prometheus</p> <pre><code>lnms config:set prometheus.enable true\nlnms config:set prometheus.url 'http://127.0.0.1:9091'\nlnms config:set prometheus.job 'librenms'\nlnms config:set prometheus.prefix 'librenms'\n</code></pre> <p>If your pushgateway uses basic authentication, configure the following:</p> <p>poller/prometheus</p> <pre><code>lnms config:set prometheus.user username\nlnms config:set prometheus.password password\n</code></pre>"},{"location":"Extensions/metrics/Prometheus/#prefix","title":"Prefix","text":"<p>Setting the 'prefix' option will cause all metric names to begin with  the configured value.</p> <p>For instance without setting this option metric names will be something  like this:</p> <pre><code>OUTUCASTPKTS\nifOutUcastPkts_rate\nINOCTETS\nifInErrors_rate\n</code></pre> <p>Configuring a prefix name, for example 'librenms', instead caused those  metrics to be exposed with the following names:</p> <pre><code>librenms_OUTUCASTPKTS\nlibrenms_ifOutUcastPkts_rate\nlibrenms_INOCTETS\nlibrenms_ifInErrors_rate\n</code></pre>"},{"location":"Extensions/metrics/Prometheus/#sample-prometheus-scrape-config-for-scraping-the-push-gateway","title":"Sample Prometheus Scrape Config (for scraping the Push Gateway)","text":"<pre><code>- job_name: pushgateway\n  scrape_interval: 300s\n  honor_labels: true\n  static_configs:\n    - targets: ['127.0.0.1:9091']\n</code></pre> <p>The same data then stored within rrd will be sent to Prometheus and recorded. You can then create graphs within Grafana to display the information you need.</p>"},{"location":"General/Acknowledgement/","title":"Acknowledgements","text":"<p>LibreNMS wouldn't be what it is today without the use of some other amazing projects. We list below what we make use of including the license compliance.</p>"},{"location":"General/Acknowledgement/#3rd-party-gplv3-compliant","title":"3rd Party GPLv3 Compliant","text":"<ul> <li>Bootstrap: MIT</li> <li>Font Awesome: MIT License</li> <li>Jquery Bootgrid: MIT License</li> <li>Pace: Open License</li> <li>Twitter typeahead: Open License</li> <li>Vis: MIT / Apache 2.0</li> <li>TCPDF: LGPLv3</li> <li>Bootstrap 3 Datepicker:MIT</li> <li>Bootstrap Dropdown Hover Plugin: MIT</li> <li>Bootstrap Switch: Apache 2.0</li> <li>Handlebars: Open License</li> <li>Cycle2: MIT/GPL</li> <li>Jquery: MIT</li> <li>Jquery UI: MIT</li> <li>Jquery QRCode: MIT</li> <li>Mktree: Open License</li> <li>Moment: MIT</li> <li>Tag Manager: MIT</li> <li>TW Sack: GPLv3</li> <li>Gridster: MIT</li> <li>Pure PHP radius class: GPLv3</li> <li>GeSHi - Generic Syntax Highlighter: GPLv2+</li> <li>MalaysiaMap.svg - By Exiang CC BY 3.0, via Wikimedia Commons</li> <li>Code for UBNT Devices Mark Gibbons mgibbons@oemcomp.com Initial code base submitted via PR721</li> <li>Jquery LazyLoad: MIT License</li> <li>influxdb-php: MIT License</li> <li>influxdb-client-php: MIT License</li> <li>HTML Purifier: LGPL v2.1</li> <li>Symfony Yaml: MIT</li> <li>PHPMailer: LGPL v2.1</li> <li>pbin: GPLv2 (or later - see script header)</li> <li>CorsSlim: MIT</li> <li>Confluence HTTP Authenticator</li> <li>Graylog SSO Authentication Plugin</li> <li>Select2: MIT License</li> <li>JustGage: MIT</li> <li>jQuery.extendext: MIT</li> <li>doT: MIT</li> <li>jQuery-queryBuilder: MIT</li> <li>sql-parser: MIT (Currently a custom build is used)</li> </ul>"},{"location":"General/Acknowledgement/#3rd-party-gplv3-non-compliant","title":"3rd Party GPLv3 Non-compliant","text":"<ul> <li>JpGraph (html/includes/jpgraph): QPL 1.0 license</li> <li>MIBS (mibs): unknown/various</li> <li>html/graph-realtime.php: BSD (original?)</li> <li>html/includes/collectd/: GPLv2 only</li> <li>overLIB (html/js/overlib_mini.js): modified Artistic 1.0?</li> </ul>"},{"location":"General/Callback-Stats-and-Privacy/","title":"Submitting Stats","text":""},{"location":"General/Callback-Stats-and-Privacy/#stats-data-and-your-privacy","title":"Stats data and your privacy","text":"<p>This document has been put together to explain what LibreNMS does when it calls back home to report some anonymous statistics.</p> <p>Let's start off by saying, all of the code that processes the data and submits it is included in the standard LibreNMS branch you've installed, the code that accepts this data and in turn generates some pretty graphs is all open source and available on GitHub. Please feel free to review the code, comment on it and suggest changes / improvements. Also, don't forget - by default installations DO NOT call back home, you need to opt into this.</p> <p>Above all we respect users privacy which is why this system has been designed like it has.</p> <p>Now onto the bit you're interested in, what is submitted and what we do with that data.</p>"},{"location":"General/Callback-Stats-and-Privacy/#what-is-submitted","title":"What is submitted","text":"<ul> <li>All data is anonymous.</li> <li>Generic statistics are taken from the database, these include things   like device count, device type, device OS, port types, port speeds,   port count and BGP peer count. Take a look at the code for full   details.</li> <li>Pairs of sysDescr and sysObjectID from devices with a small amount   of sanitation to prevent things like hostnames from being submitted.</li> <li>We record version numbers of php, mysql, net-snmp and rrdtool</li> <li>A random UUID is generated on your own install.</li> <li>That's it!</li> <li>Your IP isn't logged, even via our web service accepting the   data. We don't need to know who you are so we don't ask.</li> </ul>"},{"location":"General/Callback-Stats-and-Privacy/#what-we-do-with-the-data","title":"What we do with the data","text":"<ul> <li>We store it, not for long - 3 months at the moment although this could change.</li> <li>We use it to generate pretty graphs for people to see.</li> <li>We use it to help prioritise issues and features that need to be worked on.</li> <li>We use sysDescr and sysObjectID to create unit tests and improve OS discovery</li> </ul>"},{"location":"General/Callback-Stats-and-Privacy/#how-do-i-enable-stats-submission","title":"How do I enable stats submission?","text":"<p>If you're happy with all of this - please consider switching the call back system on, you can do this within the About LibreNMS page within your control panel. In the Statistics section you will find a toggle switch to enable / disable the feature. If you've previously had it switched on and want to opt out and remove your data, click the 'Clear remote stats' button and on the next submission all the data you've sent us will be removed!</p>"},{"location":"General/Callback-Stats-and-Privacy/#questions","title":"Questions?","text":""},{"location":"General/Callback-Stats-and-Privacy/#how-often-is-data-submitted","title":"How often is data submitted?","text":"<p>We submit the data once a day as part of daily.sh. If you disable daily.sh then opting in will not have any affect.</p>"},{"location":"General/Callback-Stats-and-Privacy/#where-can-i-see-the-data-i-submitted","title":"Where can I see the data I submitted?","text":"<p>You can't see the data raw, but we collate all of the data together and provide a dynamic site so you can see the results of all contributed stats here</p>"},{"location":"General/Callback-Stats-and-Privacy/#i-want-my-data-removed","title":"I want my data removed.","text":"<p>That's easy, simply press 'Clear remote stats' in the About LibreNMS page of your control panel, the next time the call back script is run it will remove all the data we have.</p>"},{"location":"General/Callback-Stats-and-Privacy/#i-clicked-the-clear-remote-stats-button-by-accident","title":"I clicked the 'Clear remote stats' button by accident.","text":"<p>No problem, before daily.sh runs again - just opt back in, all of your existing data will stay.</p> <p>Hopefully this answers the questions you might have on why and what we are doing here, if not, please pop into our discord server or community forum and ask any questions you like.</p>"},{"location":"General/Changelog/","title":"Current Changelog","text":""},{"location":"General/Changelog/#2560","title":"25.6.0","text":"<p>(2025-06-16)</p> <p>A big thank you to the following 24 contributors this last month:</p> <ul> <li>murrant (50)</li> <li>Jellyfrog (29)</li> <li>Npeca75 (23)</li> <li>laf (16)</li> <li>PipoCanaja (2)</li> <li>eskyuu (2)</li> <li>mpikzink (2)</li> <li>rhinoau (2)</li> <li>kakohegyi (2)</li> <li>adiaczenko (1)</li> <li>VVelox (1)</li> <li>rudybroersma (1)</li> <li>erdems (1)</li> <li>alagoutte (1)</li> <li>gprabhat (1)</li> <li>matemfromrussia (1)</li> <li>RazielMalah (1)</li> <li>nickhilliard (1)</li> <li>L8SE (1)</li> <li>knpo (1)</li> <li>Cormoran96 (1)</li> <li>jediblair (1)</li> <li>slashdoom (1)</li> <li>dot-mike (1)</li> </ul> <p>Thanks to maintainers and others that helped with pull requests this month:</p> <ul> <li>laf (63)</li> <li>murrant (43)</li> <li>Jellyfrog (14)</li> <li>copilot-pull-request-reviewer (3)</li> <li>PipoCanaja (2)</li> </ul>"},{"location":"General/Changelog/#breaking-change","title":"Breaking Change","text":"<ul> <li>Add deprecation notice for old style alerts (#17752) - laf</li> <li>Convert Alpha Compas sensors to YAML (#17565) - Npeca75</li> <li>Move definitions in to resources/definitions (#17341) - murrant</li> </ul>"},{"location":"General/Changelog/#security","title":"Security","text":"<ul> <li>Fix device edit group xss (#17856) - murrant</li> </ul>"},{"location":"General/Changelog/#device","title":"Device","text":"<ul> <li>Update Parks OS to show Memory as a percentage (#17817) - adiaczenko</li> <li>Better IPinfusion icon (#17807) - murrant</li> <li>CXC Alpha UPS support (#17797) - murrant</li> <li>Add support for Teltonika RUT955 (#17773) - rudybroersma</li> <li>Add JetStream PoE power&amp;status per port (#17762) - Npeca75</li> <li>Add RouterOS Firewall counters (ros 7.20) (#17753) - Npeca75</li> <li>Added fixes for Ocnos OSPFv3 and Transceivers (#17746) - laf</li> <li>Added Cumulus BGP VRF support (#17745) - laf</li> <li>Fix some discovery issues with the Cisco VRF Lite (#17743) - eskyuu</li> <li>Update Sharp OS serial number detection (#17741) - gprabhat</li> <li>Added MES2348B rev C. (#17736) - matemfromrussia</li> <li>Added detection for Eltex MES 3300-24F, 2308P, 2324P, 2348P (#17734) - RazielMalah</li> <li>Added support for Zyxel USG Flex 100 (#17701) - kakohegyi</li> <li>Added High connections for ASA devices (#17700) - kakohegyi</li> <li>Add TRB255 support (#17566) - Cormoran96</li> <li>Add Siteboss572 base support (#17563) - jediblair</li> <li>New Device: Venturi VOE Server (#17313) - slashdoom</li> </ul>"},{"location":"General/Changelog/#webui","title":"Webui","text":"<ul> <li>Fix alert-log showing no entries (#17850) - murrant</li> <li>Alert Rule Table fixes (#17810) - murrant</li> <li>FDB Table fixes (#17809) - murrant</li> <li>Global Search: Dark icon background (#17808) - murrant</li> <li>Fix multi-port bits graph issue (#17798) - murrant</li> <li>Fix js issue with resolution ajax call (#17794) - murrant</li> <li>Workarounds for errors in bills (#17793) - murrant</li> <li>Restore Health&gt;Printer Supplies Page (#17788) - murrant</li> <li>Dark Theme: Light BG for OS logos (#17765) - murrant</li> <li>Some small UI fixes (#17732) - laf</li> <li>Fix sensor table to link drill-down URL to the specific graph instead of to the device sensor list (#17722) - nickhilliard</li> <li>Hide scaling aids for generic sensor diagrams (#17719) - mpikzink</li> <li>Fix inconsistent label in getServiceLabel (#17716) - L8SE</li> <li>Fix compact availability map ignore alerts display classes (#17704) - rhinoau</li> <li>Fix table no results bg color on light theme (#17686) - murrant</li> <li>Remove extra ajax call from every page load (#17685) - murrant</li> <li>Improve graph theme dynamic changes (#17684) - murrant</li> <li>CSV Table export (#17310) - dot-mike</li> <li>Dashboard shared admin permissions (#17160) - rhinoau</li> </ul>"},{"location":"General/Changelog/#alerting","title":"Alerting","text":"<ul> <li>Add WLED as an alert transport (#17791) - VVelox</li> </ul>"},{"location":"General/Changelog/#billing","title":"Billing","text":"<ul> <li>Remove _ ifType = 'ethernetCsmacd'_  from billing query (#17769) - erdems</li> </ul>"},{"location":"General/Changelog/#api","title":"Api","text":"<ul> <li>Added more device fields to list_devices api (#17782) - laf</li> <li>Added additional field for fdb details api route (#17758) - laf</li> <li>Add NAC endpoints (#17649) - knpo</li> </ul>"},{"location":"General/Changelog/#settings","title":"Settings","text":"<ul> <li>Fix branding setting in config definitions (#17792) - murrant</li> <li>Add bad_ifalias_regexp and bad_ifname_regexp (#17697) - murrant</li> </ul>"},{"location":"General/Changelog/#bug","title":"Bug","text":"<ul> <li>Fix bgp-peers polling arista offset on null (#17835) - murrant</li> <li>Fix CMM port polling (#17834) - murrant</li> <li>Fix device maintenance (#17857) - murrant</li> <li>Extract only the interface names to log (#17827) - Jellyfrog</li> <li>Fix HrDevice error (#17820) - murrant</li> <li>Check if we have valid hex data before trying to use it (#17818) - Jellyfrog</li> <li>Few fixes of PHP Errors in tests (#17784) - PipoCanaja</li> <li>Fix an issue in PortsStack module (#17774) - murrant</li> <li>Bug - route module - never update route_id (#17747) - PipoCanaja</li> <li>Handle LDAP malformed url consistently (#17696) - murrant</li> <li>Skyhigh web protect Remove quotes from description (#17861) - PipoCanaja</li> </ul>"},{"location":"General/Changelog/#refactor","title":"Refactor","text":"<ul> <li>Convert Cyberpower sensors to YAML (#17759) - Npeca75</li> <li>Convert Netonix sensors to YAML (#17755) - Npeca75</li> <li>Convert delhost.php to lnms device:remove (#17739) - Jellyfrog</li> <li>Refactor Sensor and Wireless Sensor Tables (#17687) - murrant</li> <li>Refactor IPv4Addresses to Module (#17627) - Npeca75</li> <li>Route module Rewrite (#17537) - Npeca75</li> <li>Fix luminato errors &amp; refactor (#17667) - Npeca75</li> <li>Drop arris-c4 precache and convert to app(sensor-discovery) (#17712) - Npeca75</li> <li>Convert Siklu sensors to YAML (#17740) - Npeca75</li> <li>Convert SAF sensors to YAML (#17761) - Npeca75</li> <li>Convert EatonUPS sensors to YAML (#17760) - Npeca75</li> <li>Convert CeraOS sensors to YAML (#17754) - Npeca75</li> <li>Convert Sentry3 sensors to YAML (#17730) - Npeca75</li> <li>Convert Arris-3 sensors to YAML (#17711) - Npeca75</li> <li>Drop aos-emu2 precache and use app(sensor-discovery) (#17708) - Npeca75</li> <li>Drop Dell Powervault precache and use app(sensor-discovery) (#17692) - Npeca75</li> <li>Drop Terra sdi410c precache and use app(sensor-discovery) (#17691) - Npeca75</li> <li>Drop Exos precache and use app('sensor-discovery') (#17689) - Npeca75</li> <li>Drop Ipoman precache and use app(sensor-discovery) (#17707) - Npeca75</li> <li>Drop CiscoSB precache and use app('sensor-discovery') (#17693) - Npeca75</li> <li>Drop Terra sdi480 precache and use app(sensor-discovery) (#17690) - Npeca75</li> <li>Drop Mes21xx precache, add LOS, move SFPs to transceivers group (#17688) - Npeca75</li> </ul>"},{"location":"General/Changelog/#cleanup","title":"Cleanup","text":"<ul> <li>Fix a couple issues in format_alert_details (#17855) - murrant</li> <li>Fix a graph issue (#17853) - murrant</li> <li>Fix cisco hardware rewrite returning non-string (#17852) - murrant</li> <li>Fix issue in showconfig (#17851) - murrant</li> <li>Don't error on missing prtMarkerCounterUnit (#17847) - Jellyfrog</li> <li>Prevent preg_match(): Passing null to parameter #2 ($subject) of type\u2026 (#17846) - Jellyfrog</li> <li>Depending on the default value of escape is deprecated (#17845) - Jellyfrog</li> <li>Misc fixes (#17844) - Jellyfrog</li> <li>Remove unnecessary function (#17843) - Jellyfrog</li> <li>Get rid of some \"Undefined array key\" (#17842) - Jellyfrog</li> <li>Get rid of some \"Undefined array key\" (#17841) - Jellyfrog</li> <li>Simplify logic and get rid of some \"Undefined array key\" (#17840) - Jellyfrog</li> <li>Get rid of some \"Undefined array key\" (#17839) - Jellyfrog</li> <li>Simplify logic and get rid of some \"Undefined array key\" (#17838) - Jellyfrog</li> <li>Fix bits2indices trying to convert non-hex (#17837) - murrant</li> <li>Services fixes (#17833) - murrant</li> <li>Fixes for multi port graph (#17832) - murrant</li> <li>Generic application fixes (#17830) - murrant</li> <li>Fix routing pages (#17829) - laf</li> <li>Prevent undefined array key warning (#17828) - Jellyfrog</li> <li>Generic_multi_line graph fixes (#17825) - murrant</li> <li>IP search ui fixes (#17824) - murrant</li> <li>Alert UI fixes (#17821) - murrant</li> <li>Use Str function to prevent deprecation warning (#17819) - Jellyfrog</li> <li>Fail Scheduler validation when cache is unavailable. (#17812) - murrant</li> <li>Fix a couple errors in validate (#17811) - murrant</li> <li>Make json schema validations stricter (#17804) - Jellyfrog</li> <li>Remove duplicate enable_proxmox definition (#17803) - Jellyfrog</li> <li>Don't pass str_replace a null value (#17801) - Jellyfrog</li> <li>API functions: fix preg_match deprecation error (#17800) - Jellyfrog</li> <li>Passing null to parameter #1 ($string) of type string is d\u2026 (#17799) - Jellyfrog</li> <li>SnmpResponse filter No Such Object (#17796) - murrant</li> <li>Fix compareOid warning (#17795) - murrant</li> <li>Remove references to deprecated pastebin service (#17768) - Jellyfrog</li> <li>Remove unused files (#17738) - Jellyfrog</li> <li>Fix up some BGP undefined variables (#17698) - murrant</li> <li>Major error handling change (#17672) - murrant</li> <li>Remove port cache global (#17668) - murrant</li> </ul>"},{"location":"General/Changelog/#documentation","title":"Documentation","text":"<ul> <li>Link should be clickable (#17823) - murrant</li> <li>Big document and WebUI config review (#17771) - laf</li> <li>Docs update to flag the issue with worker distribution (#17728) - laf</li> <li>Updated ilert transport docs to link to new ilert integration (#17726) - laf</li> <li>PowerDNS sudo (#17717) - murrant</li> <li>Some lingering paths in docs for os definition move (#17699) - laf</li> <li>Updated Ubuntu 22.04 to use php 8.3 and removed 20.04 instructions (#17695) - laf</li> </ul>"},{"location":"General/Changelog/#translation","title":"Translation","text":"<ul> <li>Add Toner to lang (#17718) - mpikzink</li> </ul>"},{"location":"General/Changelog/#tests","title":"Tests","text":"<ul> <li>Location test: Don't test dns lookup (#17805) - Jellyfrog</li> <li>Don't delete devices in CI pipeline (#17652) - Jellyfrog</li> </ul>"},{"location":"General/Changelog/#misc","title":"Misc","text":"<ul> <li>Remove mac view (#17731) - eskyuu</li> <li>Improve git checks (#17677) - Jellyfrog</li> <li>Update schema dump (#17664) - Jellyfrog</li> </ul>"},{"location":"General/Changelog/#internal-features","title":"Internal Features","text":"<ul> <li>Error Reporting: skip vendor frames (#17836) - murrant</li> </ul>"},{"location":"General/Changelog/#mibs","title":"Mibs","text":"<ul> <li>Update Fortigate (Fortinet) (#17748) - alagoutte</li> </ul>"},{"location":"General/Changelog/#dependencies","title":"Dependencies","text":"<ul> <li>Bump mkdocs-material version (#17720) - Jellyfrog</li> <li>Update PHP deps and cleanup unused (#17713) - Jellyfrog</li> <li>Update PHP deps (#17709) - Jellyfrog</li> <li>Update PHP deps (#17694) - murrant</li> </ul>"},{"location":"General/Changelog/#2550","title":"25.5.0","text":"<p>(2025-05-16)</p> <p>A big thank you to the following 31 contributors this last month:</p> <ul> <li>Jellyfrog (42)</li> <li>murrant (35)</li> <li>laf (11)</li> <li>Npeca75 (9)</li> <li>rhinoau (4)</li> <li>thundersin (4)</li> <li>peejaychilds (4)</li> <li>VVelox (3)</li> <li>Domoninic (3)</li> <li>andr3jk (2)</li> <li>dependabot (2)</li> <li>EinGlasVollKakao (2)</li> <li>h-barnhart (2)</li> <li>eskyuu (2)</li> <li>Fiala06 (1)</li> <li>mivsvit (1)</li> <li>PipoCanaja (1)</li> <li>mwobst (1)</li> <li>dethmetaljeff (1)</li> <li>nbartley (1)</li> <li>pizu (1)</li> <li>santiag0z (1)</li> <li>danhusan (1)</li> <li>devhubpl (1)</li> <li>opalivan (1)</li> <li>moonpyk (1)</li> <li>guskarbos (1)</li> <li>matdal5423 (1)</li> <li>Punicaa (1)</li> <li>grupelpunt (1)</li> <li>Vireth4114 (1)</li> </ul> <p>Thanks to maintainers and others that helped with pull requests this month:</p> <ul> <li>laf (42)</li> <li>murrant (35)</li> <li>Jellyfrog (16)</li> <li>PipoCanaja (5)</li> <li>copilot-pull-request-reviewer (3)</li> <li>VVelox (3)</li> <li>electrocret (1)</li> </ul>"},{"location":"General/Changelog/#feature","title":"Feature","text":"<ul> <li>Modern dark theme (follow device) (#17567) - murrant</li> <li>ARP and IPv6 ND modules split (#17558) - murrant</li> <li>Per user Fahrenheit temperature display units (#17453) - murrant</li> </ul>"},{"location":"General/Changelog/#breaking-change_1","title":"Breaking Change","text":"<ul> <li>Awplus Transceivers (#17421) - murrant</li> </ul>"},{"location":"General/Changelog/#security_1","title":"Security","text":"<ul> <li>Fix poller group name xss (#17603) - murrant</li> </ul>"},{"location":"General/Changelog/#device_1","title":"Device","text":"<ul> <li>Added Server 2025 (24H2) (#17678) - Fiala06</li> <li>Added detection for Eltex MES2408C and MES2424 (#17675) - rhinoau</li> <li>Adva-fsp150cp input handling (#17673) - murrant</li> <li>Eltex mes23xx convert Battery Charge to YAML (#17670) - Npeca75</li> <li>Support for new device cisco ftd 1220 (#17660) - andr3jk</li> <li>Add ifName to LOS sensor descriptions for fs-bdcom OS (#17655) - mivsvit</li> <li>Fix Ruckus SZ wireless client &amp; AP indexes (#17641) - murrant</li> <li>Sentry4 Fix yaml duplicate key error (#17640) - murrant</li> <li>Use correct snmp function (#17612) - Jellyfrog</li> <li>Miscellaneous cleanup (#17611) - Jellyfrog</li> <li>Dont discover state sensors without values (#17609) - Jellyfrog</li> <li>Fix user_func (#17606) - Jellyfrog</li> <li>Last Battery Replacement date for APC UPS devices (#17604) - mwobst</li> <li>Add Branch monitoring for chatsworth pdus (#17589) - dethmetaljeff</li> <li>Added support for various morningstar devices (#17584) - laf</li> <li>Adding iqnos OS support (#17578) - thundersin</li> <li>Ironware show temperature of whole stack (#17569) - EinGlasVollKakao</li> <li>Update hpe-ilo.yaml (#17554) - pizu</li> <li>Ruckus Radius Traps v2 (#17549) - h-barnhart</li> <li>Fix IPv6 Polling for Nokia BGP (#17534) - thundersin</li> <li>Mpb new device template (#17501) - thundersin</li> <li>[jetdirect] additional OS &amp; Counters data (#17495) - Npeca75</li> <li>[sharp] add OS and Counters info (#17488) - Npeca75</li> <li>Adding support for cumulus hardware state sensors (#17435) - Punicaa</li> <li>Infinera-Groove DBm and BER Sensor Improvements (#17330) - thundersin</li> <li>Exception Nimbleos.php (#17261) - grupelpunt</li> </ul>"},{"location":"General/Changelog/#webui_1","title":"Webui","text":"<ul> <li>OUI search UI improvements (#17651) - murrant</li> <li>Fix menu alert icon colors (#17614) - murrant</li> <li>Theme quick select in user menu (#17610) - murrant</li> <li>HundredGigE and TwentyFiveGigE support in Rewrite (#17607) - PipoCanaja</li> <li>Fix dark global search background (#17596) - murrant</li> <li>Fix select2 style, copy classes (#17581) - murrant</li> <li>Fixed error message when saving max repeaters and oids (#17532) - laf</li> <li>Device - reformat service table (#17527) - Domoninic</li> <li>Log service name on status change (#17526) - Domoninic</li> <li>Fixed bug not allowing sticky notifications to be unstickied (#17525) - laf</li> <li>Add missing labels for auth.socialite settings (#17516) - peejaychilds</li> <li>Fixed transceiver graphs on overview page (#17502) - laf</li> <li>Fix an issue with the menu when there is only one group of custom maps (#17498) - eskyuu</li> <li>Device link include link in popup (#17480) - murrant</li> <li>Expose discovery protocol settings to webui (#17474) - murrant</li> <li>Fix ospfv3 page when port is missing (#17469) - murrant</li> <li>Improve device-overview-graphs (#17466) - murrant</li> <li>Remove more old css (#17465) - murrant</li> <li>Fix user preferences roles display (#17450) - murrant</li> <li>Fix menu ul styling (#17449) - murrant</li> </ul>"},{"location":"General/Changelog/#alerting_1","title":"Alerting","text":"<ul> <li>Moved alert_id out of the if/else check (#17568) - laf</li> <li>Added new options to SMTP (via TLS) settings for certificate verification (#17486) - devhubpl</li> <li>Add embedGraph support for Telegram Alert Transport. (#17451) - matdal5423</li> <li>Add a GLPI Alert Transport (#17127) - Vireth4114</li> </ul>"},{"location":"General/Changelog/#graphs","title":"Graphs","text":"<ul> <li>Fix the app graph smart_other for the application SMART (#17483) - VVelox</li> <li>Escape % in device sensor graphs (#17473) - murrant</li> </ul>"},{"location":"General/Changelog/#snmp-traps","title":"Snmp Traps","text":"<ul> <li>Ruckus RADIUS SNMP Trap Handlers (#17457) - h-barnhart</li> </ul>"},{"location":"General/Changelog/#applications","title":"Applications","text":"<ul> <li>Chronyd remove non-numeric metrics (#17462) - murrant</li> </ul>"},{"location":"General/Changelog/#api_1","title":"Api","text":"<ul> <li>Fix API maintenance call notes and duration parsing (#17583) - rhinoau</li> </ul>"},{"location":"General/Changelog/#discovery","title":"Discovery","text":"<ul> <li>Misc fixes (#17617) - Jellyfrog</li> <li>[ipv6] fix routeros route discovery (IPV6-MIB) (#17426) - Npeca75</li> </ul>"},{"location":"General/Changelog/#authentication","title":"Authentication","text":"<ul> <li>SAML2 assigning a role by group bug (#17487) - andr3jk</li> <li>SocialiteController fix setRoles -&gt; syncRoles (#17477) - peejaychilds</li> </ul>"},{"location":"General/Changelog/#bug_1","title":"Bug","text":"<ul> <li>Fix fdb bridge table array access on null (#17663) - murrant</li> <li>Fix install skipping schema dump (#17657) - murrant</li> <li>Auth resiliency improvements (#17656) - murrant</li> <li>DbFetchRow should return null (#17636) - murrant</li> <li>Fix vlan authorization (#17615) - murrant</li> <li>Miscellaneous fixes (#17600) - Jellyfrog</li> <li>Don't crash on missing lldpLocPortDesc (#17599) - Jellyfrog</li> <li>Dont throw exception when index is missing (#17598) - Jellyfrog</li> <li>Add device_id to ObjectCache key (#17588) - Jellyfrog</li> <li>Cleanup invalid socialite configs (#17587) - Jellyfrog</li> <li>[webui] fix mac search (#17582) - Npeca75</li> <li>Fix device edit SNMPv3 algorithm dropdown handling (#17580) - rhinoau</li> <li>Fix error in discovery-protocols (#17579) - Npeca75</li> <li>Fix install database issue from Laravel 11.x defaults (#17552) - rhinoau</li> <li>[arp-table] fix for pure IPv6 network (#17538) - Npeca75</li> <li>Bug - Fix for device--print-alert-rules.php (#17485) - opalivan</li> <li>Fixed discovery logic in equallogic.inc.php (#17481) - moonpyk</li> <li>Fix MPLS polling for TiMOS 8.0.R6  (#17411) (#17456) - guskarbos</li> </ul>"},{"location":"General/Changelog/#refactor_1","title":"Refactor","text":"<ul> <li>Remove snmp_translate (#17638) - murrant</li> <li>[datacom] dBm sensors to YAML (#17557) - Npeca75</li> <li>Remove LegacyQueryListener (#17511) - murrant</li> </ul>"},{"location":"General/Changelog/#cleanup_1","title":"Cleanup","text":"<ul> <li>Ignore unset variable (#17647) - Jellyfrog</li> <li>Miscellaneous cleanup - OS V, W, X* (#17646) - Jellyfrog</li> <li>Miscellaneous cleanup - OS S, T, V* (#17643) - Jellyfrog</li> <li>Miscellaneous cleanup - OS O, P, R* (#17635) - Jellyfrog</li> <li>Miscellaneous cleanup - OS N* (#17633) - Jellyfrog</li> <li>Miscellaneous cleanup - OS L* (#17632) - Jellyfrog</li> <li>Don't try to loop none existing ports (#17629) - Jellyfrog</li> <li>Miscellaneous cleanup (#17626) - Jellyfrog</li> <li>Miscellaneous cleanup (#17625) - Jellyfrog</li> <li>Misc fixes 2 (#17624) - Jellyfrog</li> <li>Misc fixes (#17623) - Jellyfrog</li> <li>Misc fixes (#17622) - Jellyfrog</li> <li>Misc fixes (#17621) - Jellyfrog</li> <li>Miscellaneous cleanup - OS E (#17613) - Jellyfrog</li> <li>Miscellaneous cleanup - OS C (#17608) - Jellyfrog</li> <li>Bail early if allowed network list is empty (#17601) - Jellyfrog</li> <li>Miscellaneous cleanup - OS A* (#17597) - Jellyfrog</li> <li>Remove invalid sensors from database (#17595) - Jellyfrog</li> <li>Miscellaneous cleanup - OS A* (#17590) - Jellyfrog</li> <li>Add Sensor Enum (#17571) - Jellyfrog</li> <li>Remove keys_in validation (#17556) - murrant</li> <li>Remove LibreNMS\\Config as (#17513) - murrant</li> <li>Remove incorrect dirFromHost usage (#17467) - murrant</li> </ul>"},{"location":"General/Changelog/#documentation_1","title":"Documentation","text":"<ul> <li>Add in info for clearing the boot strap cache for manual updating docs (#17634) - VVelox</li> <li>DOC - Fix Markdown for Memory pools table in Entities (#17540) - santiag0z</li> </ul>"},{"location":"General/Changelog/#tests_1","title":"Tests","text":"<ul> <li>Don't suppress errors (#17650) - Jellyfrog</li> <li>Refactor UpsTrapOnBatteryTest to use <code>for($device)-\\&gt;create()</code> for sen\u2026 (#17509) - Jellyfrog</li> </ul>"},{"location":"General/Changelog/#misc_1","title":"Misc","text":"<ul> <li>Eltex mes23xx drop last php precache (#17671) - Npeca75</li> <li>Update DeviceController.php - Broaden search returns (#17586) - nbartley</li> <li>Add validation for array keys not being empty (#17585) - Jellyfrog</li> <li>Set app name in config/app.php (#17574) - VVelox</li> <li>Ironware disable bulkwalk for ifPhysAddress (#17570) - EinGlasVollKakao</li> <li>Validate array key in array-sub-keyed type (#17559) - Jellyfrog</li> <li>Add --allow-releaseinfo-change to apt-get update (#17543) - peejaychilds</li> <li>SocialiteControllerTest for testing setRolesFromClaim function (#17542) - peejaychilds</li> <li>Laravel 12.x Shift (#17515) - Jellyfrog</li> <li>Revert \"Ruckus RADIUS SNMP Trap Handlers\" (#17507) - Jellyfrog</li> <li>Fix a HTML error in device.inc.php to correctly close a select tag (#17499) - eskyuu</li> <li>Fix proxmox cluster filtering (#17493) - danhusan</li> </ul>"},{"location":"General/Changelog/#internal-features_1","title":"Internal Features","text":"<ul> <li>Throw exceptions when tests are running (#17562) - murrant</li> </ul>"},{"location":"General/Changelog/#dependencies_1","title":"Dependencies","text":"<ul> <li>Bump league/commonmark from 2.6.2 to 2.7.0 (#17616) - dependabot</li> <li>Bump vite from 6.2.6 to 6.3.4 (#17573) - dependabot</li> <li>Clear caches before update (#17510) - murrant</li> <li>Upgrade to Carbon 3 (#17506) - Jellyfrog</li> <li>Laravel 11.x Shift (#17384) - Jellyfrog</li> </ul>"},{"location":"General/Changelog/#2540","title":"25.4.0","text":"<p>(2025-04-14)</p> <p>A big thank you to the following 47 contributors this last month:</p> <ul> <li>murrant (54)</li> <li>Jellyfrog (11)</li> <li>laf (8)</li> <li>dependabot (4)</li> <li>TheMysteriousX (4)</li> <li>VVelox (4)</li> <li>Npeca75 (4)</li> <li>rudybroersma (3)</li> <li>peejaychilds (2)</li> <li>mivsvit (2)</li> <li>peelman (2)</li> <li>mpikzink (2)</li> <li>danhusan (1)</li> <li>systeembeheerder (1)</li> <li>netdiver (1)</li> <li>mengy-yu (1)</li> <li>nonsensical-widget (1)</li> <li>LoveSkylark (1)</li> <li>idanoo (1)</li> <li>alextremblay (1)</li> <li>h-barnhart (1)</li> <li>loopodoopo (1)</li> <li>angel-pandey (1)</li> <li>martinberg (1)</li> <li>clmcavaney (1)</li> <li>MelonicOverlord (1)</li> <li>Sushi1324 (1)</li> <li>PipoCanaja (1)</li> <li>Manjunath-krishna (1)</li> <li>dmbokhan (1)</li> <li>eskyuu (1)</li> <li>andrecasas (1)</li> <li>robje (1)</li> <li>HolgerHees (1)</li> <li>cgriffin352 (1)</li> <li>xorrkaz (1)</li> <li>thundersin (1)</li> <li>bsteinert (1)</li> <li>dot-mike (1)</li> <li>takyanagida (1)</li> <li>Vireth4114 (1)</li> <li>sorano (1)</li> <li>zombah (1)</li> <li>jwestfall69 (1)</li> <li>pdgunter (1)</li> <li>bnoack-stepcg (1)</li> <li>bionicman (1)</li> </ul> <p>Thanks to maintainers and others that helped with pull requests this month:</p> <ul> <li>laf (58)</li> <li>murrant (37)</li> <li>Jellyfrog (25)</li> <li>PipoCanaja (3)</li> <li>ottorei (2)</li> <li>electrocret (2)</li> <li>copilot-pull-request-reviewer (1)</li> </ul>"},{"location":"General/Changelog/#breaking-change_2","title":"Breaking Change","text":"<ul> <li>Replace bouncer with laravel-permissions (#17288) - murrant</li> <li>Deprecate snmp.inc.php (#17334) - murrant</li> </ul>"},{"location":"General/Changelog/#feature_1","title":"Feature","text":"<ul> <li>Expose os_text as a report field (#17422) - TheMysteriousX</li> <li>Add lnms report:devices field completion (#17408) - murrant</li> <li>Save link-local addresses (#17314) - murrant</li> <li>Support for docker/K8s container health check (#16273) - murrant</li> </ul>"},{"location":"General/Changelog/#security_2","title":"Security","text":"<ul> <li>Use dynamic selects in edit user (#17379) - murrant</li> </ul>"},{"location":"General/Changelog/#device_2","title":"Device","text":"<ul> <li>Add TRENDnet TL2-F7120 (#17442) - danhusan</li> <li>Add minimal support for Sangoma Vega gateways os (#17434) - netdiver</li> <li>Update definitions/webpower-smart2.yaml (#17432) - mengy-yu</li> <li>Update raritan-pdu.inc.php (#17425) - nonsensical-widget</li> <li>Eaton UPS M2 - Add battery health sensors (#17423) - rudybroersma</li> <li>New Meraki APs (#17416) - LoveSkylark</li> <li>[ligoos] add DLB device variant 15-ac (#17415) - Npeca75</li> <li>[mes23xx] restore IPv6 discovery (#17407) - Npeca75</li> <li>[mes24xx] restore IPv6 discovery (#17406) - Npeca75</li> <li>Add support for Grandstream GWN7822P Switch (#17405) - idanoo</li> <li>Algcom Site Monitor (#17383) - murrant</li> <li>ParseIpField() handles TiMOS SNMP-encoded hex IP strings (e.g. '\u2026 (#17375) - loopodoopo</li> <li>Updated sysDescr for Aruba Os 10 (#17372) - angel-pandey</li> <li>Handle Juniper version where JSU in use (#17357) - peejaychilds</li> <li>Eatonups power per phase (#17354) - martinberg</li> <li>Fix bison deprecated snmp (#17345) - murrant</li> <li>Update Cisco Platform Detection (#17342) - MelonicOverlord</li> <li>Improved Sensor Discovery for Eaton PDU (#17326) - Sushi1324</li> <li>Increase FS / BDCOM power supply failure severity (#17324) - mivsvit</li> <li>[transceivers] Eltex MES24xx Transceiver support (#17323) - Npeca75</li> <li>Adding Additional Sensors and Data Gathering for Nokia 1830 PSD (#17320) - peelman</li> <li>Add support for bison router (#17316) - Manjunath-krishna</li> <li>Added detection for Eltex MES2300D (#17309) - dmbokhan</li> <li>Fix Datacom optical signal levels by changing divisor value (#17294) - andrecasas</li> <li>Update FORTINET-FORTIAP-MIB (#17287) - rudybroersma</li> <li>Axis camera  temperature thresholds (#17284) - robje</li> <li>Device OS fs-switch-dc: skip TX and RX transeiver sensors if interface is admin down (#17283) - mivsvit</li> <li>Fix rittal multi sensor detection (#17282) - HolgerHees</li> <li>Non-Greedy version from hrSWInstalledName on junos (#17267) - peejaychilds</li> <li>Fixing TIMOS BGP discovery (#17250) - thundersin</li> <li>Nokia ISAM module improvement (#17228) - bsteinert</li> <li>Improve Cisco C1200/C1300 support by merging it into ciscosb (#17208) - takyanagida</li> <li>Fix FortiSwitch FDB discovery (#17194) - rudybroersma</li> <li>Video decoder (#17080) - sorano</li> <li>Update tripp lite sensors (#15671) - peelman</li> </ul>"},{"location":"General/Changelog/#webui_2","title":"Webui","text":"<ul> <li>Load bootstrap in with tailwinds (#17436) - laf</li> <li>Fix default language always showing current (#17353) - murrant</li> <li>Fix JS language files not loading (#17351) - murrant</li> <li>Fix device ssh links (#17329) - murrant</li> <li>Updated Custom map list to sub menu (#17317) - laf</li> <li>Stop STP page from doing lookups on blanks (#17301) - eskyuu</li> <li>Migrate from Laravel Mix to Vite (#17279) - murrant</li> <li>Ifalias on alerts (#17274) - cgriffin352</li> <li>Upgrade to Tailwind 4 (#17253) - murrant</li> </ul>"},{"location":"General/Changelog/#alerting_2","title":"Alerting","text":"<ul> <li>Removed UKFastPSS Alert transport (#17410) - laf</li> <li>Add MS Teams AdaptiveCard JSON example (#17396) - alextremblay</li> <li>Use the main ID for the alert within Grafana transport (#17328) - laf</li> <li>Updated API Transport to support urlencoded forms (#17389) - laf</li> <li>Log a message when an alert is unack'd too (#17306) - TheMysteriousX</li> <li>Add alert rules for Dell DRAC and OME-M sensors (#15905) - bionicman</li> </ul>"},{"location":"General/Changelog/#snmp-traps_1","title":"Snmp Traps","text":"<ul> <li>Ciena SAOS Port State SNMP Traps (#17393) - h-barnhart</li> </ul>"},{"location":"General/Changelog/#api_2","title":"Api","text":"<ul> <li>Add ip version specific endpoints (#17007) - zombah</li> <li>Add tagged VLANs to api call 'get_port_info' (#14960) - mpikzink</li> <li>API - allow add device to override sysLocation (#16060) - pdgunter</li> </ul>"},{"location":"General/Changelog/#discovery_1","title":"Discovery","text":"<ul> <li>IPv6 prefix length: fallback to IP-MIB::ipAddressPrefixTable (#17427) - murrant</li> <li>Services trimming null (#17403) - murrant</li> </ul>"},{"location":"General/Changelog/#bug_2","title":"Bug","text":"<ul> <li>Fix incorrect usage of array_slice (#17430) - TheMysteriousX</li> <li>Fix issue with wireless module when no sensors exist (#17392) - murrant</li> <li>Do not link IPv6 link-locals to a network (#17386) - murrant</li> <li>Only apply storage_perc_warn on created (#17377) - murrant</li> <li>Fix Yaml data fetch bug (#17370) - murrant</li> <li>Fix uncompressed ipv6 for mapped ipv4 (#17369) - murrant</li> <li>Fix admin only scope (#17359) - murrant</li> <li>Fix installer breakage (#17350) - murrant</li> <li>Roles migration ignore duplicate roles (#17344) - murrant</li> <li>Ospfv3 rewrite (#17322) - murrant</li> <li>Fetch all IPv6 Link-Local (#17321) - murrant</li> <li>Bug - Zyxel - Fix for FDB discovery (#17318) - PipoCanaja</li> <li>Fix SnmpResponse getRawWithoutBadLines (#17315) - murrant</li> <li>Fix popups background color (#17278) - murrant</li> <li>Groups of service template not updating (#17123) - Vireth4114</li> </ul>"},{"location":"General/Changelog/#refactor_2","title":"Refactor","text":"<ul> <li>Refactor processors table backend (#17365) - murrant</li> <li>Refactor storages table backend (#17364) - murrant</li> <li>Refactor sensors table backend (#17363) - murrant</li> <li>Remove includes/datastore.inc.php (#17107) - mpikzink</li> </ul>"},{"location":"General/Changelog/#cleanup_2","title":"Cleanup","text":"<ul> <li>Only join the device table when searching (#17428) - murrant</li> <li>Fix PHPStan/Larastan errors (#17398) - Jellyfrog</li> <li>Convert route options to fluent methods (#17395) - Jellyfrog</li> <li>Fix test namespaces (#17339) - murrant</li> <li>Remove CheckStatus (#17305) - murrant</li> <li>Correct casing of SmokepingGenerateCommand (#17299) - Jellyfrog</li> <li>Drop ospfv3_nbrs.ospfv3NbrIfIndex (#17275) - TheMysteriousX</li> <li>Add missing config definitions and reformat (#14797) - VVelox</li> </ul>"},{"location":"General/Changelog/#documentation_2","title":"Documentation","text":"<ul> <li>Add Debian 13 \"Trixie\" install instructions (#17438) - systeembeheerder</li> <li>Improved health sensor docs (#17419) - murrant</li> <li>Updated Transport docs and some other small tweaks (#17409) - laf</li> <li>Use SnmpQuery in the docs (#17388) - murrant</li> <li>Documentation for SnmpQuery (#17368) - murrant</li> <li>Clarify the naming convention for seeder keys. (#17272) - xorrkaz</li> <li>Documentation: High Availability setup with redis sentinel (#17214) - dot-mike</li> </ul>"},{"location":"General/Changelog/#translation_1","title":"Translation","text":"<ul> <li>Updating minor help popup text grammatical error (#17347) - clmcavaney</li> </ul>"},{"location":"General/Changelog/#tests_2","title":"Tests","text":"<ul> <li>Ospfv3 module has discovery, test it. (#17440) - murrant</li> <li>Update super-linter to v7 (#17300) - Jellyfrog</li> <li>Add assertions to mockery shouldReceive's (#17292) - Jellyfrog</li> <li>Remove auto snmpsim and migrate:fresh from phpunit calls (#17290) - murrant</li> <li>Use static data providers (#17286) - murrant</li> <li>PHPUnit 10 Shift (#17285) - Jellyfrog</li> </ul>"},{"location":"General/Changelog/#misc_2","title":"Misc","text":"<ul> <li>Sagan logging fix: properly get a list of old instances now to avoid constantly regarding something a new (#17429) - VVelox</li> <li>App Sneck: now includes a easy means to view per check info as well as support debug only items (#17414) - VVelox</li> <li>Add a json(with the capability of including additional info such as ports etc) and headerless mode to report:devices (#17391) - VVelox</li> <li>Ignore errors when collecting snmprecs (#17382) - murrant</li> <li>PHP version check in webui (#17367) - murrant</li> <li>Revert \"Update super-linter to v7\" (#17302) - Jellyfrog</li> <li>Throttle dispatcher service's redis reconnection rate (#16525) - jwestfall69</li> </ul>"},{"location":"General/Changelog/#dependencies_2","title":"Dependencies","text":"<ul> <li>Bump vite from 6.2.5 to 6.2.6 (#17439) - dependabot</li> <li>Bump vite from 6.2.4 to 6.2.5 (#17401) - dependabot</li> <li>Actually require PHP 8.2 (#17387) - murrant</li> <li>Bump vite from 6.2.3 to 6.2.4 (#17378) - dependabot</li> <li>Bump vite from 6.2.2 to 6.2.3 (#17331) - dependabot</li> </ul>"},{"location":"General/Changelog/#2530","title":"25.3.0","text":"<p>(2025-03-16)</p> <p>A big thank you to the following 26 contributors this last month:</p> <ul> <li>murrant (15)</li> <li>laf (7)</li> <li>PipoCanaja (6)</li> <li>mivsvit (6)</li> <li>rhinoau (6)</li> <li>rudybroersma (4)</li> <li>TheMysteriousX (2)</li> <li>w1ll14m (2)</li> <li>alagoutte (2)</li> <li>adiaczenko (1)</li> <li>vhuk (1)</li> <li>opalivan (1)</li> <li>dethmetaljeff (1)</li> <li>fabriciotm (1)</li> <li>sthen (1)</li> <li>kruczek8989 (1)</li> <li>cgriffin352 (1)</li> <li>deajan (1)</li> <li>stefanl234 (1)</li> <li>runnane (1)</li> <li>choicedraught (1)</li> <li>medeiros405 (1)</li> <li>peejaychilds (1)</li> <li>takyanagida (1)</li> <li>smos (1)</li> <li>lprosch (1)</li> </ul> <p>Thanks to maintainers and others that helped with pull requests this month:</p> <ul> <li>laf (29)</li> <li>Jellyfrog (13)</li> <li>PipoCanaja (11)</li> <li>murrant (5)</li> <li>electrocret (2)</li> <li>ottorei (1)</li> </ul>"},{"location":"General/Changelog/#feature_2","title":"Feature","text":"<ul> <li>IPv6 neighbor discovery (#17089) - murrant</li> <li>Add support for OSPFv3 discovery and polling (#17046) - smos</li> </ul>"},{"location":"General/Changelog/#device_3","title":"Device","text":"<ul> <li>Devices - add support for parks-switch (#17263) - adiaczenko</li> <li>Fix invalid yaml fs-switch-dc (#17255) - murrant</li> <li>Fix for some Cisco Nexus Transceivers (#17247) - PipoCanaja</li> <li>Add RUT956 support with test cases (#17245) - vhuk</li> <li>Add Support for Huawei Optix RTN family (#17243) - opalivan</li> <li>Add cord balance to sentry pdu (#17242) - dethmetaljeff</li> <li>Updated Flexbng to add individual dhcp pool % (#17240) - laf</li> <li>Update features discovery for Panduit devices (#17238) - mivsvit</li> <li>Add support for Cisco Ultra-Reliable Wireless Backhaul APs (#17232) - rudybroersma</li> <li>Fix discovery for IOS IE3200 with v17.12 (#17231) - rudybroersma</li> <li>Add outlet, temperature, humidity sensor support for Panduit PDUs (#17221) - mivsvit</li> <li>Added detection for Eltex MES2448 (#17211) - rhinoau</li> <li>Cisco 400g transceiver (#17209) - cgriffin352</li> <li>Eaton sc300 rectifer OS support (#17201) - mivsvit</li> <li>Correct discovery for Panduit G5 series PDUs (#17188) - mivsvit</li> <li>Properly display power supply numbers for YunShan OS in LibreNMS (#17184) - medeiros405</li> <li>FS S3900 switch sysobject additions (#17181) - mivsvit</li> <li>Support envPhysicalDescr for junos EVO transceivers (#17173) - peejaychilds</li> <li>Fix cisco qos missing title (#17158) - murrant</li> <li>Fix for issue #16895 (#17145) - rudybroersma</li> <li>Improve Zebra label printer support (#17106) - takyanagida</li> </ul>"},{"location":"General/Changelog/#webui_3","title":"Webui","text":"<ul> <li>Updated html/js/pace.min.js to 1.2.4 and added data-pace-options params to layouts/librenmsv1 (#17205) - w1ll14m</li> <li>Fix alert history table verbose detail display (#17178) - rhinoau</li> <li>Fix 'page' selection for the ARP Search page. $page wasn't supplied to pagination. (#17175) - w1ll14m</li> </ul>"},{"location":"General/Changelog/#alerting_3","title":"Alerting","text":"<ul> <li>Adding alert transport for ilert. (#15880) - lprosch</li> </ul>"},{"location":"General/Changelog/#snmp-traps_2","title":"Snmp Traps","text":"<ul> <li>Add trap handlers for loop detection traps (#17202) - stefanl234</li> </ul>"},{"location":"General/Changelog/#api_3","title":"Api","text":"<ul> <li>Added some additional fields to list_alerts api (#17234) - laf</li> </ul>"},{"location":"General/Changelog/#bug_3","title":"Bug","text":"<ul> <li>Mempool perc_warn, never update (#17271) - murrant</li> <li>Fix wireless sensor thresholds being lost (#17270) - murrant</li> <li>LDAP fixes (#17269) - murrant</li> <li>Bug - exception in IP::fromHexString (#17260) - PipoCanaja</li> <li>Fix discovery of new devices (#17252) - murrant</li> <li>Fix UCD not providing descr sometimes (#17249) - PipoCanaja</li> <li>Skip arp/nd on an interface when the interface is not found (#17244) - TheMysteriousX</li> <li>Bug - bgp-peers.inc.php - check for null in $bgpPeer (#17229) - PipoCanaja</li> <li>Resolve NAC error polling (#17227) - kruczek8989</li> <li>Block polling for new devices to avoid race condition (#17207) - laf</li> <li>No new devices should not trigger error log (#17206) - deajan</li> <li>Remove implied nullables PHP8.4 (#17193) - murrant</li> <li>Avoid to update for each discovery (#17170) - alagoutte</li> </ul>"},{"location":"General/Changelog/#cleanup_3","title":"Cleanup","text":"<ul> <li>LDAP fixes for newer PHP versions (#17257) - murrant</li> <li>Fix the final implicitly nullable parameters (#17256) - murrant</li> </ul>"},{"location":"General/Changelog/#documentation_3","title":"Documentation","text":"<ul> <li>Added Opsgenie EOL date and link to announcement (#17241) - laf</li> <li>Remove weathermap from docs (#17239) - murrant</li> <li>Fix sudo example block for SNMP Extend (#17212) - rhinoau</li> <li>Doco updates for syslog_hooks lnms config (#17210) - rhinoau</li> <li>Changed composer install to one line in install docs (#17191) - laf</li> <li>Update MySQL.md (#17187) - choicedraught</li> <li>Typo docs (#17182) - alagoutte</li> </ul>"},{"location":"General/Changelog/#translation_2","title":"Translation","text":"<ul> <li>Updated pt-BR translations (#17237) - fabriciotm</li> </ul>"},{"location":"General/Changelog/#tests_3","title":"Tests","text":"<ul> <li>Fix dusk tests (#17258) - murrant</li> <li>Mock dns resolver for LOC test (#17196) - murrant</li> </ul>"},{"location":"General/Changelog/#misc_3","title":"Misc","text":"<ul> <li>Lnms user:add: add roles when missing (#17265) - murrant</li> <li>Update discovery to remove disabled modem sensor in critical state (#17259) - rudybroersma</li> <li>Use raw string for Python regex (#17235) - sthen</li> <li>Updated leaflet doco for negative coordinates (#17197) - rhinoau</li> <li>Minor typo in PHP-FPM poller log (#17195) - runnane</li> <li>Typo in bdcom transceiver status sensor (#17189) - mivsvit</li> <li>Exclude irrelevant server state from Panorama servers (#17180) - rhinoau</li> </ul>"},{"location":"General/Changelog/#dependencies_3","title":"Dependencies","text":"<ul> <li>PHP package updates (#17254) - murrant</li> </ul>"},{"location":"General/Changelog/#2520","title":"25.2.0","text":"<p>(2025-02-20)</p> <p>A big thank you to the following 35 contributors this last month:</p> <ul> <li>murrant (42)</li> <li>laf (18)</li> <li>mpikzink (10)</li> <li>rhinoau (8)</li> <li>dot-mike (3)</li> <li>eskyuu (3)</li> <li>gcaceres123 (2)</li> <li>slashdoom (2)</li> <li>djamp42 (2)</li> <li>rudybroersma (2)</li> <li>mjonkers1989 (2)</li> <li>gunkaaa (2)</li> <li>w1ll14m (1)</li> <li>dependabot (1)</li> <li>lanbowan-eric (1)</li> <li>alagoutte (1)</li> <li>PipoCanaja (1)</li> <li>garryshtern (1)</li> <li>RayaneB75 (1)</li> <li>ssvenn (1)</li> <li>georgetasioulis (1)</li> <li>Martin22 (1)</li> <li>jasoncheng7115 (1)</li> <li>trwhiteaker (1)</li> <li>electrocret (1)</li> <li>STRUBartacus (1)</li> <li>visbits (1)</li> <li>Sweeny42 (1)</li> <li>DBardino (1)</li> <li>Galileo77 (1)</li> <li>Cameron-84 (1)</li> <li>Torstein-Eide (1)</li> <li>mggaskill (1)</li> <li>JFisherDNS (1)</li> <li>Calvario (1)</li> </ul> <p>Thanks to maintainers and others who helped with pull requests this month:</p> <ul> <li>laf (49)</li> <li>murrant (26)</li> <li>Jellyfrog (16)</li> <li>PipoCanaja (7)</li> <li>electrocret (2)</li> <li>ottorei (1)</li> </ul>"},{"location":"General/Changelog/#feature_3","title":"Feature","text":"<ul> <li>MAC OUI Vendor lookup (#17049) - murrant</li> </ul>"},{"location":"General/Changelog/#breaking-change_3","title":"Breaking Change","text":"<ul> <li>Storage Module update (#17024) - murrant</li> <li>Moved currentInUse from custom table to sensors for Cisco ASA (#16952) - laf</li> <li>Convert \"Recommended Replace Date\" from count to runtime sensor (#16892) - mpikzink</li> </ul>"},{"location":"General/Changelog/#security_3","title":"Security","text":"<ul> <li>Web add hosts fixes (#17162) - murrant</li> </ul>"},{"location":"General/Changelog/#device_4","title":"Device","text":"<ul> <li>Add support for wis bridge (#17168) - lanbowan-eric</li> <li>Add ArubaCX Transceiver (#17167) - alagoutte</li> <li>Updated Moxa vendor logo (#17146) - rhinoau</li> <li>Opengear devices: Add missing sensors &amp; support for new CM8100 model (#17144) - garryshtern</li> <li>Add power supply status to Yunshan OS (Huawei devices) (#17143) - gcaceres123</li> <li>Add power supply status to VRP OS (Huawei devices) (#17142) - gcaceres123</li> <li>Fix FS S3400 series polling using fs-bdcom mib (#17141) - RayaneB75</li> <li>Added additional snr support (#17133) - laf</li> <li>Add Palo Alto Panorama Server status (#17119) - rhinoau</li> <li>Workaround for Routeros LLDP local port index (#17118) - eskyuu</li> <li>Initial detection for Keenetic devices (#17117) - rhinoau</li> <li>Imcopower - added alarms and renamed temperature sensor (#17113) - Martin22</li> <li>CIMC C220 M6 Model / Serial / Version Fix (#17093) - djamp42</li> <li>Added support for WitchOS by Teltonika (#17074) - laf</li> <li>Updated detection for Tachyon devices (#17073) - laf</li> <li>Add Meraki MR WiFi Frequency polling (#17069) - rudybroersma</li> <li>Repair support for Meraki MR28 accesspoints. (#17065) - rudybroersma</li> <li>Hiveos has also added IQ Engine to the sysdescription (#17063) - mjonkers1989</li> <li>Additional support for SM-OS (#17061) - laf</li> <li>Fix cumulus mellanox test data (#17056) - murrant</li> <li>Aruba Instant use SnmpQuery (#17034) - murrant</li> <li>Convert timos to SnmpQuery (#17006) - murrant</li> <li>Adtran ALM series (#16984) - murrant</li> <li>Viptela vendor - Processor and Memory fix (#16983) - Cameron-84</li> <li>Add voltage and power sensors for Digipower PDUs (#16803) - gunkaaa</li> <li>Add authz_status field to Arubaos-CX NAC (#16453) - JFisherDNS</li> </ul>"},{"location":"General/Changelog/#webui_4","title":"Webui","text":"<ul> <li>Add Device page default to preferred SNMP settings (#17131) - rhinoau</li> <li>Increased z-index for navbar css to ensure it stays on top. (#17115) - ssvenn</li> <li>Fix Proxmox module: Correct parameter usage for VM and device ID (#17114) - georgetasioulis</li> <li>Adding the new OPNsense Logo (#17079) - STRUBartacus</li> <li>Update the ordering of sensors for Overview page (#17038) - laf</li> <li>Handle orphaned ports in port search (#17037) - murrant</li> <li>Dark mode for the new Sensor graphs addition (#17015) - DBardino</li> </ul>"},{"location":"General/Changelog/#alerting_4","title":"Alerting","text":"<ul> <li>Failed with 415 with content type not supported issue (#17110) - jasoncheng7115</li> <li>Updated Grafana transport and docs to support richer information (#16978) - laf</li> <li>Added ZenDuty Transport (#16972) - laf</li> <li>Fix Alert diff, Add new AlertStatus changed, Fix AlertLog UI not showing the correct details (#16313) - Calvario</li> </ul>"},{"location":"General/Changelog/#graphs_1","title":"Graphs","text":"<ul> <li>Graph has trouble detecting the range if the sensor is constant (#17096) - mpikzink</li> <li>Fix multi port graph (#17057) - murrant</li> </ul>"},{"location":"General/Changelog/#maps","title":"Maps","text":"<ul> <li>Fullscreen map fixes (#17136) - dot-mike</li> <li>Map not working on device overview with custom engine (#17134) - dot-mike</li> <li>Add custom maps node warning state display (#17036) - rhinoau</li> </ul>"},{"location":"General/Changelog/#discovery_2","title":"Discovery","text":"<ul> <li>Fix module override submodules (#17081) - murrant</li> <li>Work around bad bridge-mib implementations (#17030) - murrant</li> </ul>"},{"location":"General/Changelog/#polling","title":"Polling","text":"<ul> <li>Better handle issues with ipmitool/freeipmi so we try other types as \u2026 (#17066) - visbits</li> </ul>"},{"location":"General/Changelog/#bug_4","title":"Bug","text":"<ul> <li>Fix wlanAPChInterferenceIndex formula. Fixes Numeric value out of range: 1264 Out of range value for column 'interference' (#17171) - w1ll14m</li> <li>Fix storage_perc_warn not being applied to new storages (#17104) - murrant</li> <li>Fix port churn port assoc mode if is non-existent field (#17103) - murrant</li> <li>Fix poller submodule support (#17102) - murrant</li> <li>Fix OS override in device settings (#17095) - murrant</li> <li>Re-add ifIndex index to ports table (#17077) - murrant</li> <li>Replace use of $config with Config::get() in poll-billing (#17072) - laf</li> <li>Fix error in arp-table module (#17031) - murrant</li> </ul>"},{"location":"General/Changelog/#refactor_3","title":"Refactor","text":"<ul> <li>Remove ObjectCache notifications page (#17100) - murrant</li> <li>Convert Wireless to a modern module (#17086) - murrant</li> <li>Remove snmp_getnext_multi() (#17048) - murrant</li> <li>Get_device_id_by_port_id(x) =&gt; PortCache::get() (#16969) - mpikzink</li> <li>Zeropad() =&gt; Str::padLeft() (#16960) - mpikzink</li> <li>Improve logging for use of values from SNMP;  improve logging for determining multiplier/divisor from YAML (#16949) - gunkaaa</li> <li>Showconfig.inc.php changed svn_log() and svn_diff() to Process() (#16483) - mggaskill</li> </ul>"},{"location":"General/Changelog/#cleanup_4","title":"Cleanup","text":"<ul> <li>Add enable_syslog_hooks config defaults (#17130) - rhinoau</li> <li>Sizeof() =&gt; count() (#17108) - mpikzink</li> <li>Remove unused files (#17101) - murrant</li> <li>Remove Create sensor to state index (#17097) - mpikzink</li> <li>Check if json file is existing when saving test data (#17087) - murrant</li> <li>Remove echo calls from sensors polling (#17076) - murrant</li> <li>Remove echo from ports polling module (#17075) - murrant</li> <li>Remove some unused functions (part 2) (#17013) - mpikzink</li> <li>Remove unix agent global usage (#17003) - murrant</li> </ul>"},{"location":"General/Changelog/#documentation_4","title":"Documentation","text":"<ul> <li>InfluxDBv2.md Fix (#17124) - slashdoom</li> <li>Update Custom-Graphs.md (#17084) - slashdoom</li> <li>Update Macros.md (#17064) - dot-mike</li> <li>Lnms dev:check modules only (#17044) - murrant</li> <li>Api force_add requires credentials (#17019) - murrant</li> <li>Doc application and RRDCached, refactoring and formatting (#16920) - Torstein-Eide</li> </ul>"},{"location":"General/Changelog/#translation_3","title":"Translation","text":"<ul> <li>Settings typo (#17083) - electrocret</li> <li>German typo correction for \"channel\" (#17011) - Galileo77</li> </ul>"},{"location":"General/Changelog/#tests_4","title":"Tests","text":"<ul> <li>Qos test fix (#17050) - eskyuu</li> <li>Wireless tests order data (#17016) - murrant</li> <li>Fix Tests for PHP IPv6 reserved handling changes (#17009) - murrant</li> </ul>"},{"location":"General/Changelog/#misc_4","title":"Misc","text":"<ul> <li>Updated Siklu vendor logo (#17120) - rhinoau</li> <li>Update detection for Planet WDAP devices (#17116) - rhinoau</li> <li>Fix comment syntax in rrdcached.service (#17109) - trwhiteaker</li> <li>Add support for Cisco CIMC State Sensors (#17085) - djamp42</li> <li>Correct accidental addition of $agent_raw variable in unix-agent.inc.php (#17060) - Sweeny42</li> <li>Storage deleted removal notification and alert rule (#17055) - murrant</li> <li>Add enable_proxmox to config defs (#17032) - murrant</li> <li>Remove some unused functions (#17005) - mpikzink</li> <li>StringHelper::shortenText(x) =&gt; Str::limit(x) (#16973) - mpikzink</li> <li>Allow ifIndex swaps during port discovery (#16686) - eskyuu</li> </ul>"},{"location":"General/Changelog/#internal-features_2","title":"Internal Features","text":"<ul> <li>Show unused cached snmp queries (#17004) - murrant</li> <li>Implement PortCache (#17002) - murrant</li> </ul>"},{"location":"General/Changelog/#mibs_1","title":"Mibs","text":"<ul> <li>Update SCHLEIFENBAUER Mibs (#17067) - mjonkers1989</li> </ul>"},{"location":"General/Changelog/#dependencies_4","title":"Dependencies","text":"<ul> <li>Bump elliptic from 6.6.0 to 6.6.1 (#17169) - dependabot</li> <li>Update ENTITY and fix consequences (#17147) - PipoCanaja</li> <li>Update PHP dependencies (#17059) - murrant</li> </ul>"},{"location":"General/Changelog/#2510","title":"25.1.0","text":"<p>(2025-01-16)</p> <p>A big thank you to the following 32 contributors this last month:</p> <ul> <li>murrant (14)</li> <li>mpikzink (12)</li> <li>PipoCanaja (7)</li> <li>laf (6)</li> <li>jasoncheng7115 (5)</li> <li>adamsweet (3)</li> <li>takyanagida (2)</li> <li>btriller (1)</li> <li>slashdoom (1)</li> <li>jakejakejakejakejakejake (1)</li> <li>ZPrimed (1)</li> <li>dko-strd (1)</li> <li>nickhilliard (1)</li> <li>fbouynot (1)</li> <li>trakennedy (1)</li> <li>garryshtern (1)</li> <li>dependabot (1)</li> <li>TotalGriffLock (1)</li> <li>dlangille (1)</li> <li>systeembeheerder (1)</li> <li>makriska (1)</li> <li>MelonicOverlord (1)</li> <li>r-duran (1)</li> <li>Martin22 (1)</li> <li>kruczek8989 (1)</li> <li>eg2965 (1)</li> <li>rudybroersma (1)</li> <li>rinsekloek (1)</li> <li>JacobErnst98 (1)</li> <li>Calvario (1)</li> <li>samburney (1)</li> <li>pozar (1)</li> </ul> <p>Thanks to maintainers and others that helped with pull requests this month:</p> <ul> <li>laf (41)</li> <li>murrant (17)</li> <li>PipoCanaja (13)</li> <li>Jellyfrog (3)</li> <li>paulgear (1)</li> <li>SourceDoctor (1)</li> <li>Taarek (1)</li> <li>electrocret (1)</li> <li>dorkmatt (1)</li> </ul>"},{"location":"General/Changelog/#breaking-change_4","title":"Breaking Change","text":"<ul> <li>Remove wrong netvision sensors (#16943) - mpikzink</li> <li>Add datetime and level to librenms.log (#16330) - Calvario</li> </ul>"},{"location":"General/Changelog/#device_5","title":"Device","text":"<ul> <li>Timos MPLS ignore bad rows (#16997) - murrant</li> <li>Junos bgp non-null fallbacks for columns that are not nullable (#16993) - murrant</li> <li>Fix fs-centec bias thresholds (#16990) - murrant</li> <li>Fix Junos BGP polling (#16988) - murrant</li> <li>Added additional voltage sensor for RouterOS (#16979) - laf</li> <li>Horizon Quantum Device Support (#16970) - slashdoom</li> <li>Add support for UTAX printers (#16951) - dko-strd</li> <li>Stulz wib8000 fixes (#16948) - nickhilliard</li> <li>Fix some issues with aix returning \"NULL\" (#16947) - murrant</li> <li>Added some additional ip pool sensors (#16946) - laf</li> <li>Corrected index for EXOS sensors (#16928) - laf</li> <li>New HW revision of 7130L (#16919) - garryshtern</li> <li>Added DHCP Count for RouterOS (Mikrotik) (#16913) - laf</li> <li>DELL drac: Move the remaining inc.php sensors to YAML (#16912) - mpikzink</li> <li>Cisco SIP voice count sensor (#16902) - PipoCanaja</li> <li>Procurve handle HPE rebrand (#16897) - TotalGriffLock</li> <li>Skip creation of \"Stack Ring - Redundant\" sensor for Cisco StackWise Virtual (#16890) - makriska</li> <li>Added sensor monitoring for IBM 3584 Tape Library (#16884) - MelonicOverlord</li> <li>Tachyon - Added wireless interface to ports (#16867) - Martin22</li> <li>Fix for Cisco Transceivers (#16856) - PipoCanaja</li> <li>Add new vendor bitstream (#16850) - kruczek8989</li> <li>Additional HPE Procurve Hardware State Data (#16843) - eg2965</li> <li>Fix for FortiGate discovery - Issue ID #16544 (#16753) - rudybroersma</li> <li>Initial detection with USB port detection (#16718) - mpikzink</li> <li>Nokia ISAM added extra context to also snmpwalk the ihub for uplink ports (#16676) - rinsekloek</li> <li>Support for ESPHOME OS (#16571) - JacobErnst98</li> <li>Add support for Cisco ISA devices (#16300) - samburney</li> <li>Support for Ubiquiti UISP Fiber OLT XGS (#15742) - pozar</li> </ul>"},{"location":"General/Changelog/#webui_5","title":"Webui","text":"<ul> <li>Fix time intervals sometimes being wrong (#16995) - murrant</li> <li>Fix rrdgraph comment typo (#16956) - ZPrimed</li> <li>Added time period names: threeday, tenday (#16932) - takyanagida</li> <li>Fixed port error red flag staying after error correction on FDB table and ARP table (#16907) - takyanagida</li> <li>Improve url validation check (#16900) - murrant</li> <li>Fix routes display (#16898) - murrant</li> </ul>"},{"location":"General/Changelog/#alerting_5","title":"Alerting","text":"<ul> <li>Rename Jira Service Managment transport (#16195) (#16967) - jakejakejakejakejakejake</li> <li>Fix Graph problems in Mail (#16918) - mpikzink</li> <li>Update queuemanager.py: Single element args tuple breaks alerts.php running (#16873) - r-duran</li> </ul>"},{"location":"General/Changelog/#graphs_2","title":"Graphs","text":"<ul> <li>Dark mode for the new Sensor graphs (#16985) - mpikzink</li> </ul>"},{"location":"General/Changelog/#snmp-traps_3","title":"Snmp Traps","text":"<ul> <li>Add support for Cisco-NS-MIB traps (#16944) - adamsweet</li> <li>Add HWG Poseidon-MIB traps (#16934) - adamsweet</li> <li>Add Axis camera alarm traps (#16925) - adamsweet</li> </ul>"},{"location":"General/Changelog/#discovery_3","title":"Discovery","text":"<ul> <li>Extend STP discovery on Cisco devices + test fix for #15742 (#16887) - PipoCanaja</li> </ul>"},{"location":"General/Changelog/#polling_1","title":"Polling","text":"<ul> <li>Ensure ordering of poller modules (#16929) - murrant</li> </ul>"},{"location":"General/Changelog/#bug_5","title":"Bug","text":"<ul> <li>Fix SLA incomplete snmpwalk replies (#16939) - PipoCanaja</li> <li>OrderBy snmp_index because qos.title is not unique (#16938) - PipoCanaja</li> <li>Null strings in Junos Transceivers code (#16937) - PipoCanaja</li> </ul>"},{"location":"General/Changelog/#refactor_4","title":"Refactor","text":"<ul> <li>Additional type declarations to Eventlog (#16968) - mpikzink</li> <li>Cast_number() =&gt; Number::cast() (#16963) - mpikzink</li> <li>Get_dev_attribs($device_id) =&gt; Use the Model Method (#16961) - mpikzink</li> <li>Accesspoint_by_id(x) =&gt; AccessPoint::find(x) (#16958) - mpikzink</li> <li>Refractor some Helpers part2 (#16935) - mpikzink</li> <li>Refractor some Helpers (#16926) - mpikzink</li> </ul>"},{"location":"General/Changelog/#documentation_5","title":"Documentation","text":"<ul> <li>Update authentication docs (#16996) - murrant</li> <li>Update Install-LibreNMS.md (#16982) - btriller</li> <li>Add php-fpm requirements on Fedora for Applications (#16933) - fbouynot</li> <li>Update Dispatcher-Service.md (#16921) - trakennedy</li> <li>Update config.php.default (#16896) - dlangille</li> <li>Update Authentication.md (#16894) - systeembeheerder</li> <li>Plugin docs udpate (#16891) - murrant</li> </ul>"},{"location":"General/Changelog/#translation_4","title":"Translation","text":"<ul> <li>Add multiple translation files for zh-TW. (#16941) - jasoncheng7115</li> <li>Zh-TW components.php (#16931) - jasoncheng7115</li> <li>Zh-TW port.php (#16930) - jasoncheng7115</li> <li>Update zh-TW.json (#16924) - jasoncheng7115</li> <li>Map.php - Traditional Chinese Translation (#16906) - jasoncheng7115</li> </ul>"},{"location":"General/Changelog/#internal-features_3","title":"Internal Features","text":"<ul> <li>Snmpsim extra check (#16936) - murrant</li> </ul>"},{"location":"General/Changelog/#dependencies_5","title":"Dependencies","text":"<ul> <li>Bump tecnickcom/tcpdf from 6.7.7 to 6.8.0 (#16914) - dependabot</li> </ul>"},{"location":"General/Changelog/#old-changelogs","title":"Old Changelogs","text":""},{"location":"General/Releases/","title":"Choosing a release","text":"<p>We try to ensure that breaking changes aren't introduced by utilising various automated code, syntax and unit testing along with manual code review. However bugs can and do get introduced as well as major refactoring to improve the quality of the code base.</p> <p>We have two branches available for you to use. The default is the <code>master</code> branch.</p>"},{"location":"General/Releases/#development-branch","title":"Development branch","text":"<p>Our <code>master</code> branch is our dev branch, this is actively commited to and it's not uncommon for multiple commits to be merged in daily. As such sometimes changes will be introduced which will cause unintended issues. If this happens we are usually quick to fix or revert those changes.</p> <p>We appreciate everyone that runs this branch as you are in essence secondary testers to the automation and manually testing that is done during the merge stages.</p> <p>You can configure your install (this is the default) to use this branch by setting:</p> <p>system/updates</p> <pre><code>lnms config:set update_channel master\n</code></pre> <p>Then ensure you are on the master branch by doing:</p> <pre><code>cd /opt/librenms\ngit checkout master\n./daily.sh\n</code></pre>"},{"location":"General/Releases/#stable-branch","title":"Stable branch","text":"<p>With this in mind, we provide a monthly stable release which is released on or around the middle of the month, usually on a weekday. Merging of pull requests (aside from Bug fixes) are typically stopped days leading up to the release to ensure that we have a clean working branch at that point.</p> <p>The changelog will be updated and will reference the release number and date so you can see what changes have been made since the last release.</p> <p>To switch to using stable branches you can set:</p> <p>system/updates</p> <pre><code>lnms config:set update_channel release\n</code></pre> <p>This will pause updates until the next stable release, at that time LibreNMS will update to the stable release and continue to only update to stable releases.</p> <p>Warning</p> <p>Downgrading is not supported on LibreNMS and will likely cause bugs.</p>"},{"location":"General/Security/","title":"General","text":"<p>Like any good software we take security seriously. However, bugs do make it into the software along with the history of the code base we inherited. It's how we deal with identified vulnerabilities that should show that we take things seriously.</p>"},{"location":"General/Security/#securing-your-install","title":"Securing your install","text":"<p>As with any system of this nature, we highly recommend that you restrict access to the install via a firewall or VPN.</p> <p>Please ensure you keep your install up to date.</p>"},{"location":"General/Security/#enable-https","title":"Enable HTTPS","text":"<p>It is also highly recommended that the Web interface is protected with an SSL certificate such as ones provided by LetsEncrypt.</p>"},{"location":"General/Security/#secure-session-cookies","title":"Secure Session Cookies","text":"<p>Once you have enabled HTTPS for your install, you should set <code>SESSION_SECURE_COOKIE=true</code> in your .env file.  This will require cookies to be transferred by secure protocol and prevent any MiM attacks against it.</p>"},{"location":"General/Security/#trusted-proxies","title":"Trusted Proxies","text":"<p>When using a reverse proxy, you may restrict the hosts allowed to forward headers to LibreNMS. By default this allows all proxies, due to legacy reasons.</p> <p>Set APP_TRUSTED_PROXIES in your .env to an empty string or the urls to the proxies allowed to forward.</p>"},{"location":"General/Security/#reporting-vulnerabilities","title":"Reporting vulnerabilities","text":"<p>Like anyone, we appreciate the work people put in to find flaws in software and welcome anyone to do so with LibreNMS, this will lead to better quality and more secure software for everyone.</p> <p>If you think you've found a vulnerability and want to discuss it with some of the core team then you can contact us on Discord and we will endeavour to get back to as quick as we can, this is usually within 24 hours.</p> <p>We are happy to attribute credit to the findings, but we ask that we're given a chance to patch any vulnerability before public disclosure so that our users can update as soon as a fix is available.</p>"},{"location":"General/Updating/","title":"Updating an Install","text":"<p>By default, LibreNMS is set to automatically update once a day at  00:19 hours. If you have disabled this feature then you can perform a manual update.</p>"},{"location":"General/Updating/#manual-update","title":"Manual update","text":"<p>If you would like to perform a manual update then you can do this by running the following command as the <code>librenms</code> user:</p> <pre><code>./daily.sh\n</code></pre> <p>This will update the core LibreNMS files and also update the database structure if any are available.</p>"},{"location":"General/Updating/#advanced-users","title":"Advanced users","text":"<p>If you absolutely must update manually without using <code>./daily.sh</code> then you can do so by running the following commands:</p> <pre><code>cd /opt/librenms\ngit pull\nrm bootstrap/cache/*.php\n./scripts/composer_wrapper.php install --no-dev\n./lnms migrate\n./validate.php\n</code></pre>"},{"location":"General/Updating/#disabling-automatic-updates","title":"Disabling automatic updates","text":"<p>LibreNMS by default performs updates on a daily basis. This can be disabled in the WebUI:</p> <p>Warning</p> <p>You should never remove daily.sh from the cronjob! This does database cleanup and other processes in addition to updating.</p> <p>system/updates</p> <pre><code>lnms config:set update false\n</code></pre>"},{"location":"General/Welcome-to-Observium-users/","title":"Welcome to Observium users","text":"<p>LibreNMS is a fork of Observium.  The reason for the fork has nothing to do with Observium's move to community vs. paid versions.  It is simply that we have different priorities and values to the Observium development team.  We decided to fork (reluctantly) because we like using Observium, but we want to collaborate on a community-based project with like-minded IT professionals.  See README.md and the references there for more information about the kind of community we're trying to promote.</p> <p>LibreNMS was forked from the last GPL-licensed version of Observium.</p> <p>Thanks to one of our users, Dan Brown, who has written a migration script, you can easily move your Observium install over to LibreNMS. This also takes care of moving from one CPU architecture to another. Give it a try :)</p> <p>How LibreNMS will be different from Observium:</p> <ul> <li>We will have an inclusive community, where it's OK to ask stupid   questions, and OK to ask for things that aren't on the roadmap.  If you'd   like to see something added, add or comment on the relevant issue in our   Community forum.</li> <li>Development decisions will be community-driven.  We want to make software   that fulfills its users' needs.</li> <li>There are no plans for a paid version, and we don't anticipate this ever   changing.</li> <li>There are no current plans for paid support, but this may be added later   if there is sufficient demand.</li> <li>We use git for version control and GitHub for hosting to make it as easy   and painless as possible to create forked or private versions.</li> </ul> <p>Reasons why you might want to use Observium instead of LibreNMS:</p> <ul> <li>You have a financial investment in Observium and aren't concerned about   community contributions.</li> <li>You don't like the GNU General Public License, version 3 or the   philosophy of Free Software/copyleft in general.</li> </ul> <p>Reasons why you might want to use LibreNMS instead of Observium:</p> <ul> <li>You want to work with others on the project, knowing that your   investment of time and effort will not be wasted.</li> <li>You want to add and experiment with features that are not a priority for   the Observium developers.  See CONTRIBUTING for more details.</li> <li>You want to make use of the additional features LibreNMS can offer.</li> </ul>"},{"location":"Installation/Docker/","title":"Docker","text":"<p>An official LibreNMS docker image based on Alpine Linux and Nginx is available on DockerHub.</p>"},{"location":"Installation/Docker/#documentation","title":"Documentation","text":"<p>Full install and configuration documentation can be found on the GitHub repository.</p>"},{"location":"Installation/Docker/#quick-install","title":"Quick install","text":"<ol> <li>Install docker: https://docs.docker.com/engine/install/</li> <li>Download and unzip composer files: <pre><code>mkdir librenms\ncd librenms\nwget https://github.com/librenms/docker/archive/refs/heads/master.zip\nunzip master.zip\ncd docker-master/examples/compose\n</code></pre></li> <li>Set a new mysql password in .env and inspect compose.yml</li> <li>Bring up the docker containers <pre><code>sudo docker compose -f compose.yml up -d\n</code></pre></li> <li>Open webui to finish configuration. <code>http://localhost:8000</code> (use the correct ip or name instead of localhost)</li> </ol>"},{"location":"Installation/Images/","title":"LibreNMS VMs","text":"<p>Pre built virtual machines are no longer support or maintained.</p> <p>Please use Docker instead.</p>"},{"location":"Installation/Install-LibreNMS/","title":"Install LibreNMS","text":""},{"location":"Installation/Install-LibreNMS/#prepare-linux-server","title":"Prepare Linux Server","text":"<p>You should have an installed Linux server running one of the supported OS. Make sure you select your server's OS in the tabbed options below. Choice of web server is your preference, NGINX is recommended.</p> <p>Connect to the server command line and follow the instructions below.</p> <p>Note</p> <p>These instructions assume you are the root user. If you are not, prepend <code>sudo</code> to the shell commands (the ones that aren't at <code>mysql&gt;</code> prompts) or temporarily become a user with root privileges with <code>sudo -s</code> or <code>sudo -i</code>.</p> <p>Please note the minimum supported PHP version is 8.2</p>"},{"location":"Installation/Install-LibreNMS/#install-required-packages","title":"Install Required Packages","text":"Ubuntu 24.04Ubuntu 22.04CentOS 8Debian 12Debian 13 NGINX <pre><code>apt install acl curl fping git graphviz imagemagick mariadb-client mariadb-server mtr-tiny nginx-full nmap php-cli php-curl php-fpm php-gd php-gmp php-json php-mbstring php-mysql php-snmp php-xml php-zip rrdtool snmp snmpd unzip python3-command-runner python3-pymysql python3-dotenv python3-redis python3-setuptools python3-psutil python3-systemd python3-pip whois traceroute\n</code></pre> NGINXApache <pre><code>apt install software-properties-common\nLC_ALL=C.UTF-8 add-apt-repository ppa:ondrej/php -y\napt update\napt install acl curl fping git graphviz imagemagick mariadb-client mariadb-server mtr-tiny nginx-full nmap php8.3-cli php8.3-curl php8.3-fpm php8.3-gd php8.3-gmp php8.3-mbstring php8.3-mysql php8.3-snmp php8.3-xml php8.3-zip rrdtool snmp snmpd unzip python3-pymysql python3-dotenv python3-redis python3-setuptools python3-psutil python3-systemd python3-pip whois traceroute\n</code></pre> <pre><code>apt install software-properties-common\nadd-apt-repository universe\nLC_ALL=C.UTF-8 add-apt-repository ppa:ondrej/php\napt update\napt install acl curl apache2 fping git graphviz imagemagick libapache2-mod-fcgid mariadb-client mariadb-server mtr-tiny nmap php-cli php-curl php-fpm php-gd php-gmp php-json php-mbstring php-mysql php-snmp php-xml php-zip rrdtool snmp snmpd whois python3-pymysql python3-dotenv python3-redis python3-setuptools python3-systemd python3-pip unzip traceroute\n</code></pre> NGINXApache <pre><code>dnf -y install epel-release\ndnf -y install dnf-utils http://rpms.remirepo.net/enterprise/remi-release-8.rpm\ndnf module reset php\ndnf module enable php:8.2\ndnf install bash-completion cronie fping git ImageMagick mariadb-server mtr net-snmp net-snmp-utils nginx nmap php-fpm php-cli php-common php-curl php-gd php-gmp php-json php-mbstring php-process php-snmp php-xml php-zip php-mysqlnd python3 python3-PyMySQL python3-redis python3-memcached python3-pip python3-systemd rrdtool unzip\n</code></pre> <pre><code>dnf -y install epel-release\ndnf -y install dnf-utils http://rpms.remirepo.net/enterprise/remi-release-8.rpm\ndnf module reset php\ndnf module enable php:8.2\ndnf install bash-completion cronie fping gcc git httpd ImageMagick mariadb-server mtr net-snmp net-snmp-utils nmap php-fpm php-cli php-common php-curl php-gd php-gmp php-json php-mbstring php-process php-snmp php-xml php-zip php-mysqlnd python3 python3-devel python3-PyMySQL python3-redis python3-memcached python3-pip python3-systemd rrdtool unzip \n</code></pre> NGINX <pre><code>apt install lsb-release ca-certificates wget acl curl fping git graphviz imagemagick mariadb-client mariadb-server mtr-tiny nginx-full nmap php-cli php-curl php-fpm php-gd php-gmp php-mbstring php-mysql php-snmp php-xml php-zip python3-dotenv python3-pymysql python3-redis python3-setuptools python3-systemd python3-pip rrdtool snmp snmpd unzip whois\n</code></pre> NGINX <pre><code>apt install lsb-release ca-certificates wget acl curl fping git graphviz imagemagick mariadb-client mariadb-server mtr-tiny nginx-full nmap php-cli php-curl php-fpm php-gd php-gmp php-mbstring php-mysql php-snmp php-xml php-zip python3-command-runner python3-dotenv python3-pymysql python3-redis python3-setuptools python3-systemd python3-pip rrdtool snmp snmpd unzip whois\n</code></pre>"},{"location":"Installation/Install-LibreNMS/#add-librenms-user","title":"Add librenms user","text":"<pre><code>useradd librenms -d /opt/librenms -M -r -s \"$(which bash)\"\n</code></pre>"},{"location":"Installation/Install-LibreNMS/#download-librenms","title":"Download LibreNMS","text":"<pre><code>cd /opt\ngit clone https://github.com/librenms/librenms.git\n</code></pre>"},{"location":"Installation/Install-LibreNMS/#set-permissions","title":"Set permissions","text":"<pre><code>chown -R librenms:librenms /opt/librenms\nchmod 771 /opt/librenms\nsetfacl -d -m g::rwx /opt/librenms/rrd /opt/librenms/logs /opt/librenms/bootstrap/cache/ /opt/librenms/storage/\nsetfacl -R -m g::rwx /opt/librenms/rrd /opt/librenms/logs /opt/librenms/bootstrap/cache/ /opt/librenms/storage/\n</code></pre>"},{"location":"Installation/Install-LibreNMS/#install-php-dependencies","title":"Install PHP dependencies","text":"<p>Change to the LibreNMS user: <pre><code>su - librenms\n</code></pre></p> <p>Then run the composer wrapper script and exit back to the root user: <pre><code>./scripts/composer_wrapper.php install --no-dev\nexit\n</code></pre></p> <p>Note</p> <p>Sometimes when there is a proxy used to gain internet access, the above script may fail. The workaround is to install the <code>composer</code> package manually. For a global installation: <pre><code>wget https://getcomposer.org/composer-stable.phar\nmv composer-stable.phar /usr/bin/composer\nchmod +x /usr/bin/composer\n</code></pre></p>"},{"location":"Installation/Install-LibreNMS/#set-timezone","title":"Set timezone","text":"<p>See https://php.net/manual/en/timezones.php for a list of supported timezones.  Valid examples are: \"America/New_York\", \"Australia/Brisbane\", \"Etc/UTC\". Ensure date.timezone is set in php.ini to your preferred time zone.</p> Ubuntu 24.04Ubuntu 22.04CentOS 8Debian 12Debian 13 <pre><code>vi /etc/php/8.3/fpm/php.ini\nvi /etc/php/8.3/cli/php.ini\n</code></pre> <pre><code>vi /etc/php/8.3/fpm/php.ini\nvi /etc/php/8.3/cli/php.ini\n</code></pre> <pre><code>vi /etc/php.ini\n</code></pre> <pre><code>vi /etc/php/8.2/fpm/php.ini\nvi /etc/php/8.2/cli/php.ini\n</code></pre> <pre><code>vi /etc/php/8.4/fpm/php.ini\nvi /etc/php/8.4/cli/php.ini\n</code></pre> <p>Remember to set the system timezone as well.</p> <pre><code>timedatectl set-timezone Etc/UTC\n</code></pre>"},{"location":"Installation/Install-LibreNMS/#configure-mariadb","title":"Configure MariaDB","text":"Ubuntu 24.04Ubuntu 22.04CentOS 8Debian 12Debian 13 <pre><code>vi /etc/mysql/mariadb.conf.d/50-server.cnf\n</code></pre> <pre><code>vi /etc/mysql/mariadb.conf.d/50-server.cnf\n</code></pre> <pre><code>vi /etc/my.cnf.d/mariadb-server.cnf\n</code></pre> <pre><code>vi /etc/mysql/mariadb.conf.d/50-server.cnf\n</code></pre> <pre><code>vi /etc/mysql/mariadb.conf.d/50-server.cnf\n</code></pre> <p>Within the <code>[mysqld]</code> section add:</p> <pre><code>innodb_file_per_table=1\nlower_case_table_names=0\n</code></pre> <p>Then restart MariaDB</p> <p><pre><code>systemctl enable mariadb\nsystemctl restart mariadb\n</code></pre> Start MariaDB client</p> <pre><code>mysql -u root\n</code></pre> <p>Warning</p> <p>Change the 'password' below to something secure.</p> <pre><code>CREATE DATABASE librenms CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\nCREATE USER 'librenms'@'localhost' IDENTIFIED BY 'password';\nGRANT ALL PRIVILEGES ON librenms.* TO 'librenms'@'localhost';\nexit\n</code></pre>"},{"location":"Installation/Install-LibreNMS/#configure-php-fpm","title":"Configure PHP-FPM","text":"Ubuntu 24.04Ubuntu 22.04CentOS 8Debian 12Debian 13 <pre><code>cp /etc/php/8.3/fpm/pool.d/www.conf /etc/php/8.3/fpm/pool.d/librenms.conf\nvi /etc/php/8.3/fpm/pool.d/librenms.conf\n</code></pre> <pre><code>cp /etc/php/8.3/fpm/pool.d/www.conf /etc/php/8.3/fpm/pool.d/librenms.conf\nvi /etc/php/8.3/fpm/pool.d/librenms.conf\n</code></pre> <pre><code>cp /etc/php-fpm.d/www.conf /etc/php-fpm.d/librenms.conf\nvi /etc/php-fpm.d/librenms.conf\n</code></pre> <pre><code>cp /etc/php/8.2/fpm/pool.d/www.conf /etc/php/8.2/fpm/pool.d/librenms.conf\nvi /etc/php/8.2/fpm/pool.d/librenms.conf\n</code></pre> <pre><code>cp /etc/php/8.4/fpm/pool.d/www.conf /etc/php/8.4/fpm/pool.d/librenms.conf\nvi /etc/php/8.4/fpm/pool.d/librenms.conf\n</code></pre> <p>Change <code>[www]</code> to <code>[librenms]</code>: <pre><code>[librenms]\n</code></pre></p> <p>Change <code>user</code> and <code>group</code> to \"librenms\": <pre><code>user = librenms\ngroup = librenms\n</code></pre></p> <p>Change <code>listen</code> to a unique path that must match your webserver's config (<code>fastcgi_pass</code> for NGINX and <code>SetHandler</code> for Apache) : <pre><code>listen = /run/php-fpm-librenms.sock\n</code></pre></p> <p>If there are no other PHP web applications on this server, you may remove www.conf to save some resources. Feel free to tune the performance settings in librenms.conf to meet your needs.</p>"},{"location":"Installation/Install-LibreNMS/#configure-web-server","title":"Configure Web Server","text":"Ubuntu 24.04Ubuntu 22.04CentOS 8Debian 12Debian 13 NGINX <pre><code>vi /etc/nginx/conf.d/librenms.conf\n</code></pre> <p>Add the following config, edit <code>server_name</code> as required:</p> <pre><code>server {\n listen      80;\n server_name librenms.example.com;\n root        /opt/librenms/html;\n index       index.php;\n\n charset utf-8;\n gzip on;\n gzip_types text/css application/javascript text/javascript application/x-javascript image/svg+xml text/plain text/xsd text/xsl text/xml image/x-icon;\n location / {\n  try_files $uri $uri/ /index.php?$query_string;\n }\n location ~ [^/]\\.php(/|$) {\n  fastcgi_pass unix:/run/php-fpm-librenms.sock;\n  fastcgi_split_path_info ^(.+\\.php)(/.+)$;\n  include fastcgi.conf;\n }\n location ~ /\\.(?!well-known).* {\n  deny all;\n }\n}\n</code></pre> <pre><code>rm /etc/nginx/sites-enabled/default /etc/nginx/sites-available/default\nsystemctl restart nginx\nsystemctl restart php8.3-fpm\n</code></pre> NGINX <pre><code>vi /etc/nginx/conf.d/librenms.conf\n</code></pre> <p>Add the following config, edit <code>server_name</code> as required:</p> <pre><code>server {\n listen      80;\n server_name librenms.example.com;\n root        /opt/librenms/html;\n index       index.php;\n\n charset utf-8;\n gzip on;\n gzip_types text/css application/javascript text/javascript application/x-javascript image/svg+xml text/plain text/xsd text/xsl text/xml image/x-icon;\n location / {\n  try_files $uri $uri/ /index.php?$query_string;\n }\n location ~ [^/]\\.php(/|$) {\n  fastcgi_pass unix:/run/php-fpm-librenms.sock;\n  fastcgi_split_path_info ^(.+\\.php)(/.+)$;\n  include fastcgi.conf;\n }\n location ~ /\\.(?!well-known).* {\n  deny all;\n }\n}\n</code></pre> <pre><code>rm /etc/nginx/sites-enabled/default\nsystemctl restart nginx\nsystemctl restart php8.3-fpm\n</code></pre> NGINXApache <pre><code>vi /etc/nginx/conf.d/librenms.conf\n</code></pre> <p>Add the following config, edit <code>server_name</code> as required:</p> <pre><code>server {\n listen      80;\n server_name librenms.example.com;\n root        /opt/librenms/html;\n index       index.php;\n\n charset utf-8;\n gzip on;\n gzip_types text/css application/javascript text/javascript application/x-javascript image/svg+xml text/plain text/xsd text/xsl text/xml image/x-icon;\n location / {\n  try_files $uri $uri/ /index.php?$query_string;\n }\n location ~ [^/]\\.php(/|$) {\n  fastcgi_pass unix:/run/php-fpm-librenms.sock;\n  fastcgi_split_path_info ^(.+\\.php)(/.+)$;\n  include fastcgi.conf;\n }\n location ~ /\\.(?!well-known).* {\n  deny all;\n }\n}\n</code></pre> <p>NOTE: If this is the only site you are hosting on this server (it should be :)) then you will need to disable the default site.</p> <p>Delete the <code>server</code> section from <code>/etc/nginx/nginx.conf</code></p> <pre><code>systemctl enable --now nginx\nsystemctl enable --now php-fpm\n</code></pre> <p>Create the librenms.conf:</p> <pre><code>vi /etc/httpd/conf.d/librenms.conf\n</code></pre> <p>Add the following config, edit <code>ServerName</code> as required:</p> <pre><code>&lt;VirtualHost *:80&gt;\n  DocumentRoot /opt/librenms/html/\n  ServerName  librenms.example.com\n\n  AllowEncodedSlashes NoDecode\n  &lt;Directory \"/opt/librenms/html/\"&gt;\n    Require all granted\n    AllowOverride All\n    Options FollowSymLinks MultiViews\n  &lt;/Directory&gt;\n\n  # Enable http authorization headers\n  &lt;IfModule setenvif_module&gt;\n    SetEnvIfNoCase ^Authorization$ \"(.+)\" HTTP_AUTHORIZATION=$1\n  &lt;/IfModule&gt;\n\n  &lt;FilesMatch \".+\\.php$\"&gt;\n    SetHandler \"proxy:unix:/run/php-fpm-librenms.sock|fcgi://localhost\"\n  &lt;/FilesMatch&gt;\n&lt;/VirtualHost&gt;\n</code></pre> <p>NOTE: If this is the only site you are hosting on this server (it should be :)) then you will need to disable the default site. <code>rm -f /etc/httpd/conf.d/welcome.conf</code></p> <pre><code>systemctl enable --now httpd\nsystemctl enable --now php-fpm\n</code></pre> NGINX <pre><code>vi /etc/nginx/sites-enabled/librenms.vhost\n</code></pre> <p>Add the following config, edit <code>server_name</code> as required:</p> <pre><code>server {\n listen      80;\n server_name librenms.example.com;\n root        /opt/librenms/html;\n index       index.php;\n\n charset utf-8;\n gzip on;\n gzip_types text/css application/javascript text/javascript application/x-javascript image/svg+xml text/plain text/xsd text/xsl text/xml image/x-icon;\n location / {\n  try_files $uri $uri/ /index.php?$query_string;\n }\n location ~ [^/]\\.php(/|$) {\n  fastcgi_pass unix:/run/php-fpm-librenms.sock;\n  fastcgi_split_path_info ^(.+\\.php)(/.+)$;\n  include fastcgi.conf;\n }\n location ~ /\\.(?!well-known).* {\n  deny all;\n }\n}\n</code></pre> <pre><code>rm /etc/nginx/sites-enabled/default\nsystemctl reload nginx\nsystemctl restart php8.2-fpm\n</code></pre> NGINX <pre><code>vi /etc/nginx/sites-enabled/librenms.vhost\n</code></pre> <p>Add the following config, edit <code>server_name</code> as required:</p> <pre><code>server {\n listen      80;\n server_name librenms.example.com;\n root        /opt/librenms/html;\n index       index.php;\n\n charset utf-8;\n gzip on;\n gzip_types text/css application/javascript text/javascript application/x-javascript image/svg+xml text/plain text/xsd text/xsl text/xml image/x-icon;\n location / {\n  try_files $uri $uri/ /index.php?$query_string;\n }\n location ~ [^/]\\.php(/|$) {\n  fastcgi_pass unix:/run/php-fpm-librenms.sock;\n  fastcgi_split_path_info ^(.+\\.php)(/.+)$;\n  include fastcgi.conf;\n }\n location ~ /\\.(?!well-known).* {\n  deny all;\n }\n}\n</code></pre> <pre><code>rm /etc/nginx/sites-enabled/default\nsystemctl reload nginx\nsystemctl restart php8.4-fpm\n</code></pre>"},{"location":"Installation/Install-LibreNMS/#selinux","title":"SELinux","text":"Ubuntu 24.04Ubuntu 22.04CentOS 8Debian 12 <p>SELinux not enabled by default</p> <p>SELinux not enabled by default</p> <p>Install the policy tool for SELinux:</p> <pre><code>dnf install policycoreutils-python-utils\n</code></pre> <p>Configure the contexts needed by LibreNMS</p> <pre><code>semanage fcontext -a -t httpd_sys_content_t '/opt/librenms/html(/.*)?'\nsemanage fcontext -a -t httpd_sys_rw_content_t '/opt/librenms/(rrd|storage)(/.*)?'\nsemanage fcontext -a -t httpd_log_t \"/opt/librenms/logs(/.*)?\"\nsemanage fcontext -a -t httpd_cache_t '/opt/librenms/cache(/.*)?'\nsemanage fcontext -a -t bin_t '/opt/librenms/librenms-service.py'\nsemanage fcontext -a -t httpd_cache_t '/opt/librenms/cache(/.*)?'\nrestorecon -RFvv /opt/librenms\nsetsebool -P httpd_can_sendmail=1\nsetsebool -P httpd_execmem 1\nchcon -t httpd_sys_rw_content_t /opt/librenms/.env\n</code></pre> <p>Allow fping</p> <p>Create the file http_fping.tt with the following contents. You can create this file anywhere, as it is a throw-away file. The last step in this install procedure will install the module in the proper location.</p> <pre><code>module http_fping 1.0;\n\nrequire {\ntype httpd_t;\nclass capability net_raw;\nclass rawip_socket { getopt create setopt write read };\n}\n\n#============= httpd_t ==============\nallow httpd_t self:capability net_raw;\nallow httpd_t self:rawip_socket { getopt create setopt write read };\n</code></pre> <p>Then run these commands</p> <pre><code>checkmodule -M -m -o http_fping.mod http_fping.tt\nsemodule_package -o http_fping.pp -m http_fping.mod\nsemodule -i http_fping.pp\n</code></pre> <p>Additional SELinux problems may be found by executing the following command</p> <pre><code>audit2why &lt; /var/log/audit/audit.log\n</code></pre> <p>SELinux not enabled by default</p>"},{"location":"Installation/Install-LibreNMS/#allow-access-through-firewall","title":"Allow access through firewall","text":"Ubuntu 24.04Ubuntu 22.04CentOS 8Debian 12Debian 13 <p>Firewall not enabled by default</p> <p>Firewall not enabled by default</p> <pre><code>firewall-cmd --zone public --add-service http --add-service https\nfirewall-cmd --permanent --zone public --add-service http --add-service https\n</code></pre> <p>Firewall not enabled by default</p> <p>Firewall not enabled by default</p>"},{"location":"Installation/Install-LibreNMS/#enable-lnms-command-completion","title":"Enable lnms command completion","text":"<p>This feature grants you the opportunity to use tab for completion on lnms commands as you would for normal linux commands.</p> <pre><code>ln -s /opt/librenms/lnms /usr/bin/lnms\ncp /opt/librenms/misc/lnms-completion.bash /etc/bash_completion.d/\n</code></pre> <p><code>lnms config</code> is the preferred method for Configuration</p>"},{"location":"Installation/Install-LibreNMS/#configure-snmpd-v2c","title":"Configure snmpd (v2c)","text":"<p>If you would like to use SNMPv3 then please see here</p> <pre><code>cp /opt/librenms/snmpd.conf.example /etc/snmp/snmpd.conf\n</code></pre> <pre><code>vi /etc/snmp/snmpd.conf\n</code></pre> <p>Edit the text which says <code>RANDOMSTRINGGOESHERE</code> and set your own community string.</p> <pre><code>curl -o /usr/bin/distro https://raw.githubusercontent.com/librenms/librenms-agent/master/snmp/distro\nchmod +x /usr/bin/distro\nsystemctl enable snmpd\nsystemctl restart snmpd\n</code></pre>"},{"location":"Installation/Install-LibreNMS/#cron-job","title":"Cron job","text":"<pre><code>cp /opt/librenms/dist/librenms.cron /etc/cron.d/librenms\n</code></pre> <p>Note</p> <p>Keep in mind  that cron, by default, only uses a very limited set of environment variables. You may need to configure proxy variables for the cron invocation. Alternatively adding the proxy settings in config.php is possible too. The config.php file will be created in the upcoming steps. Review the following URL after you finished librenms install steps: https://docs.librenms.org//Support/Configuration/#proxy-support</p>"},{"location":"Installation/Install-LibreNMS/#enable-the-scheduler","title":"Enable the scheduler","text":"<pre><code>cp /opt/librenms/dist/librenms-scheduler.service /opt/librenms/dist/librenms-scheduler.timer /etc/systemd/system/\n\nsystemctl enable librenms-scheduler.timer\nsystemctl start librenms-scheduler.timer\n</code></pre>"},{"location":"Installation/Install-LibreNMS/#enable-logrotate","title":"Enable logrotate","text":"<p>LibreNMS keeps logs in <code>/opt/librenms/logs</code>. Over time these can become large and be rotated out.  To rotate out the old logs you can use the provided logrotate config file:</p> <pre><code>cp /opt/librenms/misc/librenms.logrotate /etc/logrotate.d/librenms\n</code></pre>"},{"location":"Installation/Install-LibreNMS/#web-installer","title":"Web installer","text":"<p>Now head to the web installer and follow the on-screen instructions.</p> <p>http://librenms.example.com/install</p> <p>The web installer might prompt you to create a <code>config.php</code> file in your librenms install location manually, copying the content displayed on-screen to the file. If you have to do this, please remember to set the permissions on config.php after you copied the on-screen contents to the file. Run:</p> <pre><code>chown librenms:librenms /opt/librenms/config.php\n</code></pre>"},{"location":"Installation/Install-LibreNMS/#final-steps","title":"Final steps","text":"<p>That's it!  You now should be able to log in to http://librenms.example.com/.</p> <p>Danger</p> <p>Please note that we have not covered HTTPS setup in this example, so your LibreNMS install is not secure by default.  Please do not expose it to the public Internet unless you have configured HTTPS and taken appropriate web server hardening steps.</p>"},{"location":"Installation/Install-LibreNMS/#add-the-first-device","title":"Add the first device","text":"<p>We now suggest that you add localhost as your first device from within the WebUI. https://librenms.example.com/addhost</p>"},{"location":"Installation/Install-LibreNMS/#troubleshooting","title":"Troubleshooting","text":"<p>If you ever have issues with your install, you should run validate which will perform some base checks and provide the recommended fixes:</p> <pre><code>sudo su - librenms\n./validate.php\n</code></pre> <p>There are various options for getting help listed on the LibreNMS web site: https://www.librenms.org/#support</p>"},{"location":"Installation/Install-LibreNMS/#what-next","title":"What next?","text":"<p>Now that you've installed LibreNMS, we'd suggest that you have a read of a few other docs to get you going:</p> <ul> <li>Performance tuning</li> <li>Alerting</li> <li>Device Groups</li> <li>Auto discovery</li> <li>High Availability</li> </ul>"},{"location":"Installation/Install-LibreNMS/#closing","title":"Closing","text":"<p>We hope you enjoy using LibreNMS. If you do, it would be great if you would consider opting into the stats system we have, please see this page on what it is and how to enable it.</p> <p>If you would like to help make LibreNMS better there are many ways to help. You can also back LibreNMS on Open Collective.</p>"},{"location":"Installation/Migrating-from-Observium/","title":"Migrating from Observium","text":"<p>A LibreNMS user, Dan, has kindly provided full details and scripts to be able to migrate from Observium to LibreNMS.</p> <p>We have mirrored the scripts he's provided with consent, these are available in the <code>scripts\\Migration</code> folder of your installation..</p>"},{"location":"Installation/Migrating-from-Observium/#setup","title":"Setup:","text":"<p>First I had to lay out my script requirements:</p> <ul> <li>Build the RRD directories on LibreNMS</li> <li>Convert the RRD files on Observium to XML (x86 to x64 move)</li> <li>Copy the RRD/XML files to LibreNMS</li> <li>Convert the XML files back to RRD files</li> <li>Add the device to LibreNMS</li> </ul>"},{"location":"Installation/Migrating-from-Observium/#script","title":"Script:","text":"<p>There are two versions of the scripts available for you to download: - One converts the RRDs to XML and then back to RRD files when they hit the destination. This is a requirement if you are moving from x86 to x64.  - Assuming you\u2019re moving servers that are on the same architecture, we can skip that step and just SCP the original RRD files.</p> <p>For everything to work as originally intended, you\u2019ll need four files.\u00a0Put all four files on both servers, the scripts default to /tmp/:</p> <ul> <li>nodelist.txt \u2013 this file contains the list of hosts you would like to move. This must match exactly to the hostname Observium uses</li> <li>mkdir.sh \u2013 this script creates the necessary directories on your LibreNMS server</li> <li>destwork.sh \u2013 depending on the version you choose, this script will add the device to LibreNMS and possibly convert from XML to RRD</li> <li>convert.sh \u2013 convert is the main script we\u2019ll be calling. All of the magic happens here.</li> </ul> <p>Feel free to crack open the scripts and modify them to suit you. Each file has a handful of variables you\u2019ll need to set for your conversion. They should be self-explanatory, but please leave a comment if you have trouble. </p>"},{"location":"Installation/Migrating-from-Observium/#conversion","title":"Conversion:","text":"<p>This section assumes the following:</p> <ul> <li>Root access is available on both servers</li> <li>You have SSH access to both servers</li> <li>All four files have been placed in the tmp directory of both servers</li> </ul> <p>I would strongly suggest you start with just one or two hosts and see how things work. For me, 10 standard sized devices took about 20 minutes with the RRD to XML conversion. Every environment will be different, so start slow and work your way up to full automation.</p>"},{"location":"Installation/Migrating-from-Observium/#ssh-keys","title":"SSH Keys","text":"<p>First thing we will want to do is exchange SSH keys so that we can automate the login process used by the scripts. Perform these steps on your Observium server:</p> <p><code>ssh-keygen -t rsa</code></p> <p>Accept the defaults and enter a passphrase if you wish. Then:</p> <p><code>ssh-copy-id librenms</code></p> <p>Where librenms is the hostname or IP of your destination server.</p>"},{"location":"Installation/Migrating-from-Observium/#nodelisttxt","title":"Nodelist.txt","text":"<p>The nodelist.txt file contains a list of hosts we want to migrate from Observium. These names must match the name of the RRD folder on Observium. You can get those names by running the following \u2013</p> <p><code>ls /opt/observium/rrd/</code></p> <p>Also important, the nodelist.txt file must be on\u00a0both your Observium and LibreNMS server. Once you have your list, edit nodelist.txt with\u00a0nano:</p> <p><code>nano /tmp/nodelist.txt</code></p> <p>And replace the dummy data with the hosts you are converting. CTRL+X and then Y to save your modifications. Make the same changes on the LibreNMS server.</p>"},{"location":"Installation/Migrating-from-Observium/#script-variables","title":"Script Variables","text":"<p>Now that we have nodelist.txt setup correctly, it is time to set the variables in all three shell scripts. We are going to start with convert.sh. Edit it with nano:</p> <p><code>nano /tmp/convert.sh</code></p> <p>and change the variables to suit your environment. Here is a quick list of them:</p> <ul> <li>DEST \u2013 This should be the IP or hostname of your LibreNMS server</li> <li>L_RRDPATH \u2013 This signifies the location of the LibreNMS RRD directory. The default value is the default install location</li> <li>O_RRDPATH \u2013 Location of the Observium RRD directory. The default value is the default install location</li> <li>MKDIR \u2013 Location of the mkdir.sh script</li> <li>DESTSCRIPT \u2013 Location of the destwork.sh script</li> <li>NODELIST \u2013 Location of the nodelist.txt file</li> </ul> <p>Next, edit the destwork.sh script:</p> <p><code>nano /tmp/destwork.sh</code></p>"},{"location":"Support/","title":"How to get Help","text":"<ul> <li>Browse through the navigation on the left</li> <li>Search in the upper right</li> <li>Check the frequently asked questions</li> </ul>"},{"location":"Support/#additional-support","title":"Additional Support","text":"<p>We have a few methods for you to get in touch to ask for help.</p> <ul> <li>Community Forum</li> <li>Ask for Help</li> <li> <p>Feature Requests</p> </li> <li> <p>Discord Active chat and discussion</p> </li> <li> <p>Bug Reports</p> </li> </ul>"},{"location":"Support/1-Minute-Polling/","title":"1-Minute Polling","text":"<p>We now have support for polling data at intervals to fit your needs.</p> <p>Please be aware of the following:</p> <ul> <li>If you just want faster up/down alerts, Fast Ping is a much   easier path to that goal.</li> <li>You must also change your cron entry for <code>poller-wrapper.py</code> for   this to work (if you change from the default 300 seconds).</li> <li>Your polling MUST complete in the time you configure for the   heartbeat step value. See <code>/poller</code> in your WebUI for   your current value.</li> <li>This will only affect RRD files created from the moment you change   your settings.</li> <li>This change will affect all data storage mechanisms such as MySQL,   RRD and InfluxDB. If you decrease the values then please be aware of   the increase in space use for MySQL and InfluxDB.</li> <li>It's highly recommended to configure some performance   optimizations. Keep in mind that all your devices   will write all graphs every minute to the disk and that every device   has many graphs. The most important thing is probably the   RRDCached configuration that can save   a lot of write IOPS.</li> </ul> <p>To make the changes, please navigate to <code>/settings/poller/rrdtool/</code> within your WebUI. Select RRDTool Setup and then update the two values for step and heartbeat intervals:</p> <ul> <li>Step is how often you want to insert data, so if you change to 1   minute polling then this should be 60.</li> <li>Heartbeat is how long to wait for data before registering a null   value, i.e 120 seconds.</li> </ul>"},{"location":"Support/1-Minute-Polling/#converting-existing-rrd-files","title":"Converting existing RRD files","text":"<p>We provide a basic script to convert the default rrd files we generate to utilise your configured step and heartbeat values. Please do ensure that you backup your RRD files before running this just in case. The script runs on a per device basis or all devices at once.</p> <p>The rrd files must be accessible from the server you run this script from.</p> <p><code>./scripts/rrdstep.php</code></p> <p>This will provide the help information. To run it for localhost just run:</p> <p><code>./scripts/rrdstep.php -h localhost</code></p>"},{"location":"Support/Adding-a-Device/","title":"Adding Device","text":"<p>You have two options for adding a new device into LibreNMS. You can add a device via the WebUI or by using the CLI.</p>"},{"location":"Support/Adding-a-Device/#via-webui","title":"Via WebUI","text":"<p>Using the web interface, go to Devices in the menu and click Add Device. Enter the details required for the device that you want to add and then click z\u2248x\u2248xz<code>'Add Host'. As an example, if your device is configured to use the community</code>my_company<code>using snmp</code>v2c` then you would enter the following as per the screenshot:</p> <p></p> <p>SNMP Port defaults to 161.</p> <p>By default, the Hostname will be used for polling data. If you want to poll data via a specific IP-Address (e.g. Management IP), set the  Hostname as the IP-Address and after the device is added, you can edit the device and set the display name to original Hostname.</p>"},{"location":"Support/Adding-a-Device/#via-cli","title":"Via CLI","text":"<p>Using the command line via ssh as the <code>librenms</code> user, you can add a new device by changing to the directory of your LibreNMS install and typing (be sure to put the correct details).</p> <pre><code>./lnms device:add --v2c -c yourSNMPcommunity yourhostname\n</code></pre> <p>You can use <code>./lnms device:add --help</code> for a list of available options and defaults.</p> <p>As an example, if your device has the name <code>mydevice.example.com</code> and is configured to use the community <code>my_company</code> using snmp <code>v2c</code> then you would enter:</p> <pre><code>./lnms device:add --v2c -c my_company mydevice.example.com\n</code></pre> <p>Note</p> <p>Please note that if the community contains special characters such as <code>$</code> then you will need to wrap it in <code>'</code>. I.e: <code>'Pa$$w0rd'</code>.</p>"},{"location":"Support/Adding-a-Device/#ping-only-device","title":"Ping Only Device","text":"<p>You can add ping only devices into LibreNMS through the WebUI or CLI. When adding the device switch the SNMP button to \"off\". The device will be added into LibreNMS as a Ping Only Device and will show ICMP Response Graph.</p> <ul> <li>Hostname: IP address or DNS name.</li> <li>Hardware: Optional you can type in whatever you like.</li> <li>OS: Optional this will add the Device's OS Icon.</li> </ul> <p>Via CLI this is done with:</p> <pre><code>./lnms device:add --ping-only yourhostname\n</code></pre> <p></p> <p>A How-to video can be found here: How to add ping only devices</p>"},{"location":"Support/Adding-a-Device/#automatic-discovery-and-api","title":"Automatic Discovery and API","text":"<p>If you would like to add devices automatically then you will probably want to read the Auto-discovery Setup guide.</p> <p>You may also want to add devices programmatically, if so, take a look at our API documentation</p>"},{"location":"Support/Bare-Dashboard/","title":"Bare Dashboard","text":"<p>Settings to assist with wall/monitor displays.</p>"},{"location":"Support/Bare-Dashboard/#hide-menubar","title":"Hide Menubar","text":"<p>To hide Menubar e.g. for Monitoring TV Screens attach <code>?bare=yes</code> on URL</p>"},{"location":"Support/Bare-Dashboard/#no-search-fields-in-dashboard-widgets","title":"No Search Fields in Dashboard Widgets","text":"<p>To hide Search Field in Dashboard Widgets take a look into Widget Settings.</p>"},{"location":"Support/CLI-Tools/","title":"Command line tools","text":"<p>Here's a brief list of command line tools, some might be missing. If you think something is missing, feel free to ask us or send a pull request :-)</p>"},{"location":"Support/CLI-Tools/#purge-portsphp","title":"purge-ports.php","text":"<p>This script provides CLI access to the \"delete port\" function of the WebUI. This might come in handy when trying to clean up old ports after large changes within the network or when hacking on the poller/discovery functions.</p> <pre><code>LibreNMS Port purge tool\n-p port_id  Purge single port by it's port-id\n-f file     Purge a list of ports, read port-ids from _file_, one on each line\n            A filename of - means reading from STDIN.\n</code></pre>"},{"location":"Support/CLI-Tools/#querying-port-ids-from-the-database","title":"Querying port IDs from the database","text":"<p>One simple way to obtain port IDs is by querying the SQL database.</p> <p>If you wanted to query all deleted ports from the database, you could to this with the following query:</p> <pre><code>echo 'SELECT port_id, hostname, ifDescr FROM ports, devices WHERE devices.device_id = ports.device_id AND deleted = 1' | mysql -h your_DB_server -u your_DB_user -p --skip-column-names your_DB_name\n</code></pre> <p>When you are sure that the list of ports is correct and you want to delete all of them, you can write the list into a file and call purge-ports.php with that file as input:</p> <pre><code>echo 'SELECT port_id FROM ports, devices WHERE devices.device_id = ports.device_id AND deleted = 1' | mysql -h your_DB_server -u your_DB_user -p --skip-column-names your_DB_name &gt; ports_to_delete\n./purge-port.php -f ports_to_delete\n</code></pre>"},{"location":"Support/Cleanup-options/","title":"Cleanup Options","text":"<p>As the number of devices starts to grow in your LibreNMS install, so will things such as the RRD files, MySQL database containing eventlogs, Syslogs and performance data etc. Your LibreNMS install could become quite large so it becomes necessary to clean up those entries. With Cleanup Options, you can stay in control.</p> <p>These options rely on <code>daily.sh</code> running from cron as per the installation instructions.</p> <p>system/cleanup</p> <pre><code>lnms config:set eventlog_purge 30\nlnms config:set syslog_purge 30\nlnms config:set route_purge 10\nlnms config:set alert_log_purge 365\nlnms config:set authlog_purge 30\nlnms config:set ports_fdb_purge 10\nlnms config:set ports_nac_purge 10\nlnms config:set rrd_purge 0\nlnms config:set ports_purge true\n</code></pre> <p>These options will ensure data within LibreNMS over X days old is automatically purged. You can alter these individually, values are in days.</p> <p>NOTE: Please be aware that <code>rrd_purge</code> is NOT set by default. This option will remove any RRD files that have not been updated for the set amount of days automatically - only enable this if you are comfortable with that happening. (All active RRD files are updated every polling period.)</p>"},{"location":"Support/Cleanup-options/#ports-purge","title":"Ports Purge","text":"<p>Over time as you add devices some interfaces will need to be purged as they are set to be ignored or bad interfaces or marked as deleted.</p> <p>You can purge all deleted ports from the WebUI (see below) or by setting <code>lnms config:set ports_purge true</code>.</p> <p>In the Web UI Under the Ports Tab in the Nav Bar, Click on \"Deleted\" then click on \"Purge all deleted\". This will purge all the ports.</p>"},{"location":"Support/Configuration/","title":"Configuration Docs","text":""},{"location":"Support/Configuration/#configuration-location","title":"Configuration location","text":"<p>Configuration is stored in one of two places:</p> <ul> <li> <p>Database: This applies to all pollers and can be set with either <code>lnms config:set &lt;setting&gt; &lt;value&gt;</code> or in the Web UI. Database config takes precedence over <code>config.php</code> and is the favoured option.</p> </li> <li> <p><code>config.php</code>: This applies to the local poller only. Configs set here will disable in the Web UI to prevent unexpected behaviour.</p> </li> </ul>"},{"location":"Support/Configuration/#configuration-format","title":"Configuration format","text":"<p>For configuration stored within the database, LibreNMS uses dot notation for config items. For <code>config.php</code> this is stored as a php array under <code>$config</code>, let's use some snmp configuration as an example:</p> Databaseconfig.php <p><code>snmp.community</code></p> <p><code>snmp.community.+</code></p> <p><code>snmp.v3.0.authalgo</code></p> <p><code>$config['snmp']['community']</code></p> <p><code>$config['snmp']['community'][]</code></p> <p><code>$config['snmp']['v3'][0]['authalgo']</code></p> <p>Note</p> <p>Not all documentation has been updated to reflect using <code>lnms config:set</code> to set configuration items, but it will work and is the preferred option over <code>config.php</code>.</p> <p>Not all configuration settings have been defined in LibreNMS, they can still be  set with the <code>--ignore-checks</code> option. Without that option input is checked for  validity, please be careful of inputting bad values when using <code>--ignore-checks</code>. </p> <p>Please report missing settings.</p>"},{"location":"Support/Configuration/#cli","title":"CLI","text":"<p><code>lnms config:get &lt;setting&gt;</code> will fetch the current config settings (composite of database, config.php, and defaults). <code>lnms config:set &lt;setting&gt; &lt;value&gt;</code> will set the config setting in the database. Calling <code>lnms config:set &lt;setting&gt;</code> on a setting with no value will prompt you to reset it to it's default.</p> <p>If you set up bash completion, you can use tab completion to find config settings.</p>"},{"location":"Support/Configuration/#getting-a-list-of-all-current-values","title":"Getting a list of all current values","text":"<p>To get a complete list of all the current values, you can use the command <code>lnms config:get --dump</code>. To improve the readability of the output you can use the <code>jq</code> package to pretty print it: <code>lnms config:get --dump | jq</code>.</p> <p>Example output:</p> <pre><code>lnms config:get --dump | jq \n{\n  \"install_dir\": \"/opt/librenms\",\n  \"active_directory\": {\n    \"users_purge\": 0\n  },\n  \"addhost_alwayscheckip\": false,\n  \"alert\": {\n    \"ack_until_clear\": false,\n    \"admins\": true,\n    \"default_copy\": true,\n    \"default_if_none\": false,\n    \"default_mail\": false,\n    \"default_only\": true,\n    \"disable\": false,\n    \"fixed-contacts\": true,\n    \"globals\": true,\n    \"syscontact\": true,\n    \"transports\": {\n      \"mail\": 5\n    },\n    \"tolerance_window\": 5,\n    \"users\": false,\n    ...\n</code></pre>"},{"location":"Support/Configuration/#examples","title":"Examples","text":"<p>Below are some examples to get you started:</p> <pre><code>lnms config:get snmp.community\n  [\n      \"public\"\n  ]\n\nlnms config:set snmp.community.+ testing\n\nlnms config:get snmp.community\n  [\n      \"public\",\n      \"testing\"\n  ]\n\n\nlnms config:set snmp.community.0 private\n\nlnms config:get snmp.community\n  [\n      \"private\",\n      \"testing\"\n  ]\n\nlnms config:set snmp.community test\n  Invalid format\n\nlnms config:set snmp.community '[\"test\", \"othercommunity\"]'\n\nlnms config:get snmp.community\n  [\n      \"test\",\n      \"othercommunity\"\n  ]\n\nlnms config:set snmp.community\n\n  Reset snmp.community to the default? (yes/no) [no]:\n  &gt; yes\n\n\nlnms config:get snmp.community\n  [\n      \"public\"\n  ]\n</code></pre> <p>Multi-line configuration items above can be collapsed in to a single line using <code>| jq -c</code> to assist with set commands, for example:</p> <pre><code>lnms config:get snmp.community | jq -c\n[\"public\",\"testing\"]\n</code></pre> <p>Alernatively, if leaving multi-line items exactly as returned by <code>lnms config:get</code> for easier reading, you can use the following format: <pre><code>lnms config:set snmp.community \\\n'\n[\n    \"public\",\n    \"testing\"\n]\n'\n</code></pre></p>"},{"location":"Support/Configuration/#pre-load-configuration","title":"Pre-load configuration","text":"<p>This feature is primarily for docker images and other automation. When installing LibreNMS for the first time with a new database you can place yaml key value files in <code>database/seeders/config</code> to pre-populate the config database.</p> <p>Example snmp.yaml:</p> <pre><code>snmp.community:\n    - public\n    - private\nsnmp.max_repeaters: 30\n</code></pre> <p>Danger</p> <p>The above example uses the correct, flattened notation whereas you might be tempted to create a block for <code>snmp</code> with sub-keys <code>community</code> and <code>max_repeaters</code>.  Do NOT do this as the whole <code>snmp</code> block will be overwritten, replaced with only those two sub-keys.  The config keys in your <code>seeders</code> file must match those specified in <code>resources/definitions/config_definitions.json</code>.</p>"},{"location":"Support/Configuration/#directories","title":"Directories","text":"<pre><code>lnms config:set temp_dir /tmp\n</code></pre> <p>The temporary directory is where images and other temporary files are created on your filesystem.</p> <pre><code>lnms config:set log_dir /opt/librenms/logs\n</code></pre> <p>Log files created by LibreNMS will be stored within this directory.</p>"},{"location":"Support/Configuration/#database-config","title":"Database config","text":"<p>Set these variables either in .env (/opt/librenms/.env by default) or in the environment.</p> <pre><code>DB_HOST=127.0.0.1\nDB_DATABASE=librenms\nDB_USERNAME=DBUSER\nDB_PASSWORD=\"DBPASS\"\n</code></pre> <p>Use non-standard port:</p> <pre><code>DB_PORT=3306\n</code></pre> <p>Use a unix socket:</p> <pre><code>DB_SOCKET=/run/mysqld/mysqld.sock\n</code></pre>"},{"location":"Support/Configuration/#core","title":"Core","text":""},{"location":"Support/Configuration/#php-settings","title":"PHP Settings","text":"<p>You can change the memory limits for php within LibreNMS. The value is in Megabytes and should just be an int value:</p> <p><code>lnms config:set php_memory_limit 128</code></p>"},{"location":"Support/Configuration/#programs","title":"Programs","text":"<p>A lot of these are self explanatory so no further information may be provided. Any extensions that have dedicated documentation page will be linked to rather than having the config provided.</p>"},{"location":"Support/Configuration/#rrdtool","title":"RRDTool","text":"<p>You can configure these options within the WebUI now:</p> <p>external/binaries</p> <pre><code>lnms config:set rrdtool /usr/bin/rrdtool\n</code></pre> <p>Please see 1 Minute polling for information on configuring your install to record data more frequently.</p>"},{"location":"Support/Configuration/#fping","title":"fping","text":"<p>external/binaries</p> <pre><code>lnms config:set fping /usr/bin/fping\nlnms config:set fping6 fping6\n</code></pre> <p>poller/ping</p> <pre><code>lnms config:set fping_options.timeout 500\nlnms config:set fping_options.count 3\nlnms config:set fping_options.interval 500\nlnms config:set fping_options.tos 184\n</code></pre> <p><code>fping</code> configuration options:</p> <ul> <li><code>timeout</code> (<code>fping</code> parameter <code>-t</code>): Amount of time that fping waits   for a response to its first request (in milliseconds). See note   below</li> <li><code>count</code> (<code>fping</code> parameter <code>-c</code>): Number of request packets to send   to each target.</li> <li><code>interval</code> (<code>fping</code> parameter <code>-p</code>): Time in milliseconds that fping   waits between successive packets to an individual target.</li> <li><code>tos</code> (<code>fping</code>parameter <code>-O</code>): Set the type of service flag (TOS). Value can be either decimal or hexadecimal (0xh) format. Can be used to ensure that ping packets are queued in following QOS mecanisms in the network. Table is accessible in the TOS Wikipedia page.</li> </ul> <p>Note</p> <p>Setting a higher timeout value than the interval value can lead to slowing down poller. Example:</p> <p>timeout: 3000</p> <p>count: 3</p> <p>interval: 500</p> <p>In this example, interval will be overwritten by the timeout value of 3000 which is 3 seconds. As we send three icmp packets (count: 3), each one is delayed by 3 seconds which will result in fping taking &gt; 6 seconds to return results.</p> <p>You can disable the fping / icmp check that is done for a device to be determined to be up on a global or per device basis. We don't advise disabling the fping / icmp check unless you know the impact, at worst if you have a large number of devices down then it's possible that the poller would no longer complete in 5 minutes due to waiting for snmp to timeout.</p> <p>Globally disable fping / icmp check:</p> <p>poller/ping</p> <pre><code>lnms config:set icmp_check false\n</code></pre> <p>If you would like to do this on a per device basis then you can do so under Device -&gt; Edit -&gt; Misc -&gt; Disable ICMP Test? On</p>"},{"location":"Support/Configuration/#snmp","title":"SNMP","text":"<p>SNMP program locations.</p> <p>external/binaries</p> <pre><code>lnms config:set snmpwalk /usr/bin/snmpwalk\nlnms config:set snmpget /usr/bin/snmpget\nlnms config:set snmpbulkwalk /usr/bin/snmpbulkwalk\nlnms config:set snmpgetnext /usr/bin/snmpgetnext\nlnms config:set snmptranslate /usr/bin/snmptranslate\n</code></pre>"},{"location":"Support/Configuration/#misc-binaries","title":"Misc binaries","text":"<p>external/binaries</p> <pre><code>lnms config:set whois /usr/bin/whois\nlnms config:set ping /bin/ping\nlnms config:set mtr /usr/bin/mtr\nlnms config:set nmap /usr/bin/nmap\nlnms config:set nagios_plugins /usr/lib/nagios/plugins\nlnms config:set ipmitool /usr/bin/ipmitool\nlnms config:set virsh /usr/bin/virsh\nlnms config:set dot /usr/bin/dot\nlnms config:set sfdp /usr/bin/sfdp\n</code></pre>"},{"location":"Support/Configuration/#authentication","title":"Authentication","text":"<p>Generic Authentication settings.</p> <p>Password minimum length for auth that allows user creation</p> <p>auth/general</p> <pre><code>lnms config:set password.min_length 8\n</code></pre>"},{"location":"Support/Configuration/#proxy-support","title":"Proxy support","text":"<p>For alerting and the callback functionality, we support the use of a http proxy setting. These can be any one of the following:</p> <p>system/proxy</p> <pre><code>lnms config:set callback_proxy proxy.domain.com\nlnms config:set http_proxy proxy.domain.com\n</code></pre> <p>We can also make use of one of these environment variables which can be set in <code>/etc/environment</code>:</p> <pre><code>http_proxy=proxy.domain.com\nhttps_proxy=proxy.domain.com\n</code></pre>"},{"location":"Support/Configuration/#rrdcached","title":"RRDCached","text":"<p>Please refer to RRDCached</p>"},{"location":"Support/Configuration/#webui-settings","title":"WebUI Settings","text":"<p>system/server</p> <pre><code>lnms config:set base_url http://demo.librenms.org\n</code></pre> <p>LibreNMS will attempt to detect the URL you are using but you can override that here.</p> <p>webui/style</p> <pre><code>lnms config:set site_style light\n</code></pre> <p>Currently we have a number of styles which can be set which will alter the navigation bar look. device, blue, dark, light and mono with light being the default.</p> <p>You can override a large number of visual elements by creating your own css stylesheet and referencing it here, place any custom css files into  <code>html/css/custom</code> so they will be ignored by auto updates. You can specify as many css files as you like, the order they are within your config will be the order they are loaded in the browser.</p> <p>webui/style</p> <pre><code>lnms config:set webui.custom_css.+ css/custom/styles.css\n</code></pre> <p>You can override the default logo with yours, place any custom images files into <code>html/images/custom</code> so they will be ignored by auto updates.</p> <p>webui/style</p> <pre><code>lnms config:set title_image images/custom/yourlogo.png\n</code></pre> <p>Set how often pages are refreshed in seconds. The default is every 5 minutes. Some pages don't refresh at all by design.</p> <p>webui/general</p> <pre><code>lnms config:set page_refresh 300\n</code></pre> <p>You can create your own front page by adding a blade file in <code>resources/views/overview/custom/</code> and setting <code>front_page</code> to it's name. For example, if you create <code>resources/views/overview/custom/foobar.blade.php</code>, set <code>front_page</code> to <code>foobar</code>.</p> <p>webui/front-page</p> <pre><code>lnms config:set front_page default\n</code></pre> <p>Set a global default dashboard page for any user who has not set one in their user preferences.  Should be set to dashboard_id of an existing dashboard that is Shared, Shared(read) or Shared (Admin RW). Otherwise, the system will automatically create each user an empty dashboard called <code>Default</code> on their first login.</p> <p>webui/dashboard</p> <pre><code>lnms config:set webui.default_dashboard_id 0\n</code></pre> <p>This is the default message on the login page displayed to users.</p> <p>auth/general</p> <pre><code>lnms config:set login_message \"Unauthorised access or use shall render the user liable to criminal and/or civil prosecution.\"\n</code></pre> <p>If this is set to true then an overview will be shown on the login page of devices and the status.</p> <p>auth/general</p> <pre><code>lnms config:set public_status true\n</code></pre> <p>Enable / disable certain menus from being shown in the WebUI.</p> <p>webui/menu</p> <pre><code>lnms config:set show_locations true  # Enable Locations on menu\nlnms config:set show_locations_dropdown true  # Enable Locations dropdown on menu\nlnms config:set show_services false  # Disable Services on menu\nlnms config:set int_customers true  # Enable Customer Port Parsing\nlnms config:set int_transit true  # Enable Transit Types\nlnms config:set int_peering true  # Enable Peering Types\nlnms config:set int_core true  # Enable Core Port Types\nlnms config:set int_l2tp false  # Disable L2TP Port Types\n</code></pre> <p>webui/dashboard</p> <pre><code>lnms config:set summary_errors false  # Show Errored ports in summary boxes on the dashboard\n</code></pre> <p>webui/port-descr</p> <p>lnms config:set customers_descr '[\"cust\"]'  # The description to look for in ifDescr. Can have multiple '[\"cust\",\"cid\"]' lnms config:set transit_descr '[\"transit\"]'  # Add custom transit descriptions (array) lnms config:set peering_descr '[\"peering\"]'  # Add custom peering descriptions (array) lnms config:set core_descr '[\"core\"]'  # Add custom core descriptions  (array) lnms config:set custom_descr '[\"This is Custom\"]'  # Add custom interface descriptions (array) ```</p> <p>You are able to adjust the number and time frames of the quick select time options for graphs and the mini graphs shown per row.</p> <p>Quick select:</p> <pre><code>lnms config:set graphs.mini.normal '{\n    \"day\": \"24 Hours\",\n    \"week\": \"One Week\",\n    \"month\": \"One Month\",\n    \"year\": \"One Year\"\n}'\n\nlnms config:set graphs.mini.widescreen '{\n    \"sixhour\": \"6 Hours\",\n    \"day\": \"24 Hours\",\n    \"twoday\": \"48 Hours\",\n    \"week\": \"One Week\",\n    \"twoweek\": \"Two Weeks\",\n    \"month\": \"One Month\",\n    \"twomonth\": \"Two Months\",\n    \"year\": \"One Year\",\n    \"twoyear\": \"Two Years\"\n}'\n</code></pre> <p>Mini graphs:</p> <pre><code>lnms config:set graphs.row.normal '{\n    \"sixhour\": \"6 Hours\",\n    \"day\": \"24 Hours\",\n    \"twoday\": \"48 Hours\",\n    \"week\": \"One Week\",\n    \"twoweek\": \"Two Weeks\",\n    \"month\": \"One Month\",\n    \"twomonth\": \"Two Months\",\n    \"year\": \"One Year\",\n    \"twoyear\": \"Two Years\"\n}'\n</code></pre> <p>You can disable the mouseover popover for mini graphs by setting this to false.</p> <p>webui/general</p> <pre><code>lnms config:set web_mouseover true\n</code></pre> <p>You can disable image lazy loading by setting this to false.</p> <p>webui/general</p> <pre><code>lnms config:set enable_lazy_load true\n</code></pre> <p>Enable or disable the sysDescr output for a device.</p> <p>webui/general</p> <pre><code>lnms config:set overview_show_sysDescr true\n</code></pre> <p>This is a simple template to control the display of device names by default. You can override this setting per-device by editing the device within the WebUI.</p> <p>You may enter any free-form text including one or more of the following template replacements:</p> Template Replacement <code>{{ $hostname }}</code> The hostname or IP of the device that was set when added  *default <code>{{ $sysName_fallback }}</code> The hostname or sysName if hostname is an IP <code>{{ $sysName }}</code> The SNMP sysName of the device, falls back to hostname/IP if missing <code>{{ $ip }}</code> The actual polled IP of the device, will not display a hostname <p>For example, <code>{{ $sysName_fallback }} ({{ $ip }})</code> will display something like <code>server (192.168.1.1)</code></p> <p>webui/device</p> <pre><code>lnms config:set device_display_default '{{ $hostname }}'\n</code></pre> <p>Interface types that aren't show in graphs in the WebUI. The default array contains more items, please see resources/definitions/config_definitions.json for the full list.</p> <p>webui/graph</p> <pre><code>lnms config:set device_traffic_iftype.+ '/loopback/'\n</code></pre> <p>Administrators are able to clear the last discovered time of a device which will force a full discovery run within the configured time window.</p> <p>webui/device</p> <pre><code>lnms config:set enable_clear_discovery true\n</code></pre> <p>Disable the footer of the WebUI by setting <code>enable_footer</code> to 0.</p> <p>webui/general</p> <pre><code>lnms config:set enable_footer true\n</code></pre> <p>Show the <code>X</code>th percentile in the graph instead of the default 95th percentile.</p> <p>webui/graph</p> <pre><code>lnms config:set percentile_value 90\n</code></pre> <p>The target maximum hostname length when applying the shorthost() function. You can increase this if you want to try and fit more of the hostname in graph titles. The default value is 12. However, this can possibly break graph generation if this is very long.</p> <p>webui/graph</p> <pre><code>lnms config:set shorthost_target_length 15\n</code></pre> <p>You can enable dynamic graphs which allow you to zoom in/out and scroll through the timeline of the graphs quite easiy.</p> <p>webui/graph</p> <pre><code>lnms config:set webui.dynamic_graphs true\n</code></pre> <p>Graphs will be movable/scalable without reloading the page: </p>"},{"location":"Support/Configuration/#stacked-graphs","title":"Stacked Graphs","text":"<p>You can enable stacked graphs instead of the default inverted graphs.</p> <p>webui/graph</p> <pre><code>lnms config:set webui.graph_stacked true\n</code></pre>"},{"location":"Support/Configuration/#add-host-settings","title":"Add host settings","text":"<p>The following setting controls how hosts are added.  If a host is added as an ip address it is checked to ensure the ip is not already present. If the ip is present the host is not added. If host is added by hostname this check is not performed.  If the setting is true hostnames are resolved and the check is also performed.  This helps prevents accidental duplicate hosts.</p> <p>discovery/general</p> <pre><code>lnms config:set addhost_alwayscheckip false # true - check for duplicate ips even when adding host by name.\n                                            # false- only check when adding host by ip.\n</code></pre> <p>By default we allow hosts to be added with duplicate sysName's, you can disable this with the following config:</p> <p>discovery/general</p> <pre><code>lnms config:set allow_duplicate_sysName false\n</code></pre>"},{"location":"Support/Configuration/#global-poller-and-discovery-modules","title":"Global poller and discovery modules","text":"<p>Enable or disable discovery or poller modules.</p> <p>This setting has an order of precedence. Device settings override per OS settings which override Global settings. (Device -&gt; OS -&gt; Global).</p> <p>So if the module is set at a more specific level, it will override the less specific settings.</p> <p>Global:</p> <p>discovery/discovery_modules</p> <pre><code>lnms config:set discovery_modules.arp-table false\nlnms config:set discovery_modules.entity-state true\n</code></pre> <p>poller/poller_modules</p> <pre><code>lnms config:set poller_modules.entity-state true\n</code></pre> <p>Per OS:</p> <pre><code>lnms config:set os.ios.discovery_modules.arp-table false\nlnms config:set os.ios.discovery_modules.entity-state true\n\nlnms config:set os.ios.poller_modules.entity-state true\n</code></pre>"},{"location":"Support/Configuration/#snmp-settings","title":"SNMP Settings","text":"<p>Default SNMP options including retry and timeout settings and also default version and port.</p> <p>poller/snmp</p> <pre><code>lnms config:set snmp.timeout 1                         # timeout in seconds\nlnms config:set snmp.retries 5                         # how many times to retry the query\nlnms config:set snmp.transports '[\"udp\", \"udp6\", \"tcp\", \"tcp6\"]'    # Transports to use\nlnms config:set snmp.version '[\"v2c\", \"v3\", \"v1\"]'       # Default versions to use\nlnms config:set snmp.port 161                          # Default port\nlnms config:set snmp.exec_timeout 1200                 # execution time limit in seconds\n</code></pre> <p>NOTE: <code>timeout</code> is the time to wait for an answer and <code>exec_timeout</code> is the max time to run a query.</p> <p>The default v1/v2c snmp community to use, you can expand this array with <code>[1]</code>, <code>[2]</code>, <code>[3]</code>, etc.</p> <p>poller/snmp</p> <pre><code>lnms config:set snmp.community.0 public\n</code></pre> <p>Note</p> <p>This list of SNMP communities is used for auto discovery if enabled, and as a default set for any manually added device.</p> <p>The default v3 snmp details to use, you can expand this array with <code>[1]</code>, <code>[2]</code>, <code>[3]</code>, etc.</p> <p>poller/snmp</p> <pre><code>lnms config:set snmp.v3.0 '{\n    authlevel: \"noAuthNoPriv\",\n    authname: \"root\",\n    authpass: \"\",\n    authalgo: \"MD5\",\n    cryptopass: \"\",\n    cryptoalgo: \"AES\"\n}'\n</code></pre> <pre><code>authlevel   noAuthNoPriv | authNoPriv | authPriv\nauthname    User Name (required even for noAuthNoPriv)\nauthpass    Auth Passphrase\nauthalgo    MD5 | SHA | SHA-224 | SHA-256 | SHA-384 | SHA-512\ncryptopass  Privacy (Encryption) Passphrase\ncryptoalgo  AES | AES-192 | AES-256 | AES-256-C | DES\n</code></pre>"},{"location":"Support/Configuration/#auto-discovery-settings","title":"Auto discovery settings","text":"<p>Please refer to Auto-Discovery</p>"},{"location":"Support/Configuration/#email-configuration","title":"Email configuration","text":"<p>alerting/email</p> <pre><code>lnms config:set email_backend mail\nlnms config:set email_from librenms@yourdomain.local\nlnms config:set email_user `lnms config:get project_id`\nlnms config:set email_sendmail_path /usr/sbin/sendmail\nlnms config:set email_smtp_host localhost\nlnms config:set email_smtp_port 25\nlnms config:set email_smtp_timeout 10\nlnms config:set email_smtp_secure tls\nlnms config:set email_smtp_auth false\nlnms config:set email_smtp_username NULL\nlnms config:set email_smtp_password NULL\n</code></pre> <p>What type of mail transport to use for delivering emails. Valid options for <code>email_backend</code> are mail, sendmail or smtp. The varying options after that are to support the different transports.</p> <p>For security reasons, the SMTP server connection via TLS will try to verify the validity of the certificate. If for some reason you need to disable verification, you can use the email_smtp_verifypeer option (true by default) and email_smtp_allowselfsigned (false by default).</p> <p>alerting/email</p> <pre><code>    lnms config:set email_smtp_verifypeer false\n    lnms config:set email_smtp_allowselfsigned true\n</code></pre>"},{"location":"Support/Configuration/#alerting","title":"Alerting","text":"<p>Please refer to Alerting</p>"},{"location":"Support/Configuration/#billing","title":"Billing","text":"<p>Please refer to Billing</p>"},{"location":"Support/Configuration/#global-module-support","title":"Global module support","text":"<p>webui/menu</p> <pre><code>lnms config:set enable_syslog false # Enable Syslog\nlnms config:set enable_inventory true # Enable Inventory\nlnms config:set enable_pseudowires true # Enable Pseudowires\n</code></pre> <pre><code>lnms config:set enable_vrfs true # Enable VRFs\n</code></pre>"},{"location":"Support/Configuration/#port-extensions","title":"Port extensions","text":"<p>Please refer to Port-Description-Parser</p> <p>Enable / disable additional port statistics.</p> <pre><code>lnms config:set enable_ports_etherlike false\nlnms config:set enable_ports_junoseatmvp false\nlnms config:set enable_ports_poe false\n</code></pre>"},{"location":"Support/Configuration/#port-group","title":"Port Group","text":"<p>Assign a new discovered Port automatically to Port Group with this Port Group ID (0 means no Port Group assignment)</p> <p>discovery/ports</p> <pre><code>lnms config:set default_port_group 0\n</code></pre>"},{"location":"Support/Configuration/#external-integration","title":"External integration","text":""},{"location":"Support/Configuration/#rancid","title":"Rancid","text":"<p>Rancid configuration, <code>rancid_configs</code> is an array containing all of the locations of your rancid files. Setting <code>rancid_ignorecomments</code> will disable showing lines that start with #</p> <p>external/rancid</p> <pre><code>lnms config:set rancid_configs.+ /var/lib/rancid/network/configs/\nlnms config:set rancid_repo_type svn\nlnms config:set rancid_ignorecomments false\n</code></pre>"},{"location":"Support/Configuration/#oxidized","title":"Oxidized","text":"<p>Please refer to Oxidized</p>"},{"location":"Support/Configuration/#collectd","title":"CollectD","text":"<p>Specify the location of the collectd rrd files. Note that the location in LibreNMS should be consistent with the location set in /etc/collectd.conf and etc/collectd.d/rrdtool.conf</p> <p>external/collectd</p> <pre><code>lnms config:set collectd_dir /var/lib/collectd/rrd\n</code></pre> <p><code>/etc/collectd.conf</code> <pre><code>&lt;Plugin rrdtool&gt;\n        DataDir \"/var/lib/collectd/rrd\"\n        CreateFilesAsync false\n        CacheTimeout 120\n        CacheFlush   900\n        WritesPerSecond 50\n&lt;/Plugin&gt;\n</code></pre></p> <p><code>/etc/collectd.d/rrdtool.conf</code> <pre><code>LoadPlugin rrdtool\n&lt;Plugin rrdtool&gt;\n       DataDir \"/var/lib/collectd/rrd\"\n       CacheTimeout 120\n       CacheFlush   900\n&lt;/Plugin&gt;\n</code></pre></p> <p>Specify the location of the collectd unix socket. Using a socket allows the collectd graphs to be flushed to disk before being drawn. Be sure that your web server has permissions to write to this socket.</p> <p>external/collectd</p> <pre><code>lnms config:set collectd_sock unix:///var/run/collectd.sock\n</code></pre>"},{"location":"Support/Configuration/#smokeping","title":"Smokeping","text":"<p>Please refer to Smokeping</p>"},{"location":"Support/Configuration/#nfsen","title":"NFSen","text":"<p>Please refer to NFSen</p>"},{"location":"Support/Configuration/#location-parsing","title":"Location parsing","text":"<p>LibreNMS can interpret sysLocation information and map the device loction based on GeoCoordinates or GeoCoding information.</p> <ul> <li>Info-keywords</li> <li><code>[]</code> contains optional Latitude and Longitude information if manual GeoCoordinate positioning is desired.</li> <li><code>()</code> contains optional information that is ignored during GeoCoding lookups.</li> </ul>"},{"location":"Support/Configuration/#geocoordinates","title":"GeoCoordinates","text":"<p>If device sysLocation information contains [lat, lng] (note the comma and square brackets), that is used to determin the GeoCoordinates.</p> <p>Example: <pre><code>name_that_can_not_be_looked_up [40.424521, -86.912755]\n</code></pre></p> <p>The coordinates will then be set to 40.424521 latitude and -86.912755 longitude.</p>"},{"location":"Support/Configuration/#geocoding","title":"GeoCoding","text":"<p>Next it will attempt to look up the sysLocation with a map engine provided you have configured one under <code>lnms config:get geoloc.engine</code>. The information has to be accurate or no result is returned, when it does it will ignore any information inside parentheses, allowing you to add details that would otherwise interfeeer with the lookup.</p> <p>Example: <pre><code>1100 Congress Ave, Austin, TX 78701 (3rd floor)\nGeocoding lookup is:\n1100 Congress Ave, Austin, TX 78701\n</code></pre></p>"},{"location":"Support/Configuration/#overrides","title":"Overrides","text":"<ol> <li>You can overwrite a devices sysLocation in the WebGui     under \"Device settings\" for that device.</li> <li>You can set the location coordinates for a location in the WebGui under Device &gt; Geo Locations -&gt; All Location.</li> </ol>"},{"location":"Support/Configuration/#location-mapping","title":"Location mapping","text":"<p>If you just want to set GPS coordinates on a location, you should visit Devices &gt; Geo Locations &gt; All Locations and edit the coordinates there.</p> <p>However you can replace the sysLocation value that is returned for a single device or many devices.</p> <p>For example, let's say that you have 100 devices which all contain the sysLocation value of <code>Under the Sink</code> which isn't the real address, rather than editing each device manually, you can specify a mapping to override the sysLocation value.</p> <p>Exact Matching:</p> <p><code>Under the Sink</code> Will become <code>Under The Sink, The Office, London, UK</code></p> <p>webui/device</p> <pre><code>lnms config:set location_map '{\"Under the Sink\": \"Under The Sink, The Office, London, UK\"}'\n</code></pre> <p>Regex Matching:</p> <p><code>Not Under the Sink</code> Will become <code>Not Under The Sink, The Office, London, UK</code></p> <p>webui/device</p> <pre><code>lnms config:set location_map_regex '{\"/Sink/\": \"Not Under The Sink, The Office, London, UK\"}'\n</code></pre> <p>Regex Match Substitution:</p> <p><code>Rack10,Rm-314,Sink</code> Will become <code>Rack10,Rm-314,Under The Sink, The Office, London, UK [lat, lng]</code></p> <p>webui/device</p> <pre><code>lnms config:set location_map_regex_sub '{\"/Sink/\": \"Under The Sink, The Office, London, UK [lat, long]\"}'\n</code></pre> <p>The above are examples, these will rewrite device snmp locations so you don't need to configure full location within snmp.</p>"},{"location":"Support/Configuration/#interfaces-to-be-ignored","title":"Interfaces to be ignored","text":"<p>Interfaces can be automatically ignored during discovery by modifying various configuration options, unsetting default options and customizing it, or creating an OS specific option. The preferred method for ignoring interfaces is to use an OS specific option. The default options can be found in resources/definitions/config_definitions.json. Default OS specific definitions can be found in <code>resources/definitions/os_detection/\\_specific_os_.yaml</code> and can contain bad_if* options, but should only be modified via pull-request as manipulation of the definition files will block updating:</p> <p>Examples:</p>"},{"location":"Support/Configuration/#add-entries-to-default-option","title":"Add entries to default option","text":"<p>discovery/ports</p> <pre><code>lnms config:set bad_if.+ voip-null\nlnms config:set bad_iftype.+ voiceEncap\nlnms config:set bad_if_regexp.+ '/^lo[0-9].*/'    # loopback\n</code></pre>"},{"location":"Support/Configuration/#override-default-bad_if-values","title":"Override default bad_if values","text":"<p>discovery/ports</p> <pre><code>lnms config:set bad_if '[\"voip-null\", \"voiceEncap\", \"voiceFXO\"]'\n</code></pre>"},{"location":"Support/Configuration/#create-an-os-specific-array","title":"Create an OS specific array","text":"<p>discovery/ports</p> <pre><code>lnms config:set os.iosxe.bad_iftype.+ macSecControlledIF\nlnms config:set os.iosxe.bad_iftype.+ macSecUncontrolledIF\n</code></pre>"},{"location":"Support/Configuration/#various-bad_if-selection-options-available","title":"Various bad_if* selection options available","text":"<p><code>bad_if</code> is matched against the ifDescr value.</p> <p><code>bad_iftype</code> is matched against the ifType value.</p> <p><code>bad_if_regexp</code> is matched against the ifDescr value as a regular expression.</p> <p><code>bad_ifname_regexp</code> is matched against the ifName value as a regular expression.</p> <p><code>bad_ifalias_regexp</code> is matched against the ifAlias value as a regular expression.</p>"},{"location":"Support/Configuration/#interfaces-that-shouldnt-be-ignored","title":"Interfaces that shouldn't be ignored","text":"<p>It's also possible to whitelist ports so they are not ignored. <code>good_if</code> can be configured both globally and per os just like <code>bad_if</code>.</p> <p>As an examples, let's say we have <code>bad_if_regexp</code> set to ignore <code>Ethernet</code> ports but realise that we actually still want <code>FastEthernet</code> ports but not any others, we can add a <code>good_if</code> option to white list <code>FastEthernet</code>:</p> <p>discovery/ports</p> <pre><code>lnms config:set good_if.+ FastEthernet\nlnms config:set os.ios.good_if.+ FastEthernet\n</code></pre> <p><code>good_if</code> is matched against ifDescr value. This can be a bad_if value as well which would stop that port from being ignored. i.e. if bad_if and good_if both contained FastEthernet then ports with this value in the ifDescr will be valid.</p>"},{"location":"Support/Configuration/#interfaces-to-be-rewritten","title":"Interfaces to be rewritten","text":"<p>You can rewrite the interface label automatically using the following options.</p> <p>Entries defined in <code>rewrite_if</code> are being replaced completely. Entries defined in <code>rewrite_if_regexp</code> only replace the match. Matches are compared case-insensitive.</p> <p>discovery/ports</p> <pre><code>lnms config:set rewrite_if '{\"cpu\": \"Management Interface\"}'\nlnms config:set rewrite_if_regexp '{\"/cpu /\": \"Management \"}'\n</code></pre>"},{"location":"Support/Configuration/#entity-sensors-to-be-ignored","title":"Entity sensors to be ignored","text":"<p>Some devices register bogus sensors as they are returned via SNMP but either don't exist or just don't return data. This allows you to ignore those based on the descr field in the database. You can either ignore globally or on a per os basis (recommended).</p> <p>As an example, if you have some sensors which contain the descriptions below:</p> <pre><code>Physical id 1\nPhysical id 2\n...\nPhysical id 4\n</code></pre> <p>discovery/sensors</p> <pre><code>lnms config:set bad_entity_sensor_regex.+ '/Physical id [0-9]+/'\nlnms config:set os.ios.bad_entity_sensor_regex '[\"/Physical id [0-9]+/\"]'\n</code></pre>"},{"location":"Support/Configuration/#entity-sensors-limit-values","title":"Entity sensors limit values","text":"<p>Vendors may give some limit values (or thresholds) for the discovered sensors. By default, when no such value is given or LibreNMS doesn't have, support for those limits, both high and low limit values are guessed, based on the value measured during the initial discovery.</p> <p>When it is preferred to have no high and/or low limit values at all if these are not provided by the vendor, the guess method can be disabled:</p> <p>discovery/sensors</p> <pre><code>lnms config:set sensors.guess_limits false\n</code></pre>"},{"location":"Support/Configuration/#ignoring-health-sensors","title":"Ignoring Health Sensors","text":"<p>It is possible to filter some sensors from the configuration:</p>"},{"location":"Support/Configuration/#ignore-all-temperature-sensors","title":"Ignore all temperature sensors","text":"<p>discovery/sensors</p> <pre><code>lnms config:set disabled_sensors.temperature true\n</code></pre>"},{"location":"Support/Configuration/#filter-all-sensors-matching-regexp-pem-iout","title":"Filter all sensors matching regexp <code>'/PEM Iout/'</code>.","text":"<p>discovery/sensors</p> <pre><code>lnms config:set disabled_sensors_regex.+ '/PEM Iout/'\n</code></pre>"},{"location":"Support/Configuration/#filter-all-current-sensors-for-operating-system-vrp","title":"Filter all 'current' sensors for Operating System 'vrp'.","text":"<pre><code>lnms config:set os.vrp.disabled_sensors.current true\n</code></pre>"},{"location":"Support/Configuration/#filter-all-sensors-matching-regexp-pem-iout-for-operating-system-iosxe","title":"Filter all sensors matching regexp <code>'/PEM Iout/'</code> for Operating System iosxe.","text":"<pre><code>lnms config:set os.iosxe.disabled_sensors_regex '/PEM Iout/'\n</code></pre>"},{"location":"Support/Configuration/#storage-configuration","title":"Storage configuration","text":"<p>Storage / mount points to ignore in discovery and polling.</p> <p>discovery/storage</p> <pre><code>lnms config:set ignore_mount_removable true\nlnms config:set ignore_mount_network true\nlnms config:set ignore_mount_optical true\n\nlnms config:set ignore_mount.+ /kern\nlnms config:set ignore_mount.+ /mnt/cdrom\nlnms config:set ignore_mount.+ /proc\nlnms config:set ignore_mount.+ /dev\n\nlnms config:set ignore_mount_string.+ packages\nlnms config:set ignore_mount_string.+ devfs\nlnms config:set ignore_mount_string.+ procfs\nlnms config:set ignore_mount_string.+ UMA\nlnms config:set ignore_mount_string.+ MALLOC\n\nlnms config:set ignore_mount_regexp.+ '/on: \\/packages/'\nlnms config:set ignore_mount_regexp.+ '/on: \\/dev/'\nlnms config:set ignore_mount_regexp.+ '/on: \\/proc/'\nlnms config:set ignore_mount_regexp.+ '/on: \\/junos^/'\nlnms config:set ignore_mount_regexp.+ '/on: \\/junos\\/dev/'\nlnms config:set ignore_mount_regexp.+ '/on: \\/jail\\/dev/'\nlnms config:set ignore_mount_regexp.+ '/^(dev|proc)fs/'\nlnms config:set ignore_mount_regexp.+ '/^\\/dev\\/md0/'\nlnms config:set ignore_mount_regexp.+ '/^\\/var\\/dhcpd\\/dev,/'\nlnms config:set ignore_mount_regexp.+ '/UMA/'\n</code></pre> <p>Custom storage warning percentage which will be set when storage information is discovered.</p> <p>discovery/storage</p> <pre><code>lnms config:set storage_perc_warn 60\n</code></pre>"},{"location":"Support/Configuration/#irc-bot","title":"IRC Bot","text":"<p>Please refer to IRC Bot</p>"},{"location":"Support/Configuration/#authentication_1","title":"Authentication","text":"<p>Please refer to Authentication</p>"},{"location":"Support/Configuration/#cleanup-options","title":"Cleanup options","text":"<p>Please refer to Cleanup Options</p>"},{"location":"Support/Configuration/#syslog-options","title":"Syslog options","text":"<p>Please refer to Syslog</p>"},{"location":"Support/Configuration/#virtualization","title":"Virtualization","text":"<p>Enable this to switch on support for libvirt along with <code>libvirt_protocols</code> to indicate how you connect to libvirt.  You also need to:</p> <ol> <li>Generate a non-password-protected ssh key for use by LibreNMS, as the     user which runs polling &amp; discovery (usually <code>librenms</code>).</li> <li>On each VM host you wish to monitor:</li> <li>Configure public key authentication from your LibreNMS server/poller by       adding the librenms public key to <code>~root/.ssh/authorized_keys</code>.</li> <li>(xen+ssh only) Enable libvirtd to gather data from xend by setting       <code>(xend-unix-server yes)</code> in <code>/etc/xen/xend-config.sxp</code> and       restarting xend and libvirtd.</li> </ol> <p>To test your setup, run <code>virsh -c qemu+ssh://vmhost/system list</code> or <code>virsh -c xen+ssh://vmhost list</code> as your librenms polling user.</p> <p>external/virtualization</p> <pre><code>lnms config:set enable_libvirt true\nlnms config:set libvirt_protocols '[\"qemu+ssh\",\"xen+ssh\"]'\nlnms config:set libvirt_username root\n</code></pre>"},{"location":"Support/Configuration/#bgp-support","title":"BGP Support","text":"<p>You can use this config option to rewrite the description of ASes that you have discovered.</p> <p>discovery/general</p> <pre><code>lnms config:set astext.65332 \"Cymru FullBogon Feed\"\n</code></pre>"},{"location":"Support/Configuration/#auto-updates","title":"Auto updates","text":"<p>Please refer to Updating</p>"},{"location":"Support/Configuration/#ipmi","title":"IPMI","text":"<p>Setup the types of IPMI protocols to test a host for and in what order. Don't forget to install ipmitool on the monitoring host.</p> <p>discovery/ipmi</p> <pre><code>lnms config:set ipmi.type '[\"lanplus\", \"lan\", \"imb\", \"open\"]'\n</code></pre>"},{"location":"Support/Configuration/#distributed-poller-settings","title":"Distributed poller settings","text":"<p>Please refer to Distributed Poller</p>"},{"location":"Support/Configuration/#api-settings","title":"API Settings","text":""},{"location":"Support/Configuration/#cors-support","title":"CORS Support","text":"<p>https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS</p> <p>CORS support for the API is disabled by default. Below you will find the standard options, all of which you can configure.</p> <p>api/cors</p> <pre><code>lnms config:set api.cors.enabled false\nlnms config:set api.cors.origin '[\"*\"]'\nlnms config:set api.cors.maxage '86400'\nlnms config:set api.cors.allowmethods '[\"POST\", \"GET\", \"PUT\", \"DELETE\", \"PATCH\"]'\nlnms config:set api.cors.allowheaders '[\"Origin\", \"X-Requested-With\", \"Content-Type\", \"Accept\", \"X-Auth-Token\"]'\nlnms config:set api.cors.exposeheaders '[\"Cache-Control\", \"Content-Language\", \"Content-Type\", \"Expires\", \"Last-Modified\", \"Pragma\"]'\nlnms config:set api.cors.allowmethods '[\"POST\", \"GET\", \"PUT\", \"DELETE\", \"PATCH\"]'\nlnms config:set api.cors.allowheaders '[\"Origin\", \"X-Requested-With\", \"Content-Type\", \"Accept\", \"X-Auth-Token\"]'\nlnms config:set api.cors.exposeheaders '[\"Cache-Control\", \"Content-Language\", \"Content-Type\", \"Expires\", \"Last-Modified\", \"Pragma\"]'\nlnms config:set api.cors.allowcredentials false\n</code></pre>"},{"location":"Support/Device-Sensors/","title":"Device Sensors","text":"<p>LibreNMS has a standard for device sensors they are split into categories. This doc is to help users understand device sensors in general, if you need help with developing sensors for a device please see the Contributing + Developing section.</p>"},{"location":"Support/Device-Sensors/#health-sensors","title":"Health Sensors","text":"<p>The High and Low values of these sensors can be edited in Web UI by going to the device settings -&gt; Health. There you can set your own custom High and Low values. List of these sensors can be found here</p> <p>Note</p> <p>Some values are defined by the manufactures and others are auto calculated when you add the device into librenms. Keep in mind every environment is different and may require user input.</p>"},{"location":"Support/Device-Sensors/#wireless-sensors","title":"Wireless Sensors","text":"<p>Some Wireless devices have High and Low values for sensors and can be edited in Web UI by going to the device settings -&gt; Wireless Sensors There you can set your own custom High and Low values. List of these sensors can be found here</p> <p>Note</p> <p>Some values are defined by the manufactures and others are auto calculated when you add the device into librenms. Keep in mind every environment is different and may require user input.</p>"},{"location":"Support/Device-Sensors/#state-sensors","title":"State Sensors","text":"<p>Records the state of some health sensor which can be used for alerting. For example:</p> <ul> <li>Drive Status</li> <li>Memory Status</li> <li>Power Supply Status</li> </ul> <p>And will provide a mapped state to one of the following:</p> <pre><code>0 = OK\n1 = Warning\n2 = Critical\n3 = Unknown\n</code></pre>"},{"location":"Support/Device-Sensors/#alerting-sensors","title":"Alerting Sensors","text":"<p>These alert rules can be found inside the Alert Rules Collection. The alert rules below are the default alert rules, there are more device-specific alert rules in the alerts collection.</p> <p>Sensor Over Limit Alert Rule:  Will alert on any sensor value that is over the limit.</p> <p>Sensor Under Limit Alert Rule: Will alert on any sensor value that is under the limit.</p> <p>Note</p> <p>You can set these limits inside device settings in the Web UI.</p> <p>State Sensor Critical: Will alert on any state that returns critical = 2</p> <p>State Sensor Warning: Will alert on any state that returns warning = 1</p> <p>Wireless Sensor Over Limit Alert Rule: Will Alert on sensors that listed in device settings under Wireless.</p> <p>Wireless Sensor Under Limit Alert Rule: Will Alert on sensors that listed in device settings under Wireless.</p>"},{"location":"Support/Device-Troubleshooting/","title":"Capture Debug Information","text":"<p>You can use this feature to run Debug on Discovery, Poller, SNMP and Alerts. This output information could be helpful for you when troubleshooting a device or when requesting help from the community.</p> <p>This feature can be found by going to the device that you are troubleshooting in the webui, clicking on the settings icon menu on far right and selecting Capture. </p>"},{"location":"Support/Device-Troubleshooting/#discovery","title":"Discovery","text":"<p>Discovery will run and output debug information.</p>"},{"location":"Support/Device-Troubleshooting/#poller","title":"Poller","text":"<p>Poller will run and output debug information.</p>"},{"location":"Support/Device-Troubleshooting/#snmp","title":"SNMP","text":"<p>SNMP will run SNMP Bulk Walk on the device and output the information.</p>"},{"location":"Support/Device-Troubleshooting/#alerts","title":"Alerts","text":"<p>Alerts Capture is handy when you are creating alerts and need to see if your alert rule matches.</p> <p></p>"},{"location":"Support/Discovery%20Support/","title":"Discovery Support","text":"<p>This document will explain how to use discovery to debug issues or manually running to process data.</p> <p>The basic command to get started is:</p> <p><code>lnms poller:discovery HOSTNAME</code></p>"},{"location":"Support/Discovery%20Support/#command-options","title":"Command options","text":"<pre><code>Description:\n  Discover information about existing devices, defines what will be polled\n\nUsage:\n  poller:discovery [options] [--] &lt;device spec&gt;\n\nArguments:\n  device spec              Device spec to discover: device_id, hostname, wildcard, odd, even, all, new\n\nOptions:\n  -o, --os[=OS]            Only devices with the specified operating system\n  -t, --type[=TYPE]        Only devices with the specified type\n  -m, --modules[=MODULES]  Specify single module to be run. Comma separate modules, submodules may be added with /\n  -h, --help               Display help for the given command. When no command is given display help for the list command\n      --silent             Do not output any message\n  -q, --quiet              Only errors are displayed. All other output is suppressed\n  -V, --version            Display this application version\n      --ansi|--no-ansi     Force (or disable --no-ansi) ANSI output\n  -n, --no-interaction     Do not ask any interactive question\n      --env[=ENV]          The environment the command should run under\n  -v|vv|vvv, --verbose     Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug\n</code></pre> <p><code>&lt;device spec&gt;</code> Use this to specify a device via either id or hostname (including wildcard using *). You can also specify odd and even. all will run discovery against all devices whilst new will poll only those devices that have recently been added or have been selected for rediscovery.</p> <p><code>-v</code> Enables debugging output so that you can see what is happening during a discovery run.</p> <p><code>-vv</code> Enables verbose debugging. This includes things like SQL queries and response from snmp with sensitive data masked as best as possible.</p> <p><code>-vvv</code> Enables full debugging output with all data in tact.</p> <p><code>-m</code> This enables you to specify the module you want to run for discovery.</p>"},{"location":"Support/Discovery%20Support/#discovery-wrapper","title":"Discovery wrapper","text":"<p>We have a <code>discovery-wrapper.py</code> script which is based on <code>poller-wrapper.py</code> by Job Snijders. This script is currently the default.</p> <p>If you need to debug the output of discovery-wrapper.py then you can add <code>-d</code> to the end of the command - it is NOT recommended to do this in cron.</p> <p>You also may use <code>-m</code> to pass a list of comma-separated modules. Please refer to Command options of discovery.php. Example: <code>/opt/librenms/discovery-wrapper.py 1 -m bgp-peers</code></p> <p>If you want to switch back to discovery.php then you can replace (not recommended):</p> <p><code>33  */6   * * *   librenms    /opt/librenms/discovery-wrapper.py 1 &gt;&gt; /dev/null 2&gt;&amp;1</code></p> <p>With:</p> <p><code>33  */6   * * *   librenms    /opt/librenms/discovery.php -h all &gt;&gt; /dev/null 2&gt;&amp;1</code></p>"},{"location":"Support/Discovery%20Support/#discovery-config","title":"Discovery config","text":"<p>These are the default discovery config items. You can globally disable a module by setting it to 0. If you just want to disable it for one device then you can do this within the WebUI -&gt; Device -&gt; Settings -&gt; Modules.</p> <p>discovery/discovery_modules</p> <pre><code>lnms config:set discovery_modules.os true\nlnms config:set discovery_modules.ports true\nlnms config:set discovery_modules.ports-stack true\nlnms config:set discovery_modules.entity-physical true\nlnms config:set discovery_modules.entity-state false\nlnms config:set discovery_modules.processors true\nlnms config:set discovery_modules.mempools true\nlnms config:set discovery_modules.cisco-vrf-lite true\nlnms config:set discovery_modules.cisco-mac-accounting false\nlnms config:set discovery_modules.cisco-pw false\nlnms config:set discovery_modules.vrf false\nlnms config:set discovery_modules.cisco-cef false\nlnms config:set discovery_modules.slas false\nlnms config:set discovery_modules.cisco-otv false\nlnms config:set discovery_modules.ipv4-addresses true\nlnms config:set discovery_modules.ipv6-addresses true\nlnms config:set discovery_modules.route false\nlnms config:set discovery_modules.sensors true\nlnms config:set discovery_modules.storage true\nlnms config:set discovery_modules.hr-device true\nlnms config:set discovery_modules.discovery-protocols true\nlnms config:set discovery_modules.arp-table true\nlnms config:set discovery_modules.discovery-arp false\nlnms config:set discovery_modules.junose-atm-vp false\nlnms config:set discovery_modules.bgp-peers true\nlnms config:set discovery_modules.vlans true\nlnms config:set discovery_modules.vminfo false\nlnms config:set discovery_modules.printer-supplies false\nlnms config:set discovery_modules.ucd-diskio true\nlnms config:set discovery_modules.applications false\nlnms config:set discovery_modules.services true\nlnms config:set discovery_modules.stp true\nlnms config:set discovery_modules.ntp true\nlnms config:set discovery_modules.loadbalancers false\nlnms config:set discovery_modules.mef false\nlnms config:set discovery_modules.wireless true\nlnms config:set discovery_modules.fdb-table true\nlnms config:set discovery_modules.xdsl false\n</code></pre>"},{"location":"Support/Discovery%20Support/#os-based-discovery-config","title":"OS based Discovery config","text":"<p>You can enable or disable modules for a specific OS by using <code>lnms config:set</code>. OS based settings have preference over global. Device based settings have preference over all others</p> <p>Discover performance improvement can be achieved by deactivating all modules that are not supported by specific OS.</p> <p>E.g. to deactivate spanning tree but activate discovery-arp module for linux OS</p> <p>discovery/discovery_modules</p> <pre><code>lnms config:set os.linux.discovery_modules.stp false\nlnms config:set os.linux.discovery_modules.discovery-arp true\n</code></pre>"},{"location":"Support/Discovery%20Support/#discovery-modules","title":"Discovery modules","text":"<p><code>os</code>: Os detection. This module will pick up the OS of the device.</p> <p><code>ports</code>: This module will detect all ports on a device excluding ones configured to be ignored by config options.</p> <p><code>ports-stack</code>: Same as ports except for stacks.</p> <p><code>xdsl</code>: Module to collect more metrics for xDSL interfaces.</p> <p><code>entity-physical</code>: Module to pick up the devices hardware support.</p> <p><code>processors</code>: Processor support for devices.</p> <p><code>mempools</code>: Memory detection support for devices.</p> <p><code>cisco-vrf-lite</code>: VRF-Lite detection and support.</p> <p><code>ipv4-addresses</code>: IPv4 Address detection</p> <p><code>ipv6-addresses</code>: IPv6 Address detection</p> <p><code>route</code>: This module will load the routing table of the device. The default route  limit is 1000 (configurable with <code>lnms config:set routes.max_number 1000</code>), with history data.</p> <p><code>sensors</code>: Sensor detection such as Temperature, Humidity, Voltages + More</p> <p><code>storage</code>: Storage detection for hard disks</p> <p><code>hr-device</code>: Processor and Memory support via HOST-RESOURCES-MIB.</p> <p><code>discovery-protocols</code>: Auto discovery module for xDP, OSPF, OSPFv3 and BGP.</p> <p><code>arp-table</code>: Detection of the ARP table for the device.</p> <p><code>fdb-table</code>: Detection of the Forwarding DataBase table for the device, with history data.</p> <p><code>discovery-arp</code>: Auto discovery via ARP.</p> <p><code>junose-atm-vp</code>: Juniper ATM support.</p> <p><code>bgp-peers</code>: BGP detection and support.</p> <p><code>vlans</code>: VLAN detection and support.</p> <p><code>cisco-mac-accounting</code>: MAC Address account support.</p> <p><code>cisco-pw</code>: Pseudowires wires detection and support.</p> <p><code>vrf</code>: VRF detection and support.</p> <p><code>cisco-cef</code>: CEF detection and support.</p> <p><code>slas</code>: SLA detection and support.</p> <p><code>vminfo</code>: Detection of vm guests for VMware ESXi and libvert</p> <p><code>printer-supplies</code>: Toner levels support.</p> <p><code>ucd-diskio</code>: Disk I/O support.</p> <p><code>services</code>: *Nix services support.</p>"},{"location":"Support/Discovery%20Support/#running","title":"Running","text":"<p>Here are some examples of running discovery from within your install directory.</p> <pre><code>lnms poller:discovery localhost\n\nlnms poller:discovery localhost -m ports\n</code></pre>"},{"location":"Support/Discovery%20Support/#debugging","title":"Debugging","text":"<p>To provide debugging output you will need to run the discovery process with the <code>-v</code> flag. You can do this either against all modules, single or multiple modules:</p> <p>All Modules</p> <pre><code>lnms poller:discovery localhost -vv\n</code></pre> <p>Single Module</p> <pre><code>lnms poller:discovery localhost -m ports -vv\n</code></pre> <p>Multiple Modules</p> <pre><code>lnms poller:discovery localhost -m ports,entity-physical -vv\n</code></pre> <p>Using <code>-vv</code> shouldn't output much sensitive information, <code>-vvv</code> will so it is then advisable to sanitise the output before pasting it somewhere as the debug output will contain snmp details amongst other items including port descriptions.</p> <p>The output will contain:</p> <ul> <li>DB Updates</li> <li>SNMP Response</li> </ul>"},{"location":"Support/Environment-Variables/","title":"Environment Variables","text":"<p>LibreNMS allows certain settings to be set via the environment or through the .env file.</p>"},{"location":"Support/Environment-Variables/#database","title":"Database","text":"<p>Set the variables to connect to the database.  The default values are shown below.</p> <pre><code>DB_HOST=localhost\nDB_PORT=3306\nDB_DATABASE=librenms\nDB_USERNAME=librenms\nDB_PASSWORD=\nDB_SOCKET=\n</code></pre>"},{"location":"Support/Environment-Variables/#trusted-reverse-proxies","title":"Trusted Reverse Proxies","text":"<p>A comma separated list of trusted reverse proxy IPs or CIDR.</p> <p>For legacy reasons the default is <code>'*'</code>, which means any proxy is allowed. <code>'**'</code> means trust any proxy up the chain.</p> <pre><code>APP_TRUSTED_PROXIES=192.168.1.0/24,192.167.8.20\n</code></pre>"},{"location":"Support/Environment-Variables/#base-url","title":"Base url","text":"<p>Set the base url for generated urls.</p> <p>This will be needed when using signed graph urls for alerting. It may be needed when using reverse proxies combined with a subdirectory.</p> <p>Generally, LibreNMS will make correct URLs (especially if you have set up your proxy variables correctly)</p> <pre><code>APP_URL=http://librenms/\n</code></pre>"},{"location":"Support/Environment-Variables/#user-group","title":"User / Group","text":"<p>The user and group that LibreNMS should operate as. Group will default to the same as the user if unset.</p> <pre><code>LIBRENMS_USER=librenms\nLIBRENMS_GROUP=librenms\n</code></pre>"},{"location":"Support/Environment-Variables/#debug","title":"Debug","text":"<p>Increases the amount of information shown when an error occurs.</p> <p>WARNING: This may leak information, do not leave enabled.</p> <pre><code>APP_DEBUG=true\n</code></pre>"},{"location":"Support/Example-Hardware-Setup/","title":"Example hardware setups","text":"<p>The information in this document is direct from users, it's a place for people to share their setups so you have an idea of what may be required for your install.</p> <p>To obtain the device, port and sensor counts you can run:</p> <pre><code>select count(*) from devices;\nselect count(*) from ports where `deleted` = 0;\nselect count(*) from sensors where `sensor_deleted` = 0;\n</code></pre>"},{"location":"Support/Example-Hardware-Setup/#laf","title":"laf","text":"<p>Home</p> <p>Running in Proxmox.</p> LibreNMS MySQL Type Virtual Virtual OS CentOS 7 CentOS 7 CPU 2 Sockets, 4 Cores 1 Socket, 2 Cores Memory 2GB 2GB Disk Type Raid 1, SSD Raid 1, SSD Disk Space 18GB 30GB Devices 20 - Ports 133 - Health sensors 47 - Load &lt; 0.1 &lt; 0.1"},{"location":"Support/Example-Hardware-Setup/#vente-privee","title":"Vente-Priv\u00e9e","text":"<p>NOC</p> LibreNMS MariaDB Type Dell R430 Dell R430 OS Debian 7 (dotdeb) Debian 7 (dotdeb) CPU 2 Sockets, 14 Cores 1 Socket, 2 Cores Memory 256GB 256GB Disk Type Raid 10, SSD Raid 10, SSD Disk Space 1TB 1TB Devices 1028 - Ports 26745 - Health sensors 6238 - Load &lt; 0.5 &lt; 0.5"},{"location":"Support/Example-Hardware-Setup/#kkrumm","title":"KKrumm","text":"<p>Home</p> LibreNMS MySQL Type VM Same Server OS CentOS 7 CPU 2 Sockets, 4 Cores Memory 4GB Disk Type Raid 10, SAS Drives Disk Space 40 GB Devices 12 Ports 130 Health sensors 44 Load &lt; 2.5"},{"location":"Support/Example-Hardware-Setup/#kkrumm_1","title":"KKrumm","text":"<p>Work</p> LibreNMS MySQL Type HP Proliantdl380gen8 Same Server OS CentOS 7 CPU 2 Sockets, 24 Cores Memory 32GB Disk Type Raid 10, SAS Drives Disk Space 250 GB Devices 390 Ports 16167 Health sensors 3223 Load &lt; 14.5"},{"location":"Support/Example-Hardware-Setup/#cppmonkeykodapa85","title":"CppMonkey(KodApa85)","text":"<p>Home</p> LibreNMS MariaDB Type i5-4690K Same Workstation OS Ubuntu 18.04.2 CPU 4 Cores Memory 16GB Disk Type Hybrid SATA Disk Space 2 TB Devices 14 Ports 0 Health sensors 70 Load &lt; 0.5"},{"location":"Support/Example-Hardware-Setup/#cppmonkeykodapa85_1","title":"CppMonkey(KodApa85)","text":"<p>Dev</p> <p>Running in Ganeti</p> LibreNMS MariaDB Type VM Same VM OS CentOS 7.5 CPU 2 Cores Memory 4GB Disk Type M.2 Disk Space 40 GB Devices 38 Ports 1583 Health sensors 884 Load &lt; 1.0"},{"location":"Support/Example-Hardware-Setup/#cppmonkeykodapa85_2","title":"CppMonkey(KodApa85)","text":"<p>Work NOC</p> <p>Running in Ganeti Cluster with 2x Dell PER730xd - 64GB, Dual E5-2660 v3</p> LibreNMS MariaDB Type VM VM OS Debian Stretch Debian Stretch CPU 4 Cores 2 Cores Memory 8GB 4GB Disk Type Raid 6, SAS Drives Disk Space 100 GB 40GB Devices 179 Ports 14495 Health sensors 2329 Load &lt; 2.5 &lt; 1.5"},{"location":"Support/Example-Hardware-Setup/#lazydk","title":"LaZyDK","text":"<p>Home</p> LibreNMS MariaDB Type VM - QNAP TS-453 Pro Same Server OS Ubuntu 16.04 CPU 1 vCore Memory 2GB Disk Type Raid 1, SATA Drives Disk Space 10 GB Devices 26 Ports 228 Health sensors 117 Load &lt; 0.92"},{"location":"Support/Example-Hardware-Setup/#sirmaple","title":"SirMaple","text":"<p>Home</p> LibreNMS MariaDB Type VM Same Server OS Debian 11 CPU 4 vCore Memory 4GB Disk Type Raid 1, SSD Disk Space 50 GB Devices 41 Ports 317 Health sensors 243 Load &lt; 3.15"},{"location":"Support/Example-Hardware-Setup/#vvelox","title":"VVelox","text":"<p>Home / Dev</p> LibreNMS MariaDB Type Supermicro X7SPA-HF Same Server OS FreeBSD 12-STABLE CPU Intel Atom D525 Memory 4GB Disk Type Raid 1, SATA Disk Space 1TB Devices 17 Ports 174 Health sensors 76 Load &lt; 3"},{"location":"Support/Example-Hardware-Setup/#sourcedoctor","title":"SourceDoctor","text":"<p>Home / Dev</p> <p>Running in VMWare Workstation Pro</p> LibreNMS MariaDB Type VM Same Server OS Debian Buster CPU 2 vCore Memory 2GB Disk Type Raid 5, SSD Disk Space 20GB Devices 35 Ports 245 Health sensors 101 Load &lt; 1"},{"location":"Support/Example-Hardware-Setup/#lazyb0nes","title":"lazyb0nes","text":"<p>Lab</p> LibreNMS MariaDB Type VM Same Server OS RHEL 7.7 CPU 32 cores Memory 64GB Disk Type Flash San Array Disk Space 400GB Devices 670 Ports 25678 Health sensors 2457 Load 10.92"},{"location":"Support/Example-Hardware-Setup/#dagb","title":"dagb","text":"<p>Work</p> <p>Running in VMware.</p> LibreNMS MariaDB Type Virtual Same Server OS CentOS 7 CPU 12 Cores Xeon 6130 Memory 8GB Disk Type SAN (SSD) Disk Space 26GB/72GB/7GB (logs/RRDs/db) Devices 650 Ports 34300 Health sensors 10500 Load 5.5 (45%)"},{"location":"Support/FAQ/","title":"FAQ","text":""},{"location":"Support/FAQ/#getting-started","title":"Getting started","text":""},{"location":"Support/FAQ/#how-do-i-install-librenms","title":"How do I install LibreNMS?","text":"<p>This is currently well documented within the doc folder of the installation files.</p> <p>Please see the following doc</p>"},{"location":"Support/FAQ/#how-do-i-add-a-device","title":"How do I add a device?","text":"<p>You have two options for adding a new device into LibreNMS.</p> <p>1: Using the command line via ssh you can add a new device by changing    to the directory of your LibreNMS install and typing:</p> <pre><code>lnms device:add [hostname or ip]\n</code></pre> <p>To see all options run: <code>lnms device:add -h</code></p> <p>Please note that if the community contains special characters such as <code>$</code> then you will need to wrap it in <code>'</code>. I.e: <code>'Pa$$w0rd'</code>.</p> <p>2: Using the web interface, go to Devices and then Add Device. Enter    the details required for the device that you want to add and then    click 'Add Host'.</p>"},{"location":"Support/FAQ/#how-do-i-get-help","title":"How do I get help?","text":"<p>Getting Help</p>"},{"location":"Support/FAQ/#what-are-the-supported-oses-for-installing-librenms-on","title":"What are the supported OSes for installing LibreNMS on?","text":"<p>Supported is quite a strong word :) The 'officially' supported distros are:</p> <ul> <li>Ubuntu / Debian</li> <li>Red Hat / CentOS</li> <li>Gentoo</li> </ul> <p>However we will always aim to help wherever possible so if you are running a distro that isn't one of the above then give it a try anyway and if you need help then jump on the discord server.</p>"},{"location":"Support/FAQ/#do-you-have-a-demo-available","title":"Do you have a demo available?","text":"<p>We do indeed, you can find access to the demo here</p>"},{"location":"Support/FAQ/#support","title":"Support","text":""},{"location":"Support/FAQ/#how-does-librenms-use-mibs","title":"How does LibreNMS use MIBs?","text":"<p>LibreNMS does not parse MIBs to discover sensors for devices. LibreNMS uses static discovery definitions written in YAML or PHP. Therefore, updating a MIB alone will not improve OS support, the definitions must be updated.  LibreNMS only uses MIBs to make OIDs easier to read.</p>"},{"location":"Support/FAQ/#why-do-i-get-blank-pages-sometimes-in-the-webui","title":"Why do I get blank pages sometimes in the WebUI?","text":"<p>You can enable debug information by setting <code>APP_DEBUG=true</code> in your .env. (Do not leave this enabled, it could leak private data)</p> <p>If the page you are trying to load has a substantial amount of data in it then it could be that the php memory limit needs to be increased in config.php.</p>"},{"location":"Support/FAQ/#why-do-i-not-see-any-graphs","title":"Why do I not see any graphs?","text":"<p>The easiest way to check if all is well is to run <code>./validate.php</code> as librenms from within your install directory. This should give you info on why things aren't working.</p> <p>One other reason could be a restricted snmpd.conf file or snmp view which limits the data sent back. If you use net-snmp then we suggest using the included snmpd.conf file.</p>"},{"location":"Support/FAQ/#how-do-i-debug-pages-not-loading-correctly","title":"How do I debug pages not loading correctly?","text":"<p>A debug system is in place which enables you to see the output from php errors, warnings and notices along with the MySQL queries that have been run for that page.</p> <p>You can enable debug information by setting <code>APP_DEBUG=true</code> in your .env. (Do not leave this enabled, it could leak private data) To see additional information, run <code>./scripts/composer_wrapper.php install</code>, to install additional debug tools. This will add a debug bar at the bottom of every page that will show you detailed debug information.</p>"},{"location":"Support/FAQ/#how-do-i-debug-the-discovery-process","title":"How do I debug the discovery process?","text":"<p>Please see the Discovery Support document for further details.</p>"},{"location":"Support/FAQ/#how-do-i-debug-the-poller-process","title":"How do I debug the poller process?","text":"<p>Please see the Poller Support document for further details.</p>"},{"location":"Support/FAQ/#why-do-i-get-a-lot-apache-or-rrdtool-zombies-in-my-process-list","title":"Why do I get a lot apache or rrdtool zombies in my process list?","text":"<p>If this is related to your web service for LibreNMS then this has been tracked down to an issue within php which the developers aren't fixing. We have implemented a work around which means you shouldn't be seeing this. If you are, please report this in issue 443.</p>"},{"location":"Support/FAQ/#why-do-i-see-traffic-spikes-in-my-graphs","title":"Why do I see traffic spikes in my graphs?","text":"<p>This occurs either when a counter resets or the device sends back bogus data making it look like a counter reset. We have enabled support for setting a maximum value for rrd files for ports.</p> <p>Before this all rrd files were set to 100G max values, now you can enable support to limit this to the actual port speed.</p> <p>rrdtool tune will change the max value when the interface speed is detected as being changed (min value will be set for anything 10M or over) or when you run the included script (./scripts/tune_port.php) - see RRDTune doc</p> <p>SNMP ifInOctets and ifOutOctets are counters, which means they start  at 0 (at device boot) and count up from there. LibreNMS records the  value every 5 minutes and uses the difference between the previous  value and the current value to calculate rate. (Also, this value  resets to 0 when it hits the max value)</p> <p>Now, when the value is not recorded for awhile RRD (our time series storage) does not record a 0, it records the last value, otherwise, there would be even worse problems. Then finally we get the current ifIn/OutOctets value and record that. Now, it appears as though all of the traffic since it stopped getting values have occurred in the last 5 minute interval.</p> <p>So whenever you see spikes like this, it means we have not received data from the device for several polling intervals. The cause can vary quite a bit: bad snmp implementations, intermittent network connectivity, broken poller, and more.</p>"},{"location":"Support/FAQ/#why-do-i-see-gaps-in-my-graphs","title":"Why do I see gaps in my graphs?","text":"<p>This is most commonly due to the poller not being able to complete it's run within 300 seconds. Check which devices are causing this by going to /poll-log/ within the Web interface.</p> <p>When you find the device(s) which are taking the longest you can then look at the Polling module graph under Graphs -&gt; Poller -&gt; Poller Modules Performance. Take a look at what modules are taking the longest and disabled un used modules.</p> <p>If you poll a large number of devices / ports then it's recommended to run a local recursive dns server such as pdns-recursor.</p> <p>Running RRDCached is also highly advised in larger installs but has benefits no matter the size.</p>"},{"location":"Support/FAQ/#how-do-i-change-the-ip-hostname-of-a-device","title":"How do I change the IP / hostname of a device?","text":"<p>There is a host rename tool called renamehost.php in your librenms root directory. When renaming you are also changing the device's IP / hostname address for monitoring.</p> <p>Usage:</p> <pre><code>./renamehost.php &lt;old hostname&gt; &lt;new hostname&gt;\n</code></pre> <p>You can also rename a device in the Web UI by going to the device, then clicking settings Icon -&gt; Edit.</p>"},{"location":"Support/FAQ/#my-device-doesnt-finish-polling-within-300-seconds","title":"My device doesn't finish polling within 300 seconds","text":"<p>We have a few things you can try:</p> <ul> <li>Disable unnecessary polling modules under edit device.</li> <li>Set a max repeater value within the snmp settings for a device. What   to set this to is tricky, you really should run an snmpbulkwalk with   -Cr10 through -Cr50 to see what works best. 50 is usually a good   choice if the device can cope.</li> </ul>"},{"location":"Support/FAQ/#things-arent-working-correctly","title":"Things aren't working correctly?","text":"<p>Run <code>./validate.php</code> as librenms from within your install.</p> <p>Re-run <code>./validate.php</code> once you've resolved any issues raised.</p> <p>You have an odd issue - we'd suggest you join our discord server to discuss.</p>"},{"location":"Support/FAQ/#what-do-the-values-mean-in-my-graphs","title":"What do the values mean in my graphs?","text":"<p>The values you see are reported as metric values. Thanks to a post on Reddit here are those values:</p> <pre><code>10^-18  a - atto\n10^-15  f - femto\n10^-12  p - pico\n10^-9   n - nano\n10^-6   u - micro\n10^-3   m - milli\n0    (no unit)\n10^3    k - kilo\n10^6    M - mega\n10^9    G - giga\n10^12   T - tera\n10^15   P - peta\n</code></pre>"},{"location":"Support/FAQ/#why-does-a-device-show-as-a-warning","title":"Why does a device show as a warning?","text":"<p>This is indicating that the device has rebooted within the last 24 hours (by default). If you want to adjust this threshold then you can do so by setting <code>$config['uptime_warning'] = '86400';</code> in <code>config.php</code>. The value must be in seconds.</p>"},{"location":"Support/FAQ/#why-do-i-not-see-all-interfaces-in-the-overall-traffic-graph-for-a-device","title":"Why do I not see all interfaces in the Overall traffic graph for a device?","text":"<p>By default numerous interface types and interface descriptions are excluded from this graph. The excluded defaults are:</p> <pre><code>$config['device_traffic_iftype'][] = '/loopback/';\n$config['device_traffic_iftype'][] = '/tunnel/';\n$config['device_traffic_iftype'][] = '/virtual/';\n$config['device_traffic_iftype'][] = '/mpls/';\n$config['device_traffic_iftype'][] = '/ieee8023adLag/';\n$config['device_traffic_iftype'][] = '/l2vlan/';\n$config['device_traffic_iftype'][] = '/ppp/';\n\n$config['device_traffic_descr'][] = '/loopback/';\n$config['device_traffic_descr'][] = '/vlan/';\n$config['device_traffic_descr'][] = '/tunnel/';\n$config['device_traffic_descr'][] = '/bond/';\n$config['device_traffic_descr'][] = '/null/';\n$config['device_traffic_descr'][] = '/dummy/';\n</code></pre> <p>If you would like to re-include l2vlan interfaces for instance, you first need to <code>unset</code> the config array and set your options:</p> <pre><code>unset($config['device_traffic_iftype']);\n$config['device_traffic_iftype'][] = '/loopback/';\n$config['device_traffic_iftype'][] = '/tunnel/';\n$config['device_traffic_iftype'][] = '/virtual/';\n$config['device_traffic_iftype'][] = '/mpls/';\n$config['device_traffic_iftype'][] = '/ieee8023adLag/';\n$config['device_traffic_iftype'][] = '/ppp/';\n</code></pre>"},{"location":"Support/FAQ/#how-do-i-migrate-my-librenms-install-to-another-server","title":"How do I migrate my LibreNMS install to another server?","text":"<p>If you are moving from one CPU architecture to another then you will need to dump the rrd files and re-create them. If you are in this scenario then you can use Dan Brown's migration scripts.</p> <p>If you are just moving to another server with the same CPU architecture then the following steps should be all that's needed:</p> <ul> <li>Install LibreNMS as per our normal documentation; you don't need to   run through the web installer or building the sql schema.</li> <li>Stop cron by commenting out all lines in <code>/etc/cron.d/librenms</code></li> <li>Dump the MySQL database <code>librenms</code> from your old server (<code>mysqldump   librenms -u root -p &gt; librenms.sql</code>)...</li> <li>and import it into your new server (<code>mysql -u root -p librenms &lt; librenms.sql</code>).</li> <li>Copy the <code>rrd/</code> folder to the new server.</li> <li>Copy the <code>.env</code> and <code>config.php</code> files to the new server.</li> <li>Check for modified files (eg specific os, ...) with <code>git status</code> and   migrate them.</li> <li>Ensure ownership of the copied files and folders (substitute your   user if necessary) - <code>chown -R librenms:librenms /opt/librenms</code></li> <li>Delete old pollers on the GUI (gear icon --&gt; Pollers --&gt; Pollers)</li> <li>Validate your installation (/opt/librenms/validate.php)</li> <li>Re-enable cron by uncommenting all lines in <code>/etc/cron.d/librenms</code></li> </ul>"},{"location":"Support/FAQ/#why-is-my-edgerouter-device-not-detected","title":"Why is my EdgeRouter device not detected?","text":"<p>If you have <code>service snmp description</code> set in your config then this will be why, please remove this. For some reason Ubnt have decided setting this value should override the sysDescr value returned which breaks our detection.</p> <p>If you don't have that set then this may be then due to an update of EdgeOS or a new device type, please create an issue.</p>"},{"location":"Support/FAQ/#why-are-some-of-my-disks-not-showing","title":"Why are some of my disks not showing?","text":"<p>If you are monitoring a linux server then net-snmp doesn't always expose all disks via hrStorage (HOST-RESOURCES-MIB). We have additional support which will retrieve disks via dskTable (UCD-SNMP-MIB). To expose these disks you need to add additional config to your snmpd.conf file. For example, to expose <code>/dev/sda1</code> which may be mounted as <code>/storage</code> you can specify:</p> <p><code>disk /dev/sda1</code></p> <p>Or</p> <p><code>disk /storage</code></p> <p>Restart snmpd and LibreNMS should populate the additional disk after a fresh discovery.</p>"},{"location":"Support/FAQ/#why-are-my-disks-reporting-an-incorrect-size","title":"Why are my disks reporting an incorrect size?","text":"<p>There is a known issue for net-snmp, which causes it to report incorrect disk size and disk usage when the size of the disk (or raid) are larger then 16TB, a workaround has been implemented but is not active on Centos 6.8 by default due to the fact that this workaround breaks official SNMP specs, and as such could cause unexpected behaviour in other SNMP tools. You can activate the workaround by adding to /etc/snmp/snmpd.conf :</p> <p><code>realStorageUnits 0</code></p>"},{"location":"Support/FAQ/#what-does-mean-ignore-alert-tag-on-device-component-service-and-port","title":"What does mean \\\"ignore alert tag\\\" on device, component, service and port?","text":"<p>Tag device, component, service and port to ignore alerts. Alert checks will still run. However, ignore tag can be read in alert rules. For example on device, if <code>devices.ignore = 0</code> or <code>macros.device = 1</code> condition is is set and ignore alert tag is on, the alert rule won't match. The alert rule is ignored.</p>"},{"location":"Support/FAQ/#how-do-i-clean-up-alerts-from-my-switches-and-routers-about-ports-being-down-or-changing-speed","title":"How do I clean up alerts from my switches and routers about ports being down or changing speed","text":"<p>Some properties used for alerting (ending in <code>_prev</code>) are only updated when a change is detected, and not every time the poller runs. This means that if you make a permanant change to your network such as removing a device, performing a major firmware upgrade, or downgrading a WAN connection, you may be stuck with some unresolvable alerts.</p> <p>If a port will be permantly down, it's best practice to configure it to be administratively down on the device to prevent malicious access. You can then only run alerts on ports with <code>ifAdminStatus = up</code>. Otherwise, you'll need to reset the device port state history.</p> <p>On the device generating alerts, use the cog button to go to the edit device page. At the top of the device settings pane is a button labelled <code>Reset Port State</code> - this will clear the historic state for all ports on that device, allowing any active alerts to clear.</p>"},{"location":"Support/FAQ/#why-cant-normal-and-global-view-users-see-oxidized","title":"Why can't Normal and Global View users see Oxidized?","text":"<p>Configs can often contain sensitive data. Because of that only global admins can see configs.</p>"},{"location":"Support/FAQ/#what-is-the-demo-user-for","title":"What is the Demo User for?","text":"<p>Demo users allow full access except adding/editing users and deleting devices and can't change passwords.</p>"},{"location":"Support/FAQ/#why-does-modifying-default-alert-template-fail","title":"Why does modifying 'Default Alert Template' fail?","text":"<p>This template's entry could be missing in the database. Please run this from the LibreNMS directory:</p> <pre><code>php artisan db:seed --class=DefaultAlertTemplateSeeder\n</code></pre>"},{"location":"Support/FAQ/#why-would-alert-un-mute-itself","title":"Why would alert un-mute itself?","text":"<p>If alert un-mutes itself then it most likely means that the alert cleared and is then triggered again. Please review eventlog as it will tell you in there.</p>"},{"location":"Support/FAQ/#how-do-i-change-the-device-type","title":"How do I change the Device Type?","text":"<p>You can change the Device Type by going to the device you would like to change, then click on the Gear Icon -&gt; Edit. If you would like to define custom types, we suggest using Device Groups. They will be listed in the menu similarly to device types.</p>"},{"location":"Support/FAQ/#editing-large-device-groups-gives-error-messages","title":"Editing large device groups gives error messages","text":"<p>If the device group contains large amount of devices, editing it from the UI might cause errors on the form even when all the data seems correct. This is caused by PHP's <code>max_input_vars</code>-variable. You should be able to confirm that this is the case by inspecting the PHP's error logs.</p> <p>With the basic installation on Ubuntu 22.04 LTS with Nginx and PHP 8.1 FPM this value can be tuned by editing the file <code>/etc/php/8.1/fpm/php.ini</code> and adjusting the value of <code>max_input_vars</code> to be at least the size of the large group. In larger installations a value such as <code>10000</code> should suffice.</p>"},{"location":"Support/FAQ/#where-do-i-update-my-database-credentials","title":"Where do I update my database credentials?","text":"<p>If you've changed your database credentials then you will need to update LibreNMS with those new details. Please edit <code>.env</code></p> <p>.env:</p> <pre><code>DB_HOST=\nDB_DATABASE=\nDB_USERNAME=\nDB_PASSWORD=\nDB_PORT=\n</code></pre>"},{"location":"Support/FAQ/#my-reverse-proxy-is-not-working","title":"My reverse proxy is not working","text":"<p>Make sure your proxy is passing the proper variables. At a minimum: X-Forwarded-For and X-Forwarded-Proto (X-Forwarded-Port if needed)</p> <p>You also need to Set the proxy or proxies as trusted</p> <p>If you are using a subdirectory on the reverse proxy and not on the actual web server, you may need to set APP_URL and <code>$config['base_url']</code>.</p>"},{"location":"Support/FAQ/#my-alerts-arent-being-delivered-on-time","title":"My alerts aren't being delivered on time","text":"<p>If you're running MySQL/MariaDB on a separate machine or container make sure the timezone is set properly on both the LibreNMS and MySQL/MariaDB instance. Alerts will be delivered according to MySQL/MariaDB's time, so a mismatch between the two can cause alerts to be delivered late if LibreNMS is on a timezone later than MySQL/MariaDB.</p>"},{"location":"Support/FAQ/#my-alert-templates-stopped-working","title":"My alert templates stopped working","text":"<p>You should probably have a look in the documentation concerning the new template syntax. Since version 1.42, syntax changed, and you basically need to convert your templates to this new syntax (including the titles).</p>"},{"location":"Support/FAQ/#how-do-i-use-trend-prediction-in-graphs","title":"How do I use trend prediction in graphs","text":"<p>As of Ver. 1.55 a new feature has been added where you can view a simple linear prediction in port graphs.</p> <p>It doesn't work on non-port graphs or consolidated graphs at the time this FAQ entry was written.</p> <p>To view a prediction:</p> <ul> <li>Click on any <code>port</code> graph of any network device</li> <li>Select a <code>From</code> date to your liking (not earlier than the device was actually added to LNMS), and then select a future date in the <code>To</code> field.</li> <li>Click update</li> </ul> <p>You should now see a linear prediction line on the graph.</p>"},{"location":"Support/FAQ/#how-do-i-move-only-the-db-to-another-server","title":"How do I move only the DB to another server?","text":"<p>There is already a reference how to move your whole LNMS installation to another server. But the following steps will help you to split up an \"All-in-one\" installation to one LibreNMS installation with a separate database install. *Note: This section assumes you have a MySQL/MariaDB instance</p> <ul> <li>Stop the apache and mysql service in you LibreNMS installation.</li> <li>Edit out all the cron entries in <code>/etc/cron.d/librenms</code>.</li> <li>Dump your <code>librenms</code>database on your current install by issuing <code>mysqldump librenms -u root -p &gt; librenms.sql</code>.</li> <li>Stop and disable the MySQL server on your current install.</li> <li>On your new server make sure you create a new database with the standard install command, no need to add a user for localhost though.</li> <li>Copy this over to your new database server and import it with <code>mysql -u root -p librenms &lt; librenms.sql</code>.</li> <li>Enter to mysql and add permissions with the following two commands: <pre><code>GRANT ALL PRIVILEGES ON librenms.* TO 'librenms'@'IP_OF_YOUR_LNMS_SERVER' IDENTIFIED BY 'PASSWORD' WITH GRANT OPTION;\nGRANT ALL PRIVILEGES ON librenms.* TO 'librenms'@'FQDN_OF_YOUR_LNMS_SERVER' IDENTIFIED BY 'PASSWORD' WITH GRANT OPTION;\nFLUSH PRIVILEGES;\nexit;\n</code></pre></li> <li>Enable and restart MySQL server.</li> <li>Edit your <code>config.php</code> file to point the install to the new database server location.</li> <li>Very important: On your LibreNMS server, inside your install directory is a <code>.env</code> file, in it you need to edit the <code>DBHOST</code> paramater to point to your new server location.</li> <li>After all this is done, enable all the cron entries again and start apache.</li> </ul>"},{"location":"Support/FAQ/#what-are-the-optional-requirements-message-when-i-add-snmpv3-devices","title":"What are the \"optional requirements message\" when I add SNMPv3 devices?","text":"<p>When you add a device via the WebUI you may see a little message stating \"Optional requirements are not met so some options are disabled\". Do not panic. This simply means your system does not contain openssl &gt;= 1.1 and net-snmp &gt;= 5.8, which are the minimum specifications needed to be able to use SHA-224|256|384|512 as auth algorithms. For crypto algorithms AES-192, AES-256 you need net-snmp compiled with <code>--enable-blumenthal-aes</code>.</p>"},{"location":"Support/FAQ/#developing","title":"Developing","text":""},{"location":"Support/FAQ/#how-do-i-add-support-for-a-new-os","title":"How do I add support for a new OS?","text":"<p>Please see Supporting a new OS if you are adding all the support yourself, i.e. writing all of the supporting code. If you are only able to supply supporting info, and would like the help of others to write up the code, please follow the below steps.</p>"},{"location":"Support/FAQ/#what-information-do-you-need-to-add-a-new-os","title":"What information do you need to add a new OS?","text":"<p>Please open a feature request in the community forum and provide the output of Discovery, Poller, and Snmpwalk as separate non-expiring \"pastebin\" links, we recommend using https://paste.rs/ or https://paste.sh/</p> <p>Please use preferably the command line to obtain the information. Especially, if snmpwalk results in a large amount of data. Replace the relevant information in these commands such as HOSTNAME and COMMUNITY. Use <code>snmpwalk</code> instead of <code>snmpbulkwalk</code> for v1 devices.</p> <p>These commands will automatically upload the data to https://paste.rs/ servers. Feel free to use another service!</p> <pre><code>./discovery.php -h HOSTNAME -d | curl --data-binary @- https://paste.rs/\nlnms device:poll HOSTNAME -vv | curl --data-binary @- https://paste.rs/\nsnmpbulkwalk -OUneb -v2c -c COMMUNITY HOSTNAME . | curl --data-binary @- https://paste.rs/\n</code></pre> <p>You can use the links provided by these commands within the community post.</p> <p>If possible please also provide what the OS name should be if it doesn't exist already, as well as any useful link (MIBs from vendor, logo, etc etc)</p>"},{"location":"Support/FAQ/#what-can-i-do-to-help","title":"What can I do to help?","text":"<p>Thanks for asking, sometimes it's not quite so obvious and everyone can contribute something different. So here are some ways you can help LibreNMS improve.</p> <ul> <li>Code. This is a big thing. We want this community to grow by the   software developing and evolving to cater for users needs. The   biggest area that people can help make this happen is by providing   code support. This doesn't necessarily mean contributing code for   discovering a new device:</li> <li>Web UI, a new look and feel has been adopted but we are not       finished by any stretch of the imagination. Make suggestions,       find and fix bugs, update the design / layout.</li> <li>Poller / Discovery code. Improving it (we think a lot can be done     to speed things up), adding new device support and updating old     ones.</li> <li>The LibreNMS main website, this is hosted on GitHub like the main     repo and we accept use contributions here as well :)</li> <li>Hardware. We don't physically need it but if we are to add device   support, it's made a whole lot easier with access to the kit via   SNMP.</li> <li>If you've got MIBs, they are handy as well :)</li> <li>If you know the vendor and can get permission to use logos that's also great.</li> <li>Bugs. Found one? We want to know about it. Most bugs are fixed after   being spotted and reported by someone, I'd love to say we are   amazing developers and will fix all bugs before you spot them but   that's just not true.</li> <li>Feature requests. Can't code / won't code. No worries, chuck a   feature request into our community   forum with enough detail and   someone will take a look. A lot of the time this might be what   interests someone, they need the same feature or they just have   time. Please be patient, everyone who contributes does so in their   own time.</li> <li>Documentation. Documentation can always be improved and every little   bit helps. Not all features are currently documented or documented   well, there's spelling mistakes etc. It's very easy to submit   updates through the GitHub   website,   no git experience needed.</li> <li>Be nice, this is the foundation of this project. We expect everyone   to be nice. People will fall out, people will disagree but please do   it so in a respectable way.</li> <li>Ask questions. Sometimes just by asking questions you prompt deeper   conversations that can lead us to somewhere amazing so please never   be afraid to ask a question.</li> </ul>"},{"location":"Support/FAQ/#how-can-i-test-another-users-branch","title":"How can I test another users branch?","text":"<p>LibreNMS can and is developed by anyone, this means someone may be working on a new feature or support for a device that you want. It can be helpful for others to test these new features, using Git, this is made easy.</p> <pre><code>cd /opt/librenms\n</code></pre> <p>Firstly ensure that your current branch is in good state:</p> <pre><code>git status\n</code></pre> <p>If you see <code>nothing to commit, working directory clean</code> then let's go for it :)</p> <p>Let's say that you want to test a users (f0o) new development branch (issue-1337) then you can do the following:</p> <pre><code>git remote add f0o https://github.com/f0o/librenms.git\ngit remote update f0o\ngit checkout issue-1337\n</code></pre> <p>Once you are done testing, you can easily switch back to the master branch:</p> <pre><code>git checkout master\n</code></pre> <p>If you want to pull any new updates provided by f0o's branch then whilst you are still in it, do the following:</p> <pre><code>git pull f0o issue-1337\n</code></pre>"},{"location":"Support/Features/","title":"Features","text":"<p>Here's a brief list of supported features, some might be missing. If you think something is missing, feel free to ask us.</p> <ul> <li>Auto discovery</li> <li>Alerting</li> <li>Multiple environment sensors support</li> <li>Multiple protocols data collection (STP, OSPF, OSPFv3, BGP etc)</li> <li>VLAN, ARP and FDB table collection</li> <li>Customizable Dashboards</li> <li>Device Backup integration (Oxidized, RANCID)</li> <li>Distributed Polling</li> <li>Multiple Authentication Methods (MySQL, LDAP, Active Directory, HTTP)</li> <li>NetFlow, sFlow, IPFIX (NfSen)</li> <li>Service monitoring (Nagios Plugins)</li> <li>Syslog (Integrated, Graylog)</li> <li>Traffic Billing (Quota, 95th Percentile)</li> <li>Two Factor Authentication</li> <li>API</li> <li>Auto Updating</li> </ul>"},{"location":"Support/Features/#supported-vendors","title":"Supported Vendors","text":"<p>Here's a list of supported vendors, some might be missing. If you are unsure of whether your device is supported or not, feel free to ask us.</p>"},{"location":"Support/Features/#3","title":"3","text":"<ul> <li>3Com</li> </ul>"},{"location":"Support/Features/#a","title":"A","text":"<ul> <li>A10 Networks</li> <li>Acano OS</li> <li>Accedian AEN</li> <li>Adtran ALM</li> <li>Adtran AOS</li> <li>ADVA AOS</li> <li>ADVA FSP150CC</li> <li>ADVA FSP150CP</li> <li>ADVA FSP3000 R7</li> <li>Advantech</li> <li>ADVA OptiSwitch</li> <li>ADVA OSA</li> <li>Aerohive HiveOS</li> <li>Airconsole Server</li> <li>AIX</li> <li>AKCP SensorProbe</li> <li>Alcatel-Lucent Enterprise Stellar Wireless OS (AWOS)</li> <li>Alcatel-Lucent OS</li> <li>Alcatel OmniPCX</li> <li>Alcoma</li> <li>ALGCOM DC UPS</li> <li>ALGCOM SM</li> <li>Allied Telesis Wireless (TQ)</li> <li>Alliedware</li> <li>Alliedware Plus</li> <li>Allworx VoIP</li> <li>Alpha Comp@s</li> <li>Alpha CXC HP Controller</li> <li>Alpha CXRC Controller</li> <li>Alpha FXM</li> <li>Alpine OptoElectronics TDCM-EDFA platform</li> <li>AlteonOS</li> <li>Alvarion Breeze</li> <li>Anue</li> <li>AnyOS</li> <li>APC Environmental Monitoring Unit</li> <li>APC ePDU</li> <li>APC Management Module</li> <li>APC MGE UPS</li> <li>Apex Lynx</li> <li>Apex Plus</li> <li>Apple AirPort</li> <li>Apple OS X</li> <li>Aprisa</li> <li>ApsoluteOS</li> <li>ArbOS</li> <li>Areca RAID Subsystem</li> <li>Arista EOS</li> <li>Arista MOS</li> <li>Array Networks</li> <li>Arris Apex</li> <li>Arris CMTS</li> <li>Arris D5 Universal EdgeQAM</li> <li>ARRIS DOCSIS</li> <li>Arris Satellite Receiver</li> <li>Aruba Clearpass</li> <li>Aruba Instant</li> <li>ArubaOS</li> <li>ArubaOS-CX</li> <li>Ascom</li> <li>Asentria SiteBoss</li> <li>AsusWRT Merlin</li> <li>Aten PDU</li> <li>Audiocodes</li> <li>Automatic Transfer Switch</li> <li>Avaya Scopia</li> <li>AvediaPlayer Receivers</li> <li>AvediaStream Encoder</li> <li>Aviat WTM</li> <li>Avocent</li> <li>Avtech Environment Sensor</li> <li>AXIS Audio Appliances</li> <li>AXIS Network Camera</li> <li>AXIS Network Document Server</li> </ul>"},{"location":"Support/Features/#b","title":"B","text":"<ul> <li>Baicells CPE</li> <li>Barco Clickshare</li> <li>Barracuda Email Security Gateway</li> <li>Barracuda Load Balancer</li> <li>Barracuda NG Firewall</li> <li>Barracuda Web Application Firewall</li> <li>BATS AATS</li> <li>BDCOM(tm) Software</li> <li>BeagleBoard</li> <li>Benu</li> <li>Bintec Be.IP Plus</li> <li>Bintec Smart Router</li> <li>Bison Router</li> <li>Bitstream Hyperion</li> <li>BKE</li> <li>BKtel</li> <li>Blade Network Technologies</li> <li>BladeShelter PDU by PowerTek</li> <li>Bluecat Networks</li> <li>Blue Coat PacketShaper</li> <li>BlueCoat ProxySG</li> <li>Blue Coat SSL Visibility</li> <li>Broadcom BCM963xx</li> <li>Brocade FabricOS</li> <li>Brocade IronWare</li> <li>Brocade NOS</li> <li>Brocade ServerIron</li> <li>Brother Printer</li> <li>BTI SA-800</li> <li>Buffalo</li> </ul>"},{"location":"Support/Features/#c","title":"C","text":"<ul> <li>Calix AXOS</li> <li>Calix B6 System</li> <li>Calix EXA</li> <li>Calix Legacy</li> <li>Cambium</li> <li>Cambium CMM</li> <li>Cambium CMM4</li> <li>Cambium cnMatrix</li> <li>Cambium cnPilot</li> <li>Cambium cnPilot Router</li> <li>Cambium cnWave60</li> <li>Cambium epmp</li> <li>Cambium PTP 250</li> <li>Cambium PTP 300/500</li> <li>Cambium PTP 600</li> <li>Cambium PTP 650</li> <li>Cambium PTP 670</li> <li>Cambium PTP 800</li> <li>Canon Printer</li> <li>Carel pCOWeb</li> <li>C&amp;C Power Commander plus</li> <li>cdata</li> <li>Ceragon CeraOS</li> <li>CET TSI Controller</li> <li>Chatsworth PDU</li> <li>Check Point GAiA</li> <li>CheckPoint SecurePlatform</li> <li>Christie Projector</li> <li>Ciena Reconfigurable Line System</li> <li>Ciena SAOS</li> <li>Ciena Service Delivery Switch</li> <li>Ciena Waveserver</li> <li>Ciena Z-Series</li> <li>cirpack</li> <li>Cisco ACE</li> <li>Cisco ACS</li> <li>Cisco APIC</li> <li>Cisco ASA</li> <li>Cisco AsyncOS</li> <li>Cisco BroadWorks</li> <li>Cisco Catalyst 1900</li> <li>Cisco CatOS</li> <li>Cisco EPC</li> <li>Cisco FTD</li> <li>Cisco FX-OS</li> <li>Cisco Identity Services Engine</li> <li>Cisco Integrated Management Controller</li> <li>Cisco Intrusion Prevention System</li> <li>Cisco IOS</li> <li>Cisco IOS-XE</li> <li>Cisco IOS-XR</li> <li>Cisco ME1200</li> <li>Cisco Nexus 3550 Series</li> <li>Cisco NX-OS</li> <li>Cisco ONS</li> <li>Cisco PIX-OS</li> <li>Cisco SAN-OS</li> <li>Cisco Satellite Receiver</li> <li>Cisco SCE</li> <li>Cisco Services Ready Platform</li> <li>Cisco Small Business</li> <li>Cisco Unified Communications Manager</li> <li>Cisco Voice Gateway</li> <li>Cisco WAAS</li> <li>Cisco Wireless Access Point</li> <li>Cisco WLC</li> <li>Citrix Netscaler</li> <li>Comet System Web Sensor</li> <li>Comtrol Industrial Switch</li> <li>Connection Technology Systems</li> <li>Controlbox TH-332B</li> <li>CoreOS</li> <li>Corero CMS</li> <li>Coriant TNMS</li> <li>CradlePoint WiPipe</li> <li>CTC Union</li> <li>Cumulus Linux</li> <li>CXR Networks TS</li> <li>Cyberoam UTM</li> <li>Cyberpower</li> </ul>"},{"location":"Support/Features/#d","title":"D","text":"<ul> <li>Dahua NVR</li> <li>Dantel Webmon</li> <li>Dantherm</li> <li>Dasan NOS</li> <li>Datacom</li> <li>DDN Storage</li> <li>dd-wrt</li> <li>Deliberant OS</li> <li>Dell DRAC</li> <li>Dell EMC Networking OS10 Enterprise</li> <li>Dell Enterprise SONiC</li> <li>Dell EqualLogic</li> <li>Dell Laser</li> <li>Dell Networking OS</li> <li>Dell OpenManage Enterprise Modular</li> <li>Dell PowerConnect</li> <li>Dell PowerVault</li> <li>Dell Rack PDU</li> <li>Dell Remote Console</li> <li>Dell Storage</li> <li>Dell UPS</li> <li>Delta Orion Controller</li> <li>Delta UPS</li> <li>Develop Printer</li> <li>DHCPatriot</li> <li>Digipower</li> <li>Digital China Networks</li> <li>DKT Comega</li> <li>D-Link Access Point</li> <li>D-Link Switch</li> <li>DmOS</li> <li>DPS Telecom NetGuardian</li> <li>DragonflyBSD</li> <li>Dragonwave Harmony Enhanced</li> <li>Dragonwave Horizon Compact</li> <li>Dragonwave Horizon Compact Plus</li> <li>Dragonwave Horizon Duo</li> <li>Dragonwave Horizon Quantum</li> <li>DrayTek</li> <li>DVB Modulator &amp; Ampiflier</li> <li>DVB-T Transmitter</li> </ul>"},{"location":"Support/Features/#e","title":"E","text":"<ul> <li>E3 Meter</li> <li>E3 Meter DataConcentrator</li> <li>Eagle-I</li> <li>East</li> <li>Eaton ATS</li> <li>Eaton Matrix</li> <li>Eaton MGE PDU</li> <li>Eaton PDU</li> <li>Eaton SC200 Controller</li> <li>Eaton SC300 Controller</li> <li>Eaton UPS</li> <li>EDFA</li> <li>Edgecore</li> <li>EdgeOS</li> <li>EdgeSwitch</li> <li>EDS</li> <li>EfficientIP SOLIDserver</li> <li>Ekinops Optical</li> <li>Eltek Valere</li> <li>Eltek Valere eNexus</li> <li>Eltek WebPower</li> <li>Eltex</li> <li>Eltex OLT</li> <li>EMC Data Domain</li> <li>EMC Flare OS</li> <li>EMC Isilon OneFS</li> <li>Emerson Energy System</li> <li>Emerson Netsure</li> <li>Endian</li> <li>EndRun</li> <li>EnGenius Access Point</li> <li>enLogic PDU</li> <li>Enterasys</li> <li>EonStor GS DS-3016</li> <li>Epson Printer</li> <li>Epson Projector</li> <li>Epson Scanner</li> <li>Ericsson 6600 series</li> <li>Ericsson IPOS</li> <li>EricssonLG IPECS ES</li> <li>Ericsson LG iPECS UCP</li> <li>Ericsson MINI-LINK</li> <li>Ericsson Traffic Node</li> <li>ESP-Home</li> <li>Etherwan Managed Switch</li> <li>EUROstor RAID Subsystem</li> <li>Exagrid</li> <li>Exalt ExtendAir</li> <li>Exinda</li> <li>Exos</li> <li>Expert Sensor Box</li> <li>Extrahop Appliance</li> <li>Extreme BOSS</li> <li>Extreme SLX-OS</li> <li>Extreme VOSS</li> <li>Extremeware</li> <li>Extreme Wireless Convergence</li> <li>Extreme XOS</li> </ul>"},{"location":"Support/Features/#f","title":"F","text":"<ul> <li>F5 Big IP</li> <li>F5OS</li> <li>Fiberhome</li> <li>FiberHome Switch</li> <li>Fibernet XMUX 4+</li> <li>Fiberstore (BDCOM)</li> <li>Fiberstore (Centec CNOS)</li> <li>Fiberstore Datacenter Switch</li> <li>Fiberstore GBN</li> <li>Fiberstore Switch</li> <li>FibroLAN Falcon OS</li> <li>FibroLAN MetroStar OS</li> <li>Firebrick</li> <li>FireEye OS</li> <li>Force10 FTOS</li> <li>Forcepoint FlexEdge Secure SD-WAN</li> <li>Forcepoint NGFW</li> <li>Fortinet Application Deliver Controller</li> <li>Fortinet FortiAP</li> <li>Fortinet FortiAuthenticator</li> <li>Fortinet FortiExtender</li> <li>Fortinet Fortigate</li> <li>Fortinet FortiMail</li> <li>Fortinet FortiSandbox</li> <li>Fortinet FortiSwitch</li> <li>Fortinet FortiVoice</li> <li>Fortinet FortiWeb</li> <li>Fortinet FortiWLC</li> <li>FortiOS</li> <li>Foundry Networking</li> <li>FreeBSD</li> <li>FreshTomato</li> <li>FS.COM monitored pdu</li> <li>Fujifilm Printer</li> <li>Fujitsu</li> <li>Fujitsu ETERNUS</li> <li>FUJITSU iRMC</li> <li>Fujitsu NAS</li> <li>FusionHub</li> </ul>"},{"location":"Support/Features/#g","title":"G","text":"<ul> <li>Gamatronic UPS Stack</li> <li>Gandi Packet Journey</li> <li>GE Digital Energy UPS</li> <li>Geist PDU</li> <li>Geist Watchdog</li> <li>GE MDS Orbit network Operating System</li> <li>Generex UPS SNMP adapter</li> <li>Generic</li> <li>Generic Device</li> <li>GE Pulsar</li> <li>Gestetner Printer</li> <li>GigaVUE</li> <li>Glass Way WDM EYDFA</li> <li>Grandstream HT</li> <li>Grandstream Switch</li> <li>Greenbone OS</li> <li>Gude Expert Transfer Switch</li> <li>gwd</li> </ul>"},{"location":"Support/Features/#h","title":"H","text":"<ul> <li>Halon</li> <li>Hanwha Techwin</li> <li>HAProxy ALOHA</li> <li>Hardware Appliance</li> <li>Helios IP</li> <li>Hikvision Camera</li> <li>Hikvision NVR</li> <li>Hillstone StoneOs</li> <li>Himoinsa Generator Sets</li> <li>Hirschmann</li> <li>Hitachi Storage Virtualization Operating System (SVOS)</li> <li>HP Blade Management</li> <li>HPE 3PAR</li> <li>HPE Comware</li> <li>HPE Integrated Lights Out</li> <li>HPE iPDU</li> <li>HPE Managed Power Distribution Unit</li> <li>HPE MSA</li> <li>HPE OpenVMS</li> <li>HPE StoreEver MSL</li> <li>HP MSM</li> <li>HP PDU Management Module</li> <li>HP Print server</li> <li>HP ProCurve</li> <li>HP UPS</li> <li>HP Virtual Connect</li> <li>Huawei iBMC Management Console</li> <li>Huawei OceanStor</li> <li>Huawei OptiX RTN</li> <li>Huawei SmartAX</li> <li>Huawei SmartAX MDU</li> <li>Huawei SMU</li> <li>Huawei UPS</li> <li>Huawei VRP</li> <li>Huawei YunShan OS</li> <li>HWg Poseidon</li> <li>HWg STE</li> <li>HWg STE2</li> <li>HWg WLD</li> <li>Hytera Repeater</li> </ul>"},{"location":"Support/Features/#i","title":"I","text":"<ul> <li>IBM AMM</li> <li>IBM DPI</li> <li>IBM i</li> <li>IBM IMM</li> <li>IBM Networking Operating System</li> <li>IBM Tape Library</li> <li>iBoot PDU</li> <li>Icotera OS</li> <li>ICR-OS</li> <li>ICT Digital Series Power Supply</li> <li>ICT Distribution Series</li> <li>ICT Modular Power System</li> <li>ICT Sine Wave Inverter</li> <li>Ifotec</li> <li>IgniteNet FusionSwitch</li> <li>IgniteNet HeliOS</li> <li>Illustra Network Camera</li> <li>Imco Power</li> <li>Imco Power LS/PS</li> <li>Infinera Groove</li> <li>Infinera IQNOS</li> <li>Infinera PON</li> <li>Infinera XTM</li> <li>Infoblox</li> <li>Ingrasys iPoMan</li> <li>Innovaphone ISDN</li> <li>Inteno GW</li> <li>IONODES</li> <li>IP Infusion OcNOS</li> <li>IP Office Firmware</li> <li>ITWatchDogs Goose</li> </ul>"},{"location":"Support/Features/#j","title":"J","text":"<ul> <li>Jacarta InterSeptor</li> <li>Janitza</li> <li>Janitza UMG96</li> <li>Juniper EX2500</li> <li>Juniper JunOS</li> <li>Juniper JunOSe</li> <li>Juniper JWOS</li> <li>Juniper MSS</li> <li>Juniper ScreenOS</li> </ul>"},{"location":"Support/Features/#k","title":"K","text":"<ul> <li>KeeneticOS</li> <li>Kemp Loadbalancer</li> <li>Konica-Minolta Printer</li> <li>KTI</li> <li>Kyocera Mita Printer</li> </ul>"},{"location":"Support/Features/#l","title":"L","text":"<ul> <li>Lambdatrail</li> <li>Lancom OS</li> <li>Lancom Systems LCOS LX</li> <li>Lancom Systems LCOS SX</li> <li>Lanier Printer</li> <li>LANTIME v6</li> <li>Lantronix SLC</li> <li>Lantronix UDS</li> <li>Last Mile Gear CTM</li> <li>Lenovo Cloud Network Operating System</li> <li>LenovoEMC</li> <li>Lenovo XCC IMPI</li> <li>Lexmark Printer</li> <li>Liebert</li> <li>LigoWave Infinity</li> <li>LigoWave LigoOS</li> <li>Linksys Smart Switch</li> <li>Linux</li> <li>Loadbalancer.org</li> <li>LogMaster</li> <li>Loop Telecom Operating System</li> </ul>"},{"location":"Support/Features/#m","title":"M","text":"<ul> <li>m0n0wall</li> <li>Maipu MyPower</li> <li>Marathon UPS</li> <li>McAfee Linux OS - ATD</li> <li>McAfee Linux OS - NSP</li> <li>McAfee SIEM Nitro</li> <li>Mcafee Web Gateway</li> <li>MegaTec NetAgent II</li> <li>Meinberg microSync</li> <li>Mellanox</li> <li>Meraki AP</li> <li>Meraki MX Appliance</li> <li>Meraki Switch</li> <li>Microsemi PowerDsine Midspan PoE</li> <li>Microsemi Synchronization Supply Unit</li> <li>Microsoft Windows</li> <li>Mikrotik RouterOS</li> <li>Mikrotik SwOS</li> <li>Mimosa</li> <li>Minkels RMS</li> <li>Mirth Connect</li> <li>Mitel Standard Linux</li> <li>MNI Microwave Radio</li> <li>MobileIron</li> <li>Montclair EDFA</li> <li>MorningStar MPPT</li> <li>MorningStar PWM</li> <li>Motorola DOCSIS Cable Modem</li> <li>Motorola Netopia</li> <li>Moxa</li> <li>Moxa AWK</li> <li>Moxa-EDS-4000-Series</li> <li>MPB SRP</li> <li>MRV LambdaDriver</li> <li>MRV OptiDriver</li> </ul>"},{"location":"Support/Features/#n","title":"N","text":"<ul> <li>NEC Univerge</li> <li>NetApp</li> <li>NetBotz Environment Sensor</li> <li>NetBSD</li> <li>NetElastic Flex BNG</li> <li>Netgear ProSafe</li> <li>NetMan Plus</li> <li>NetModule</li> <li>Netonix</li> <li>NetScaler SD-WAN</li> <li>Network Management Unit</li> <li>Nexans</li> <li>Nimble OS</li> <li>Nokia 1830 PSS</li> <li>NOKIA ISAM</li> <li>Nokia SR OS (TiMOS)</li> <li>Novell Netware</li> <li>NRG Printer</li> <li>NTI</li> <li>Nutanix AOS</li> <li>NVT Phybridge</li> </ul>"},{"location":"Support/Features/#o","title":"O","text":"<ul> <li>OKI Printer</li> <li>Omnitron iConverter</li> <li>OneAccess</li> <li>Open Access Netspire</li> <li>OpenBSD</li> <li>Open-E</li> <li>Opengear</li> <li>OpenIndiana</li> <li>OpenSystems</li> <li>OpenWrt</li> <li>OPNsense</li> <li>Oracle ILOM</li> <li>Orolia SecureSync</li> <li>Orvaldi UPS</li> <li>Overture Hatteras DSLAM</li> </ul>"},{"location":"Support/Features/#p","title":"P","text":"<ul> <li>Packetflux SiteMonitor</li> <li>Packetlight</li> <li>Panasonic KX-NS Series</li> <li>Panduit PDU</li> <li>PanOS</li> <li>Papouch QUIDO</li> <li>Papouch TME</li> <li>Paradyne (by Zhone)</li> <li>Patton SmartNode</li> <li>PBI Digital Decoder</li> <li>PBN</li> <li>PBN P2P CP100 Series Platform</li> <li>Pegasus</li> <li>Pepwave</li> <li>Perle</li> <li>pfSense</li> <li>Pica8 OS</li> <li>Ping only</li> <li>PK700</li> <li>PLANET</li> <li>Polycom Videoconferencing System</li> <li>Positron Access Solutions GAM</li> <li>Powercode BMU</li> <li>PowerWalker UPS</li> <li>PowerWalker VFI</li> <li>Prime Infrastructure</li> <li>Procera Networks</li> <li>Proxim</li> <li>proxmox pve</li> <li>Pulse Secure</li> </ul>"},{"location":"Support/Features/#q","title":"Q","text":"<ul> <li>QNAP TurboNAS</li> <li>QTECH</li> <li>Quanta</li> <li>QuantaStor</li> <li>Quantum</li> </ul>"},{"location":"Support/Features/#r","title":"R","text":"<ul> <li>Radlan</li> <li>RADWIN</li> <li>Raisecom ROAP</li> <li>Raisecom ROS</li> <li>Raritan EMX</li> <li>Raritan KVM</li> <li>Raritan PDU</li> <li>RAy</li> <li>RAy3</li> <li>RecoveryOS</li> <li>Redback Networks SmartEdge</li> <li>Redlion N-Tron</li> <li>Red Lion Sixnet</li> <li>Ribbon GSX</li> <li>Ribbon SBC</li> <li>Ricoh Printer</li> <li>Rittal CMC</li> <li>Rittal CMC III PU</li> <li>Rittal IT Chiller</li> <li>Rittal LCP</li> <li>Rittal LCP DX Chiller</li> <li>Riverbed</li> <li>RNX UPDU</li> <li>Rohde &amp; Schwarz</li> <li>Rubrik</li> <li>Ruckus Wireless HotZone</li> <li>Ruckus Wireless SmartZone</li> <li>Ruckus Wireless Unleashed</li> <li>Ruckus Wireless ZoneDirector</li> <li>Ruijie Networks</li> </ul>"},{"location":"Support/Features/#s","title":"S","text":"<ul> <li>SAF CFM</li> <li>SAF Integra B</li> <li>SAF Integra E</li> <li>SAF Integra W</li> <li>SAF Integra X</li> <li>SAF Tehnika</li> <li>Sagem ADR IONOS</li> <li>Samlex Inverter</li> <li>Samsung Printer</li> <li>Sangoma Vega</li> <li>Savin Printer</li> <li>Schleifenbauer SPDM</li> <li>Schneider PowerLogic</li> <li>SCS KS</li> <li>SEH</li> <li>Sensatronics EM1</li> <li>Sensatronics ITTM</li> <li>ServersCheck</li> <li>ServerTech Sentry3</li> <li>ServerTech Sentry4</li> <li>Sharp Printer</li> <li>SIAE Alfoplus 80HD</li> <li>Siemens Ruggedcom Switches (ROS)</li> <li>Siemens SCALANCE</li> <li>Siklu Wireless</li> <li>Silver Peak VXOA</li> <li>Sinetica UPS</li> <li>Skyhigh Secure Web Gateway</li> <li>SmartOptics DCP-M Series</li> <li>SmartOptics M-Series</li> <li>SmartOptics T-Series</li> <li>SM-OS</li> <li>snr</li> <li>snr-erd</li> <li>Socomec Net Vision</li> <li>Socomec PDU</li> <li>Socomec UPS</li> <li>Software Appliance</li> <li>Solid Optics EDFAMUX</li> <li>SonicWALL</li> <li>Sophos UTM Firewall</li> <li>Sophos XG</li> <li>Stormshield NS-BSD</li> <li>Stulz GMBH Klimatechnik</li> <li>Sub10 Systems</li> <li>Sun OpenSolaris</li> <li>Sun Solaris</li> <li>Supermicro BMC</li> <li>Supermicro Switch</li> <li>Symbol AP</li> <li>SyncServer</li> <li>Synology DSM</li> </ul>"},{"location":"Support/Features/#t","title":"T","text":"<ul> <li>Tachyon</li> <li>Tait Infra93 Series</li> <li>Tait TN Admin OS</li> <li>Tandberg Magnum</li> <li>technicolor TG MediaAcces</li> <li>Tegile IntelliFlash</li> <li>Telco Systems BiNOS</li> <li>Telco Systems BiNOX</li> <li>Teldat</li> <li>TelePresence Codec</li> <li>TelePresence Conductor</li> <li>Teleste Luminato</li> <li>Teltonika RutOS</li> <li>Teltonika RutOS RUTX Series</li> <li>Teltonika RutOS RUTM Series</li> <li>Teltonika WitchOS</li> <li>TeraCom</li> <li>Teradici PCoIP</li> <li>Terra</li> <li>Thomson DOCSIS Cable Modem</li> <li>Thomson Speedtouch</li> <li>Tomato</li> <li>TopVision</li> <li>Toshiba Printer</li> <li>Toshiba RemotEye4</li> <li>TP-Link JetStream</li> <li>TP-Link Switch</li> <li>Transition</li> <li>Tranzeo</li> <li>TRENDnet Switch</li> <li>TrippLite console server</li> <li>Tripp Lite PowerAlert</li> <li>TrueNAS</li> <li>TrueNAS-SCALE</li> <li>TSC Printer</li> <li>Tycon Systems TPDIN</li> </ul>"},{"location":"Support/Features/#u","title":"U","text":"<ul> <li>Ubiquiti AirFiber</li> <li>Ubiquiti AirFiber 60</li> <li>Ubiquiti AirFiber LTU</li> <li>Ubiquiti AirOS</li> <li>Ubiquiti Edgepower</li> <li>Ubiquiti UniFi</li> <li>Ubiquoss PON</li> <li>Ucopia</li> <li>UFiber</li> <li>UHP Networks VSAT Terminal</li> <li>ULAF+</li> <li>UniPing</li> <li>UTAX Printer</li> </ul>"},{"location":"Support/Features/#v","title":"V","text":"<ul> <li>Vanguard ApplicationsWare</li> <li>Venturi Wireless</li> <li>Vertiv Avocent MergePoint Unity</li> <li>Vertiv PDU</li> <li>Video Communication Server</li> <li>Viprinux</li> <li>Viptela</li> <li>Vivotek Camera</li> <li>VMware ESXi</li> <li>VMware SD-WAN</li> <li>VMware vCenter</li> <li>Volius</li> <li>Voswall</li> <li>V-Solution</li> <li>Vubiq Networks</li> <li>Vutlan</li> <li>Vyatta</li> <li>VyOS</li> </ul>"},{"location":"Support/Features/#w","title":"W","text":"<ul> <li>Watchguard Fireware</li> <li>Waystream iBOS</li> <li>WebPower</li> <li>WebPower-smart2</li> <li>Web-Thermo-Hygrometer</li> <li>Westermo WeOS</li> <li>West Mountain RMCU</li> <li>WIS Bridge</li> <li>WISI Tangram</li> <li>WTI CONSOLE</li> <li>WTI MPC</li> <li>WTI POWER</li> </ul>"},{"location":"Support/Features/#x","title":"X","text":"<ul> <li>Xerox Printer</li> <li>Xirrus ArrayOS</li> </ul>"},{"location":"Support/Features/#z","title":"Z","text":"<ul> <li>ZebraNet</li> <li>Zhone MXK</li> <li>Zmtel Greenpacket</li> <li>ZTE ZXA10</li> <li>ZTE ZXR10</li> <li>ZXDSL</li> <li>ZyXEL AC</li> <li>ZyXEL DSLAM</li> <li>ZyXEL Ethernet Switch</li> <li>ZyXEL IES-5000 DSLAM</li> <li>ZyXEL IES MSAN</li> <li>ZyXEL NWA</li> <li>ZyXEL Prestige</li> <li>ZyXEL USG</li> <li>ZyXEL ZyWALL</li> <li>Zyxel Zyxelwlc</li> </ul>"},{"location":"Support/High-Availability/","title":"High Availability","text":""},{"location":"Support/High-Availability/#overview","title":"Overview","text":"<p>High Availability (HA) in LibreNMS ensures continuous operation and minimizes downtime by implementing redundancy for two critical components:</p> <ul> <li>Polling: The data collection process</li> <li>WebUI: The web interface for users</li> </ul> <p>To achieve high availability, you need to ensure that the following components are redundant:</p> <ol> <li>Database: MySQL/MariaDB with clustering</li> <li>Redis w/ Redis Sentinel: For session management and caching</li> <li>RRD Files: For storing polled data</li> </ol> <p>Also make sure that the poller uses a distributed setup which must be LibreNMS Dispatcher service.</p> <p>For simplicity, the web-ui and poller can be configured to use the same Redis Sentinel cluster.</p>"},{"location":"Support/High-Availability/#note-about-rrd-files","title":"Note about RRD Files","text":"<p>Pollers need to write RRD data to files on disk to store polled data. It's recommended to use RRDCached which accept RRD data over TCP/IP. This doesn't provide HA for RRD data but does allows multiple pollers to write to the same RRD files using network connection. This is outlined in RRDCached.md.</p> <p>One way to add HA support for RRD is to use a shared storage over NFS with GlusterFS or similar.</p>"},{"location":"Support/High-Availability/#webui-high-availability","title":"WebUI High Availability","text":"<p>The WebUI achieves HA through multiple LibreNMS instances sharing these backend services:</p> <ul> <li>Clustered Database</li> <li>Redis with Sentinel</li> <li>Centralized RRD Storage</li> </ul>"},{"location":"Support/High-Availability/#implementation","title":"Implementation","text":"<ol> <li>Configure Database HA: </li> <li>Set up a Galera Cluster</li> <li> <p>See Galera-Cluster.md for detailed instructions</p> </li> <li> <p>Configure Redis HA:</p> </li> <li>Implement Redis Sentinel</li> <li> <p>See Redis-Sentinel.md for configuration details</p> </li> <li> <p>Deploy multiple LibreNMS instances:</p> </li> <li>Install LibreNMS on multiple servers</li> <li>Configure each instance to use the same database and Redis Sentinel cluster</li> <li>Ensure identical <code>.env</code> configurations across all instances. Remember to set <code>APP_KEY</code> to the same value on all instances.</li> <li> <p>Each install should have a unique <code>NODE_ID</code> in your <code>.env</code>.</p> </li> <li> <p>Configure RRD Access:     Either use Use RRDCached that allows all instances to access the same RRD files. Or use a shared storage for the RRD files over NFS or similar.</p> </li> </ol>"},{"location":"Support/High-Availability/#polling-high-availability","title":"Polling High Availability","text":"<p>Distributed polling allows multiple pollers to work together, providing load distribution and failover capability.</p> <p>Warning</p> <p>The poller does not support MySQL Galera clustering, so you need to use a TCP load balancer such as Nginx or HAProxy in front of the cluster to point to the cluster nodes.</p>"},{"location":"Support/High-Availability/#implementation_1","title":"Implementation","text":"<ol> <li>Configure distributed polling:</li> <li>Follow the instructions in Distributed-Poller.md</li> <li>Ensure all pollers connect to the clustered database, Redis Sentinel and can access the same RRD files.</li> </ol>"},{"location":"Support/Install%20Validation/","title":"Install validation","text":"<p>With a lot of configuration possibilities, it's not uncommon that mistakes get made.</p> <p>So, to try and help with some of the general issues people come across we've put together a simple validation tool which at present will:</p> <ul> <li>Validate config.php from a php perspective including whitespace   where it shouldn't be.</li> <li>Connection to your MySQL server to verify credentials.</li> <li>Checks if you are running the older alerting system.</li> <li>Checks your rrd directory setup if not running rrdcached.</li> <li>Checks disk space for where /opt/librenms is installed.</li> <li>Checks location to fping.</li> <li>Tests MySQL strict mode being enabled.</li> <li>Tests for files not owned by librenms user (if configured).</li> <li>And more added all the time.</li> </ul> <p>Optionally you can also pass -m and a module name for that to be tested. Current modules are:</p> <ul> <li>mail - This will validate your mail transport configuration.</li> <li>dist-poller - This will test your distributed poller configuration.</li> <li>rrdcheck - This will test your rrd files to see if they are   unreadable or corrupted (source of broken graphs).</li> </ul> <p>You can run validate.php as <code>librenms</code> by executing <code>./validate.php</code> within your install directory.</p> <p>The output will provide you either a clean bill of health or a list of things you need to fix:</p> <p>OK - This is a good thing, you can skip over these :)</p> <p>WARN - You probably want to check this out.</p> <p>FAIL - This is going to need your attention!</p>"},{"location":"Support/Install%20Validation/#validate-from-the-webui","title":"Validate from the WebUI","text":"<p>You can validate your LibreNMS install from the WebUI, using the nav bar and clicking on the little Gear Icon -&gt; Validate Config.</p> <p>It's worth running validate on both the WebUI and CLI as they test for different things.</p> <p> </p> <p>Then You should see the results of validate.</p> <p>Below is just example of the results.</p> <p></p>"},{"location":"Support/Performance/","title":"Performance optimisations","text":"<p>This document will give you some guidance on optimising your setup.</p> <p>The suggestions are in a rough order of how much impact they will have.</p>"},{"location":"Support/Performance/#rrdcached","title":"RRDCached","text":"<p>We absolutely recommend running this, it will save on IO load. RRDCached</p>"},{"location":"Support/Performance/#mysql-optimisation","title":"MySQL Optimisation","text":"<p>It's advisable after 24 hours of running MySQL that you run MySQL Tuner which will make suggestions on things you can change specific to your setup.</p> <p>One recommendation we can make is that you set the following in my.cnf under a [mysqld] group:</p> <pre><code>innodb_flush_log_at_trx_commit = 0\n</code></pre> <p>You can also set this to 2. This will have the possibility that you could lose up to 1 second on mysql data in the event MySQL crashes or your server does but it provides an amazing difference in IO use.</p>"},{"location":"Support/Performance/#polling-modules","title":"Polling modules","text":"<p>Review the graph of poller module time take under gear &gt; pollers &gt; performance to see what modules are consuming poller time. This data is shown per device under device &gt; graphs &gt; poller.</p> <p>Disable polling (and discovery) modules that you do not need. You can do this globally using <code>lnms config:set poller_module.&lt;module&gt;</code> like:</p> <p>Disable OSPF polling</p> <p>poller/poller_modules</p> <pre><code>lnms config:set poller_modules.ospf false\n</code></pre> <p>You can disable modules globally then re-enable the module per device or the opposite way. For a list of modules please see Poller modules</p>"},{"location":"Support/Performance/#snmp-max-repeaters","title":"SNMP Max Repeaters","text":"<p>We have support for SNMP Max repeaters which can be handy on devices where we poll a lot of ports or bgp sessions for instance and where snmpwalk or snmpbulkwalk is used. This needs to be enabled on a per device basis under edit device -&gt; snmp -&gt; Max repeaters.</p> <p>You can also set this globally with the config option:</p> <p>poller/snmp</p> <pre><code>lnms config:set snmp.max_repeaters X\n</code></pre> <p>It's advisable to test the time taken to snmpwalk IF-MIB or something similar to work out what the best value is. To do this run the following but replace -REPEATERS- with varying numbers from 10 upto around 50. You will also need to set the correct snmp version, hostname and community string:</p> <pre><code>time snmpbulkwalk -v2c -cpublic HOSTNAME -Cr-REPEATERS- -M /opt/librenms/mibs -m IF-MIB IfEntry\n</code></pre> <p>Warning</p> <p>Do not go blindly setting this value as you can impact polling negatively.</p>"},{"location":"Support/Performance/#snmp-max-oids","title":"SNMP Max OIDs","text":"<p>For sensors polling, we do bulk snmpgets to speed things up. By default this is ten but you can overwrite this per device under edit device -&gt; snmp -&gt; Max OIDs.</p> <p>You can also set this globally with the config option:</p> <p>poller/snmp</p> <pre><code>lnms config:set snmp.max_oid X\n</code></pre> <p>Warning</p> <p>It is advisable to monitor sensor polling when you change this to ensure you don't set the value too high.</p>"},{"location":"Support/Performance/#fping-tuning","title":"fping tuning","text":"<p>You can change some of the default fping options used globally or per device. The defaults are:</p> <p>poller/ping</p> <pre><code>lnms config:set fping_options.timeout 500\nlnms config:set fping_options.count 3\nlnms config:set fping_options.interval 500\n</code></pre> <p>If your devices are slow to respond then you will need to increase the timeout value and potentially the interval value. However if your network is stable, you can increase poller performance by dropping the count value to 1 and/or the timeout+millsec value to 200 or 300:</p> <p>poller/ping</p> <pre><code>lnms config:set fping_options.timeout 300\nlnms config:set fping_options.count 1\nlnms config:set fping_options.interval 300\n</code></pre> <p>This will mean that we no longer delay each icmp packet sent (we send 3 in total by default) by 0.5 seconds. With only 1 icmp packet being sent then we will receive a response quicker. The defaults mean it will take at least 1 second for a response no matter how quick the icmp packet is returned.</p>"},{"location":"Support/Performance/#optimise-poller-wrapper","title":"Optimise poller-wrapper","text":"<p><code>poller-wrapper.py</code> defaults to using 16 threads, this isn't necessarily optimal. A general rule of thumb is 2 threads per core but we suggest that you play around with lowering / increasing the number until you get the optimal value.</p> <p>Note</p> <p>KEEP in MIND that this doesn't always help, it depends on your system and CPU. So be careful. This can be changed by going to the cron job for librenms. Usually in <code>/etc/cron.d/librenms</code> and changing the \"16\"</p> <pre><code>*/5  *    * * *   librenms    /opt/librenms/cronic /opt/librenms/poller-wrapper.py 16\n</code></pre> <p>If you use the Dispatch Service then you can adjust the number of threads within the WebUI. Please see Dispatcher Service</p>"},{"location":"Support/Performance/#recursive-dns","title":"Recursive DNS","text":"<p>If your install uses hostnames for devices and you have quite a lot, then it's advisable to setup a local recursive dns instance on the LibreNMS server. Something like pdns-recursor can be used and then configure <code>/etc/resolv.conf</code> to use 127.0.0.1 for queries.</p>"},{"location":"Support/Performance/#per-port-polling","title":"Per port polling","text":"<p>By default the polling ports module will walk ifXEntry + some items from ifEntry regardless of the port status. So if a port is marked as deleted because you don't want to see them or it's disabled then we still collect data. For the most part this is fine as the walks are quite quick. However for devices with a lot of ports and good % of those are either deleted or disabled then this approach isn't optimal. So to counter this you can enable 'selected port polling' per device within the edit device -&gt; misc section or by globally enabling it (not recommended):</p> <p>poller/ports</p> <pre><code>lnms config:set polling.selected_ports true\n</code></pre> <p>This is not recommended, as it has been proven to affect cpu usage of your poller negatively. You can also set it for a specific OS:</p> <p>poller/ports</p> <pre><code>lnms config:set os.ios.polling.selected_ports true\n</code></pre> <p>Running <code>./scripts/collect-port-polling.php</code> as the <code>librenms</code> user will poll your devices with both full and selective polling, display a table with the difference and optionally enable or disable selected ports polling for devices which would benefit from a change. Note that it doesn't continuously re-evaluate this, it will only be updated when the script is run. There are a number of options:</p> <pre><code>-h &lt;device id&gt; | &lt;device hostname wildcard&gt;  Poll single device or wildcard hostname\n-e &lt;percentage&gt;                              Enable/disable selected ports polling for devices which would benefit &lt;percentage&gt; from a change\n</code></pre> <p>If you want to run this script to have it set selected port polling on devices where a change of 10% or more is evaluated, run it with <code>./scripts/collect-port-polling.php -e 10</code>. But note: it will not blindly use only the 10%. There is a second condition that the change has to be more than one second in polling time.</p>"},{"location":"Support/Performance/#web-interface","title":"Web interface","text":""},{"location":"Support/Performance/#http2","title":"HTTP/2","text":"<p>If you are running https then you should enable http/2 support in whatever web server you use:</p> <p>For Nginx (1.9.5 and above) change <code>listen 443 ssl;</code> to <code>listen 443 ssl http2;</code> in the Virtualhost config.</p> <p>For Apache (2.4.17 and above) set <code>Protocols h2 http/1.1</code> in the Virtualhost config.</p>"},{"location":"Support/Performance/#php-opcache","title":"PHP-opcache","text":"<p>A lot of performance can be gained from setting up <code>php-opcache</code> correctly.</p> <p>Note: Memory based caching with PHP cli will increase memory usage and slow things down. File based caching is not as fast as memory based and is more likely to have stale cache issues.</p> <p>Some distributions allow separate cli, mod_php and php-fpm configurations, we can use this to set the optimal config.</p>"},{"location":"Support/Performance/#for-web-servers-using-mod_php-and-php-fpm","title":"For web servers using mod_php and php-fpm","text":"<p>Update your web PHP opcache.ini.  Possible locations: <code>/etc/php/8.3/fpm/conf.d/opcache.ini</code>, <code>/etc/php.d/opcache.ini</code>, or <code>/etc/php/conf.d/opcache.ini</code>.</p> <pre><code>zend_extension=opcache\nopcache.enable=1\nopcache.memory_consumption=256\n</code></pre> <p>If you are having caching issues, you can clear the opcache by simply restarting httpd or php-fpm.</p>"},{"location":"Support/Performance/#for-pollers","title":"For pollers","text":"<p>Create a cache directory that is writable by the librenms user first: <code>sudo mkdir -p /tmp/cache &amp;&amp; sudo chmod 775 /tmp/cache &amp;&amp; sudo chown -R librenms /tmp/cache</code></p> <p>Update your PHP opcache.ini.  Possible locations: <code>/etc/php/8.3/cli/conf.d/opcache.ini</code>, <code>/etc/php.d/opcache.ini</code>, or <code>/etc/php/conf.d/opcache.ini</code>.</p> <pre><code>zend_extension=opcache.so\nopcache.enable=1\nopcache.enable_cli=1\nopcache.file_cache=\"/tmp/cache/\"\nopcache.file_cache_only=0\nopcache.file_cache_consistency_checks=1\nopcache.memory_consumption=256\n</code></pre> <p>If you are having caching issues, you can clear the file based opcache with <code>rm -rf /tmp/cache</code>.</p> <p>Debian 12 users, be aware php 8.2 current stable version (8.2.7) creates segmentation faults when opcache uses file cache. Issue should be this one https://github.com/php/php-src/issues/10914  Using sury packages or disabling file cache solves the issue</p>"},{"location":"Support/Poller%20Support/","title":"Poller Support","text":"<p>This document will explain how to use <code>lnms device:poll</code> to debug issues or manually running to process data.</p>"},{"location":"Support/Poller%20Support/#command-options","title":"Command options","text":"<pre><code>Description:\n  Poll data from device(s) as defined by discovery\n\nUsage:\n  device:poll [options] [--] &lt;device spec&gt;\n\nArguments:\n  device spec            Device spec to poll: device_id, hostname, wildcard (*), odd, even, all\n\nOptions:\n  -m, --modules=MODULES  Specify single module to be run. Comma separate modules, submodules may be added with /\n  -x, --no-data          Do not update datastores (RRD, InfluxDB, etc)\n  -h, --help             Display help for the given command. When no command is given display help for the list command\n  -q, --quiet            Do not output any message\n  -V, --version          Display this application version\n      --ansi|--no-ansi   Force (or disable --no-ansi) ANSI output\n  -n, --no-interaction   Do not ask any interactive question\n      --env[=ENV]        The environment the command should run under\n  -v|vv|vvv, --verbose   Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug\n</code></pre>"},{"location":"Support/Poller%20Support/#poller-wrapper","title":"Poller Wrapper","text":"<p>We have a <code>poller-wrapper.py</code> script by Job Snijders. This script is currently the default.</p> <p>If you need to debug the output of poller-wrapper.py then you can add <code>-d</code> to the end of the command - it is NOT recommended to do this in cron.</p>"},{"location":"Support/Poller%20Support/#poller-config","title":"Poller config","text":"<p>These are the default poller config items. You can globally disable a module by setting it to <code>false</code>. If you just want to disable it for one device then you can do this within the WebUI Device -&gt; Edit -&gt; Modules.</p> <p>poller/poller_modules</p> <pre><code>lnms config:set poller_modules.unix-agent false\nlnms config:set poller_modules.os true\nlnms config:set poller_modules.ipmi true\nlnms config:set poller_modules.sensors true\nlnms config:set poller_modules.processors true\nlnms config:set poller_modules.mempools true\nlnms config:set poller_modules.storage true\nlnms config:set poller_modules.netstats true\nlnms config:set poller_modules.hr-mib true\nlnms config:set poller_modules.ucd-mib true\nlnms config:set poller_modules.ipSystemStats true\nlnms config:set poller_modules.ports true\nlnms config:set poller_modules.nac false\nlnms config:set poller_modules.bgp-peers true\nlnms config:set poller_modules.junose-atm-vp false\nlnms config:set poller_modules.printer-supplies false\nlnms config:set poller_modules.ucd-diskio true\nlnms config:set poller_modules.wireless true\nlnms config:set poller_modules.ospf true\nlnms config:set poller_modules.ospfv3 true\nlnms config:set poller_modules.cisco-ipsec-flow-monitor false\nlnms config:set poller_modules.cisco-remote-access-monitor false\nlnms config:set poller_modules.cisco-cef false\nlnms config:set poller_modules.slas false\nlnms config:set poller_modules.cisco-mac-accounting false\nlnms config:set poller_modules.cipsec-tunnels false\nlnms config:set poller_modules.cisco-ace-loadbalancer false\nlnms config:set poller_modules.cisco-ace-serverfarms false\nlnms config:set poller_modules.cisco-cbqos false\nlnms config:set poller_modules.cisco-otv false\nlnms config:set poller_modules.cisco-vpdn false\nlnms config:set poller_modules.netscaler-vsvr false\nlnms config:set poller_modules.aruba-controller false\nlnms config:set poller_modules.entity-physical true\nlnms config:set poller_modules.entity-state false\nlnms config:set poller_modules.applications true\nlnms config:set poller_modules.availability true\nlnms config:set poller_modules.stp true\nlnms config:set poller_modules.vminfo false\nlnms config:set poller_modules.ntp true\nlnms config:set poller_modules.services true\nlnms config:set poller_modules.loadbalancers false\nlnms config:set poller_modules.mef false\nlnms config:set poller_modules.mef false\n</code></pre>"},{"location":"Support/Poller%20Support/#os-based-poller-config","title":"OS based Poller config","text":"<p>You can enable or disable modules for a specific OS by using <code>lnms config:set os.&lt;poller_module&gt; false</code> OS based settings have preference over global. Device based settings have preference over all others.</p> <p>Negligible Poller performance improvements can be achieved by deactivating all modules that are not supported by specific OS.</p> <p>E.g. to deactivate spanning tree but activate unix-agent module for linux OS</p> <p>poller/poller_modules</p> <pre><code>lnms config:set os.linux.poller_modules.stp false\nlnms config:set os.linux.poller_modules.unix-agent true\n</code></pre>"},{"location":"Support/Poller%20Support/#poller-modules","title":"Poller modules","text":"<p><code>unix-agent</code>: Enable the check_mk agent for external support for applications.</p> <p><code>system</code>: Provides information on some common items like uptime, sysDescr and sysContact.</p> <p><code>os</code>: Os detection. This module will pick up the OS of the device.</p> <p><code>ipmi</code>: Enables support for IPMI if login details have been provided for IPMI.</p> <p><code>sensors</code>: Sensor detection such as Temperature, Humidity, Voltages + More.</p> <p><code>processors</code>: Processor support for devices.</p> <p><code>mempools</code>: Memory detection support for devices.</p> <p><code>storage</code>: Storage detection for hard disks</p> <p><code>netstats</code>: Statistics for IP, TCP, UDP, ICMP and SNMP.</p> <p><code>hr-mib</code>: Host resource support.</p> <p><code>ucd-mib</code>: Support for CPU, Memory and Load.</p> <p><code>ipSystemStats</code>: IP statistics for device.</p> <p><code>ports</code>: This module will detect all ports on a device excluding ones configured to be ignored by config options.</p> <p><code>xdsl</code>: This module will collect more metrics for xdsl interfaces.</p> <p><code>nac</code>: Network Access Control (NAC) or 802.1X support.</p> <p><code>bgp-peers</code>: BGP detection and support.</p> <p><code>junose-atm-vp</code>: Juniper ATM support.</p> <p><code>printer-supplies</code>: Toner levels support.</p> <p><code>ucd-diskio</code>: Disk I/O support.</p> <p><code>wifi</code>: WiFi Support for those devices with support.</p> <p><code>ospf</code>: OSPF Support.</p> <p><code>ospfv3</code>: OSPFv3 Support.</p> <p><code>cisco-ipsec-flow-monitor</code>: IPSec statistics support.</p> <p><code>cisco-remote-access-monitor</code>: Cisco remote access support.</p> <p><code>cisco-cef</code>: CEF detection and support.</p> <p><code>slas</code>: SLA detection and support.</p> <p><code>cisco-mac-accounting</code>: MAC Address account support.</p> <p><code>cipsec-tunnels</code>: IPSec tunnel support.</p> <p><code>cisco-ace-loadbalancer</code>: Cisco ACE Support.</p> <p><code>cisco-ace-serverfarms</code>: Cisco ACE Support.</p> <p><code>netscaler-vsvr</code>: Netscaler support.</p> <p><code>aruba-controller</code>: Aruba wireless controller support.</p> <p><code>entity-physical</code>: Module to pick up the devices hardware support.</p> <p><code>applications</code>: Device application support.</p> <p><code>availability</code>: Device Availability Calculation.</p>"},{"location":"Support/Poller%20Support/#running","title":"Running","text":"<p>Here are some examples of running poller from within your install directory.</p> <pre><code>lnms device:poll localhost\n\nlnms device:poll localhost -m ports\n</code></pre>"},{"location":"Support/Poller%20Support/#debugging","title":"Debugging","text":"<p>To provide debugging output you will need to run the poller process with the <code>-vv</code> flag. You can do this either against all modules, single or multiple modules:</p> <p>All Modules</p> <pre><code>lnms device:poll localhost -vv\n</code></pre> <p>Single Module</p> <pre><code>lnms device:poll localhost -m ports -vv\n</code></pre> <p>Multiple Modules</p> <pre><code>lnms device:poll localhost -m ports,entity-physical -vv\n</code></pre> <p>Using <code>-vv</code> shouldn't output much sensitive information, <code>-vvv</code> will, so it is then advisable to sanitise the output before pasting it somewhere as the debug output will contain snmp details amongst other items including port descriptions.</p> <p>The output will contain:</p> <p>DB Updates</p> <p>RRD Updates</p> <p>SNMP Response</p>"},{"location":"Support/Remote-Monitoring-VPN/","title":"Remote monitoring using tinc VPN","text":"<p>This article describes how to use tinc to connect several remote sites and their subnets to your central monitoring server. This will let you connect to devices on remote private IP ranges through one gateway on each site, routing them securely back to your LibreNMS installation.</p>"},{"location":"Support/Remote-Monitoring-VPN/#configuring-the-monitoring-server","title":"Configuring the monitoring server","text":"<p>tinc should be available on nearly all Linux distributions via package management. If you are running something different, just take a look at tinc's homepage to find an appropriate version for your operating system: https://www.tinc-vpn.org/download/</p> <p>Here, we are going to describe the setup for Debian-based systems, but there are virtually no differences for CentOS or similar.</p> <ul> <li>First make sure your firewall accepts connections on port 655 UDP   and TCP.</li> <li>Then install tinc via <code>apt-get install tinc</code>.</li> <li>Create the following directory structure to hold all your   configuration files: <code>mkdir -p /etc/tinc/myvpn/hosts</code> \"myvpn\" is   your VPN network's name and can be chosen freely.</li> <li>Create your main configuration file: <code>vim /etc/tinc/myvpn/tinc.conf</code></li> </ul> <pre><code>Name = monitoring\nAddressFamily = ipv4\nDevice = /dev/net/tun\n</code></pre> <ul> <li>Next we need network up and down scripts to define a few network   settings for inside our VPN: <code>vim /etc/tinc/myvpn/tinc-up</code></li> </ul> <pre><code>#!/bin/sh\nifconfig $INTERFACE 10.6.1.1 netmask 255.255.255.0\nip route add 10.6.1.1/24 dev $INTERFACE\nip route add 10.0.0.0/22 dev $INTERFACE\nip route add 10.100.0.0/22 dev $INTERFACE\nip route add 10.200.0.0/22 dev $INTERFACE\n</code></pre> <ul> <li> <p>In this example we have 10.6.1.1 as the VPN IP address for the   monitoring server on a /24 subnet. $INTERFACE will be automatically   substituted with the name of the VPN, \"myvpn\" in this case. Then we   have a route for the VPN subnet, so we can reach other sites via   their VPN address. The last 3 lines designate the remote subnets. In   the example I want to reach devices on three different remote   private /22 subnets and be able to monitor devices on them from this   server, so I set up routes for each of those remote sites in my   tinc-up script.</p> </li> <li> <p>The tinc-down script is relatively simple as it just removes the   custom interface, which should get rid of the routes as well: <code>vim   /etc/tinc/myvpn/tinc-down</code></p> </li> </ul> <pre><code>#!/bin/sh\nifconfig $INTERFACE down\n</code></pre> <ul> <li>Make sure your scripts scan be executed: <code>chmod +x   /etc/tinc/myvpn/tinc-*</code></li> <li>As a last step we need a host configuration file. This should be   named the same as the \"Name\" you defined in tinc.conf: <code>vim   /etc/tinc/myvpn/hosts/monitoring</code></li> </ul> <pre><code>Subnet = 10.6.1.1/32\n</code></pre> <p>On the monitoring server we will just fill in the subnet and not define its external IP address to make sure it listens on all available external interfaces.</p> <ul> <li>It's time to use tinc to create our key-pair: <code>tincd -n myvpn -K</code></li> <li>Now the file <code>/etc/tinc/myvpn/hosts/monitoring</code> should have an RSA   public key appended to it and your private key should reside in   <code>/etc/tinc/myvpn/rsa_key.priv</code>.</li> <li>To make sure that the connection will be restored after each reboot,   you can add your VPN name to <code>/etc/tinc/nets.boot</code>.</li> <li>Now you can start tinc with <code>tincd -n myvpn</code> and it will listen for   your remote sites to connect to it.</li> </ul>"},{"location":"Support/Remote-Monitoring-VPN/#remote-site-configuration","title":"Remote site configuration","text":"<p>Essentially the same steps as for your central monitoring server apply for all remote gateway devices. These can be routers, or just any computer or VM running on the remote subnet, able to reach the internet with the ability to forward IP packets externally.</p> <ul> <li>Install tinc</li> <li>Create directory structure: <code>mkdir -p /etc/tinc/myvpn/hosts</code></li> <li>Create main configuration: <code>vim /etc/tinc/myvpn/tinc.conf</code></li> </ul> <pre><code>Name = remote1\nAddressFamily = ipv4\nDevice = /dev/net/tun\nConnectTo = monitoring\n</code></pre> <ul> <li>Create up script: <code>vim /etc/tinc/myvpn/tinc-up</code></li> </ul> <pre><code>#!/bin/sh\nifconfig $INTERFACE 10.6.1.2 netmask 255.255.255.0\nip route add 10.6.1.2/32 dev $INTERFACE\n</code></pre> <ul> <li>Create down script: <code>vim /etc/tinc/myvpn/tinc-down</code></li> </ul> <pre><code>#!/bin/sh\nifconfig $INTERFACE down\n</code></pre> <ul> <li>Make executable: <code>chmod +x /etc/tinc/myvpn/tinc*</code></li> <li>Create device configuration: <code>vim /etc/tinc/myvpn/hosts/remote1</code></li> </ul> <pre><code>Address = 198.51.100.2\nSubnet = 10.0.0.0/22\n</code></pre> <p>This defines the device IP address outside of the VPN and the subnet it will expose.</p> <ul> <li>Copy over the monitoring server's host configuration (including the   embedded public key) and add it's external IP address: <code>vim   /etc/tinc/myvpn/hosts/monitoring</code></li> </ul> <pre><code>Address = 203.0.113.6\nSubnet = 10.6.1.1/32\n\n-----BEGIN RSA PUBLIC KEY-----\nVeDyaqhKd4o2Fz...\n</code></pre> <ul> <li>Generate this device's keys: <code>tincd -n myvpn -K</code></li> <li>Copy over this devices host file including the embedded public key   to your monitoring server.</li> <li>Add the name for the VPN to<code>/etc/tinc/nets.boot</code> if you want to   autostart the connection upon reboot.</li> <li>Start tinc: <code>tincd -n myvpn</code></li> </ul> <p>These steps can basically be repeated for every remote site just  choosing different names and other internal IP addresses. In my case  I connected 3 remote sites running behind Ubiquiti EdgeRouters. Since  those devices let me install software through Debian's package  management it was very easy to set up. Just create the necessary  configuration files and network scripts on each device and distribute  the host configurations including the public keys to each device that  will actively connect back.</p> <p>Now you can add all devices you want to monitor in LibreNMS using their internal IP address on the remote subnets or using some form of name resolution. I opted to declare the most important devices in my <code>/etc/hosts</code> file on the monitoring server.</p> <p>As an added bonus tinc is a mesh VPN, so in theory you could specify several \"ConnectTo\" on each device and they should hold connections even if one network path goes down.</p>"},{"location":"Support/SNMP-Configuration-Examples/","title":"SNMP configuration examples","text":""},{"location":"Support/SNMP-Configuration-Examples/#devices","title":"Devices","text":""},{"location":"Support/SNMP-Configuration-Examples/#cisco","title":"Cisco","text":""},{"location":"Support/SNMP-Configuration-Examples/#adaptive-security-appliance-asa","title":"Adaptive Security Appliance (ASA)","text":"<p>ASDM</p> <ol> <li>Launch ASDM and connect to your device</li> <li>Go to Configuration &gt; Management Access &gt; SNMP</li> <li>Add your community string</li> <li>Add in the \"SNMP Host Access List\" section your LibreNMS server IP address</li> <li>Click Apply and Save</li> </ol> <p>CLI</p> <pre><code># SNMPv2c\n\nsnmp-server community &lt;YOUR-COMMUNITY&gt;\nsnmp-server contact &lt;YOUR-CONTACT&gt;\nsnmp-server location &lt;YOUR-LOCATION&gt;\nsnmp-server host &lt;INTERFACE&gt; &lt;LIBRENMS-IP&gt; poll community &lt;YOUR-COMMUNITY&gt; version 2c\n\n# SNMPv3\n\nsnmp-server group &lt;GROUP-NAME&gt; v3 priv\nsnmp-server user &lt;USER-NAME&gt; &lt;GROUP-NAME&gt; v3 auth sha &lt;AUTH-PASSWORD&gt; priv aes 128 &lt;PRIV-PASSWORD&gt;\nsnmp-server contact &lt;YOUR-CONTACT&gt;\nsnmp-server location &lt;YOUR-LOCATION&gt;\nsnmp-server host &lt;INTERFACE&gt; &lt;LIBRENMS-IP&gt; poll version 3 &lt;USER-NAME&gt;\n</code></pre> <p>Note</p> <p>If the device is unable to find the SNMP user, reboot the ASA. Once rebooted, continue the steps as normal.</p>"},{"location":"Support/SNMP-Configuration-Examples/#ios-ios-xe","title":"IOS / IOS XE","text":"<pre><code># SNMPv2c\n\nsnmp-server community &lt;YOUR-COMMUNITY&gt; RO\nsnmp-server contact &lt;YOUR-CONTACT&gt;\nsnmp-server location &lt;YOUR-LOCATION&gt;\n\n# SNMPv3\n\nsnmp-server group &lt;GROUP-NAME&gt; v3 priv\nsnmp-server user &lt;USER-NAME&gt; &lt;GROUP-NAME&gt; v3 auth sha &lt;AUTH-PASSWORD&gt; priv aes 128 &lt;PRIV-PASSWORD&gt;\nsnmp-server contact &lt;YOUR-CONTACT&gt;\nsnmp-server location &lt;YOUR-LOCATION&gt;\n\n# Note: The following is also required if using SNMPv3 and you want to populate the FDB table, STP info and others.\n\nsnmp-server group &lt;GROUP-NAME&gt; v3 priv context vlan- match prefix\n</code></pre> <p>Note</p> <p>If the device is unable to find the SNMP user, reboot the ASA. Once rebooted, continue the steps as normal.</p>"},{"location":"Support/SNMP-Configuration-Examples/#nx-os","title":"NX-OS","text":"<pre><code># SNMPv2c\n\nsnmp-server community &lt;YOUR-COMMUNITY&gt; RO\nsnmp-server contact &lt;YOUR-CONTACT&gt;\nsnmp-server location &lt;YOUR-LOCATION&gt;\n\n# SNMPv3\n\nsnmp-server user &lt;USER-NAME&gt; &lt;GROUP-NAME&gt; v3 auth sha &lt;AUTH-PASSWORD&gt; priv aes 128 &lt;PRIV-PASSWORD&gt;\nsnmp-server contact &lt;YOUR-CONTACT&gt;\nsnmp-server location &lt;YOUR-LOCATION&gt;\n</code></pre>"},{"location":"Support/SNMP-Configuration-Examples/#wireless-lan-controller-wlc","title":"Wireless LAN Controller (WLC)","text":"<ol> <li>Access the web admin page and log in</li> <li>If you are running version 8.1 and later, on the new dashboard click \"Advanced\"</li> <li>Go to management Tab</li> <li>On SNMP sub-menu, select \"Communities\"</li> <li>Click \"New...\"</li> <li>Add your community name and leave IP addresses empty</li> <li>Click Apply and Save</li> </ol>"},{"location":"Support/SNMP-Configuration-Examples/#eaton","title":"Eaton","text":""},{"location":"Support/SNMP-Configuration-Examples/#network-card-ms","title":"Network Card-MS","text":"<ol> <li>Connect to the Web UI of the device</li> <li>Upgrade to the latest available manufacturer firmware which applies to your hardware revision. Refer to the release notes.   For devices which can use the Lx releases, do install LD.</li> <li>After rebooting the card (safe for connected load), configure Network, System and Access Control. Save config for each step.</li> <li>Configure SNMP. The device defaults to both SNMP v1 and v3 enabled, with default credentials. Disable what you do not need. SNMP v3 works, but uses MD5/DES. You may have to add another section to your SNMP credentials table in LibreNMS. Save.</li> </ol>"},{"location":"Support/SNMP-Configuration-Examples/#hpe-3par","title":"HPE / 3PAR","text":""},{"location":"Support/SNMP-Configuration-Examples/#comware","title":"Comware","text":"<p>SNMPv2c</p> <pre><code>snmp-agent community read &lt;YOUR-COMMUNITY&gt;\nsnmp-agent sys-info contact &lt;YOUR-CONTACT&gt;\nsnmp-agent sys-info location &lt;YOUR-LOCATION&gt;\nsnmp-agent sys-info version all\nsnmp-agent packet max-size 6000\n</code></pre> <p>Note</p> <p><code>packet max-size</code> is required for some walks to complete, but the path must support fragmentation.</p> <p>SNMPv3</p> <pre><code>snmp-agent mib-view excluded ExcludeAll snmp\nsnmp-agent group v3 V3ROGroup privacy read-view ViewDefault write-view ExcludeAll\nsnmp-agent usm-user v3 &lt;USER&gt; V3ROGroup simple authentication-mode sha &lt;AuthKey&gt; privacy-mode aes128 &lt;PrivacyKey&gt;\nsnmp-agent sys-info contact &lt;YOUR-CONTACT&gt;\nsnmp-agent sys-info location &lt;YOUR-LOCATION&gt;\nsnmp-agent sys-info version v3\nundo snmp-agent sys-info version v1 v2c\nsnmp-agent packet max-size 6000\n</code></pre> <p>Note</p> <p><code>packet max-size</code> is required for some walks to complete, but the path must support fragmentation.</p>"},{"location":"Support/SNMP-Configuration-Examples/#inform-os-32x","title":"Inform OS 3.2.x","text":"<ul> <li>Access the CLI</li> <li>Add an SNMP Manager with your LibreNMS IP address:</li> </ul> <pre><code>addsnmpmgr &lt;librenms ip&gt;\n</code></pre> <ul> <li>Add your SNMP community:</li> </ul> <pre><code>setsnmppw &lt;community&gt;\n</code></pre>"},{"location":"Support/SNMP-Configuration-Examples/#infoblox","title":"Infoblox","text":""},{"location":"Support/SNMP-Configuration-Examples/#nios-7x","title":"NIOS 7.x+","text":"<ol> <li>Access the web admin page and log in</li> <li>Go to Grid tab &gt; Grid Manager</li> <li>In the right menu select \"Grid properties\"</li> <li>Select \"SNMP\" menu</li> <li>Click \"Enable SNMPv1/SNMPv2 Queries\"</li> <li>Add your community</li> <li>Click Save &amp; Close</li> </ol>"},{"location":"Support/SNMP-Configuration-Examples/#juniper","title":"Juniper","text":""},{"location":"Support/SNMP-Configuration-Examples/#junos-os","title":"Junos OS","text":"<p>for SNMPv1/v2c</p> <pre><code>set snmp description description\nset snmp location location\nset snmp contact contact\nset snmp community YOUR-COMMUNITY authorization read-only\n</code></pre> <p>for SNMPv3 (authPriv):</p> <pre><code>set snmp v3 usm local-engine user authpriv authentication-sha authentication-password YOUR_AUTH_SECRET\nset snmp v3 usm local-engine user authpriv privacy-aes128 privacy-password YOUR_PRIV_SECRET\nset snmp v3 vacm security-to-group security-model usm security-name authpriv group mysnmpv3\nset snmp v3 vacm access group mysnmpv3 default-context-prefix security-model any security-level authentication read-view mysnmpv3view\nset snmp v3 vacm access group mysnmpv3 default-context-prefix security-model any security-level privacy read-view mysnmpv3view\nset snmp view mysnmpv3view oid iso include\n</code></pre>"},{"location":"Support/SNMP-Configuration-Examples/#mikrotik","title":"Mikrotik","text":""},{"location":"Support/SNMP-Configuration-Examples/#routeros-6x","title":"RouterOS 6.x","text":"<p>CLI SNMP v2 Configuration</p> <pre><code>/snmp community\nset [ find default=yes ] read-access=no\nadd addresses=&lt;ALLOWED-SRC-IPs/NETMASK&gt; name=&lt;COMMUNITY&gt;\n/snmp\nset contact=\"&lt;NAME&gt;\" enabled=yes engine-id=&lt;ENGINE ID&gt; location=\"&lt;LOCALTION&gt;\"\n</code></pre> <p>Note</p> <ul> <li>About the snmp community commands:<ul> <li>The commands change the default snmp community.  It is probably possible to create a new one instead.</li> <li><code>&lt;ALLOWED-SRC-IPs/NETMASK&gt;</code> specify the address and host (not network) netmask of the LibreNMS server.  Example: 192.168.8.71/32</li> <li>trap-version=2 must also be specified if some other trap-version has been set</li> <li>trap-interfaces may also be used to limit the interfaces the router listens on</li> </ul> </li> <li>About the snmp command:<ul> <li>contact, engine-id and location are optional</li> <li>trap-community is probably required if a new snmp community has been created.</li> </ul> </li> </ul> <p>CLI SNMP v3 Configuration for authPriv</p> <pre><code>/snmp community\nadd name=\"&lt;COMMUNITY&gt;\" addresses=\"&lt;ALLOWED-SRC-IPs/NETMASK&gt;\"\nset \"&lt;COMMUNITY&gt;\" authentication-password=\"&lt;AUTH_PASS&gt;\" authentication-protocol=MD5\nset \"&lt;COMMUNITY&gt;\" encryption-password=\"&lt;ENCRYP_PASS&gt;\" encryption-protocol=AES\nset \"&lt;COMMUNITY&gt;\" read-access=yes write-access=no security=private\n#Disable public SNMP\nset public read-access=no write-access=no security=private\n/snmp\nset contact=\"&lt;NAME&gt;\" enabled=yes engine-id=\"&lt;ENGINE ID&gt;\" location=\"&lt;LOCALTION&gt;\"\n</code></pre> <p>Note</p> <ul> <li>Use password with length of min 8 chars</li> </ul> <p>Notes for both SNMP v2 and v3</p> <ul> <li>In some cases of advanced routing one may need to set explicitly the source IP address from which the SNMP daemon will reply - <code>/snmp set src-address=&lt;SELF_IP_ADDRESS&gt;</code></li> </ul>"},{"location":"Support/SNMP-Configuration-Examples/#palo-alto","title":"Palo Alto","text":""},{"location":"Support/SNMP-Configuration-Examples/#panos-6x7x","title":"PANOS 6.x/7.x","text":"<ol> <li>Access the web admin page and log in</li> <li>Go to Device tab &gt; Setup</li> <li>Go to the sub-tab \"Operations\"</li> <li>Click \"SNMP Setup\"</li> <li>Enter your SNMP community and then click \"OK\"</li> <li>Click Apply</li> </ol> <p>Note that you need to allow SNMP on the needed interfaces. To do that you need to create a network \"Interface Mgmt\" profile for standard interface and allow SNMP under \"Device &gt; Management &gt; Management Interface Settings\" for out of band management interface.</p> <p>One may also configure SNMP from the command line, which is useful when you need to configure more than one firewall for SNMP monitoring. Log into the firewall(s) via ssh, and perform these commands for basic SNMPv3 configuration:</p> <pre><code>username@devicename&gt; configure\nusername@devicename# set deviceconfig system service disable-snmp no\nusername@devicename# set deviceconfig system snmp-setting access-setting version v3 views pa view iso oid 1.3.6.1\nusername@devicename# set deviceconfig system snmp-setting access-setting version v3 views pa view iso option include\nusername@devicename# set deviceconfig system snmp-setting access-setting version v3 views pa view iso mask 0xf0\nusername@devicename# set deviceconfig system snmp-setting access-setting version v3 users authpriv authpwd YOUR_AUTH_SECRET\nusername@devicename# set deviceconfig system snmp-setting access-setting version v3 users authpriv privpwd YOUR_PRIV_SECRET\nusername@devicename# set deviceconfig system snmp-setting access-setting version v3 users authpriv view pa\nusername@devicename# set deviceconfig system snmp-setting snmp-system location \"Yourcity, Yourcountry [60.4,5.31]\"\nusername@devicename# set deviceconfig system snmp-setting snmp-system contact noc@your.org\nusername@devicename# commit\nusername@devicename# exit\n</code></pre>"},{"location":"Support/SNMP-Configuration-Examples/#ubiquiti","title":"Ubiquiti","text":""},{"location":"Support/SNMP-Configuration-Examples/#edgeos","title":"EdgeOs","text":"<p>If you use the HTTP interface: 1. Access the legacy web admin page and log in 1. Go to System &gt; Advanced Configuration 1. Go to the sub-tab \"SNMP\" &gt; \"Community\" 1. Click \"Add Community Group\" 1. Enter your SNMP community, ip address and click submit 1. Go to System &gt; Summary 1. Go to the sub-tab \"Description\" 1. Enter your System Name, System Location and System Contact. 1. Click submit 1. Click \"Save Configuration\"</p> <p>If you use CLI:</p> <pre><code>username@devicename&gt; enable\nusername@devicename# configure\nusername@devicename (Config)# snmp-server community \"public\" ro\nusername@devicename (Config)# snmp-server sysname \"devicename\"\nusername@devicename (Config)# snmp-server contact \"noc@example.com\"\nusername@devicename (Config)# exit\nusername@devicename# write memory\n</code></pre>"},{"location":"Support/SNMP-Configuration-Examples/#vmware","title":"VMware","text":""},{"location":"Support/SNMP-Configuration-Examples/#esxesxi-5x6x","title":"ESX/ESXi 5.x/6.x","text":"<p>Log on to your ESX server by means of ssh. You may have to enable the ssh service in the GUI first. From the CLI, execute the following commands:</p> <pre><code>esxcli system snmp set --authentication SHA1\nesxcli system snmp set --privacy AES128\nesxcli system snmp hash --auth-hash YOUR_AUTH_SECRET --priv-hash YOUR_PRIV_SECRET --raw-secret\n</code></pre> <p>This command produces output like this</p> <pre><code>Authhash: f3d8982fc28e8d1346c26eee49eb2c4a5950c934\nPrivhash: 0596ab30b315576a4e9f7d7bde65bf49b749e335\n</code></pre> <p>Now define a SNMPv3 user:</p> <pre><code>esxcli system snmp set --users &lt;username&gt;/f3d8982fc28e8d1346c26eee49eb2c4a5950c934/0596ab30b315576a4e9f7d7bde65bf49b749e335/priv\nesxcli system snmp set -L \"Yourcity, Yourcountry [60.4,5.3]\"\nesxcli system snmp set -C noc@your.org\nesxcli system snmp set --enable true\n</code></pre> <p>Note: In case of snmp timeouts, disable the firewall with <code>esxcli network firewall set --enabled false</code> If snmp timeouts still occur with firewall disabled, migrate VMs if needed and reboot ESXi host.</p>"},{"location":"Support/SNMP-Configuration-Examples/#vcenter-6x","title":"VCenter 6.x","text":"<p>Log on to your ESX server by means of ssh. You may have to enable the ssh service in the GUI first. From the CLI, execute the following commands:</p> <pre><code>snmp.set --authentication SHA1\nsnmp.set --privacy AES128\nsnmp.hash --auth_hash YOUR_AUTH_SECRET --priv_hash YOUR_PRIV_SECRET --raw_secret true\n</code></pre> <p>This command produces output like this</p> <pre><code>Privhash: 0596ab30b315576a4e9f7d7bde65bf49b749e335\nAuthhash: f3d8982fc28e8d1346c26eee49eb2c4a5950c934\n</code></pre> <p>Now define a SNMPv3 user:</p> <pre><code>snmp.set --users authpriv/f3d8982fc28e8d1346c26eee49eb2c4a5950c934/0596ab30b315576a4e9f7d7bde65bf49b749e335/priv\nsnmp.enable\n</code></pre>"},{"location":"Support/SNMP-Configuration-Examples/#operating-systems","title":"Operating systems","text":""},{"location":"Support/SNMP-Configuration-Examples/#linux-snmpd-v2","title":"Linux (snmpd v2)","text":"<p>Replace your snmpd.conf file by the example below and edit it with appropriate community in \"RANDOMSTRINGGOESHERE\".</p> <pre><code>vi /etc/snmp/snmpd.conf\n</code></pre> <pre><code># Change RANDOMSTRINGGOESHERE to your preferred SNMP community string\ncom2sec readonly  default         RANDOMSTRINGGOESHERE\n\ngroup MyROGroup v2c        readonly\nview all    included  .1                               80\naccess MyROGroup \"\"      any       noauth    exact  all    none   none\n\nsyslocation Rack, Room, Building, City, Country [GPSX,Y]\nsyscontact Your Name &lt;your@email.address&gt;\n\n#Distro Detection\nextend distro /usr/bin/distro\n#Hardware Detection (uncomment to enable)\n#extend hardware '/bin/cat /sys/devices/virtual/dmi/id/product_name'\n#extend manufacturer '/bin/cat /sys/devices/virtual/dmi/id/sys_vendor'\n#extend serial '/bin/cat /sys/devices/virtual/dmi/id/product_serial'\n</code></pre> <p>Note</p> <p>On some systems the snmpd is running as its own user, which means it can't read <code>/sys/devices/virtual/dmi/id/product_serial</code> which is mode 0400. One solution is to include <code>@reboot chmod 444 /sys/devices/virtual/dmi/id/product_serial</code> in the crontab for root or equivalent.</p> <p>Non-x86 or SMBIOS-based systems, such as ARM-based Raspberry Pi units should query device tree locations for this metadata, for example:</p> <pre><code>extend hardware '/bin/cat /sys/firmware/devicetree/base/model'\nextend serial '/bin/cat /sys/firmware/devicetree/base/serial-number'\n</code></pre> <p>The LibreNMS server include a copy of this example here:</p> <pre><code>/opt/librenms/snmpd.conf.example\n</code></pre> <p>The binary /usr/bin/distro must be copied from the original source repository:</p> <pre><code>curl -o /usr/bin/distro https://raw.githubusercontent.com/librenms/librenms-agent/master/snmp/distro\nchmod +x /usr/bin/distro\n</code></pre>"},{"location":"Support/SNMP-Configuration-Examples/#linux-snmpd-v3","title":"Linux (snmpd v3)","text":"<p>Go to /etc/snmp/snmpd.conf</p> <p>Open the file in vi or nano /etc/snmp/snmpd.conf and add the following line to create SNMPV3 User (replace username and passwords with your own):</p> <pre><code>createUser authPrivUser SHA \"authPassword\" AES \"privPassword\"\n</code></pre> <p>Make sure the agent listens to all interfaces by adding the following line inside snmpd.conf:</p> <pre><code>agentAddress udp:161,udp6:161\n</code></pre> <p>This line simply means listen to connections across all interfaces IPv4 and IPv6 respectively</p> <p>Uncomment and change the following line to give read access to the username created above (rouser is what LibreNMS uses) :</p> <pre><code>#rouser authPrivUser priv\n</code></pre> <p>Change the following details inside snmpd.conf</p> <pre><code>syslocation Rack, Room, Building, City, Country [GPSX,Y]\nsyscontact Your Name &lt;your@email.address&gt;\n</code></pre> <p>Save and exit the file</p>"},{"location":"Support/SNMP-Configuration-Examples/#restart-the-snmpd-service","title":"Restart the snmpd service","text":""},{"location":"Support/SNMP-Configuration-Examples/#centos-6-red-hat-6","title":"CentOS 6 / Red hat 6","text":"<pre><code>service snmpd restart\n</code></pre>"},{"location":"Support/SNMP-Configuration-Examples/#centos-7-red-hat-7","title":"CentOS 7 / Red hat 7","text":"<pre><code>systemctl restart snmpd\n</code></pre> <p>Add SNMP to Firewalld</p> <pre><code>firewall-cmd --zone=public --permanent --add-service=snmp\nfirewall-cmd --reload\n</code></pre>"},{"location":"Support/SNMP-Configuration-Examples/#ubuntu","title":"Ubuntu","text":"<pre><code>service snmpd restart\n</code></pre>"},{"location":"Support/SNMP-Configuration-Examples/#arch-linux-snmpd-v2","title":"Arch Linux (snmpd v2)","text":"<ol> <li>Install SNMP Package <code>pacman -S net-snmp</code></li> <li>create SNMP folder <code>mkdir /etc/snmp/</code></li> <li>set community <code>echo rocommunity read_only_community_string &gt;&gt; /etc/snmp/snmpd.conf</code></li> <li>set contact <code>echo syscontact Firstname Lastname &gt;&gt; /etc/snmp/snmpd.conf</code></li> <li>set location <code>echo syslocation L69 4RX &gt;&gt; /etc/snmp/snmpd.conf</code></li> <li>enable startup <code>systemctl enable snmpd.service</code></li> <li>start snmp <code>systemctl restart snmpd.service</code></li> </ol>"},{"location":"Support/SNMP-Configuration-Examples/#windows-server-2008-r2","title":"Windows Server 2008 R2","text":"<ol> <li>Log in to your Windows Server 2008 R2</li> <li>Start \"Server Manager\" under \"Administrative Tools\"</li> <li>Click \"Features\" and then click \"Add Feature\"</li> <li>Check (if not checked) \"SNMP Service\", click \"Next\" until \"Install\"</li> <li>Start \"Services\" under \"Administrative Tools\"</li> <li>Edit \"SNMP Service\" properties</li> <li>Go to the security tab</li> <li>In \"Accepted community name\" click \"Add\" to add your community string and permission</li> <li>In \"Accept SNMP packets from these hosts\" click \"Add\" and add your    LibreNMS server IP address</li> <li>Validate change by clicking \"Apply\"</li> </ol>"},{"location":"Support/SNMP-Configuration-Examples/#windows-server-2012-r2-and-newer","title":"Windows Server 2012 R2 and newer","text":""},{"location":"Support/SNMP-Configuration-Examples/#gui","title":"GUI","text":"<ol> <li>Log in to your Windows Server 2012 R2 or newer</li> <li>Start \"Server Manager\" under \"Administrative Tools\"</li> <li>Click \"Manage\" and then \"Add Roles and Features\"</li> <li>Continue by pressing \"Next\" to the \"Features\" menu</li> <li>Install (if not installed) \"SNMP Service\"</li> <li>Start \"Services\" under \"Administrative Tools\"</li> <li>Edit \"SNMP Service\" properties</li> <li>Go to the security tab</li> <li>In \"Accepted community name\" click \"Add\" to add your community string and permission</li> <li>In \"Accept SNMP packets from these hosts\" click \"Add\" and add your    LibreNMS server IP address</li> <li>Validate change by clicking \"Apply\"</li> </ol>"},{"location":"Support/SNMP-Configuration-Examples/#powershell","title":"PowerShell","text":"<p>The following example will install SNMP, set the Librenms IP and set a read only community string. Replace <code>$IP</code> and <code>$communitystring</code> with your values.</p> <pre><code>Install-WindowsFeature -Name 'SNMP-Service','RSAT-SNMP'\nNew-ItemProperty -Path \"HKLM:\\SYSTEM\\CurrentControlSet\\services\\SNMP\\Parameters\\PermittedManagers\"  -Name 2 -Value $IP\nNew-ItemProperty -Path \"HKLM:\\SYSTEM\\CurrentControlSet\\services\\SNMP\\Parameters\\ValidCommunities\"  -Name $communitystring -Value 4\n</code></pre> <p>Note</p> <p>SNMPv3 can be supported on Windows platforms with the use of Net-SNMP.</p>"},{"location":"Support/SNMP-Configuration-Examples/#mac-osx","title":"Mac OSX","text":"<p>Step 1: <code>sudo nano /etc/snmp/snmpd.conf</code></p> <pre><code>#Allow read-access with the following SNMP Community String:\nrocommunity public\n\n# all other settings are optional but recommended.\n\n# Location of the device\nsyslocation data centre A\n\n# Human Contact for the device\nsyscontact SysAdmin\n\n# System Name of the device\nsysName SystemName\n\n# the system OID for this device. This is optional but recommended,\n# to identify this as a MAC OS system.\nsysobjectid 1.3.6.1.4.1.8072.3.2.16\n</code></pre> <p>Step 2:</p> <pre><code>sudo launchctl load -w /System/Library/LaunchDaemons/org.net-snmp.snmpd.plist\n</code></pre>"},{"location":"Support/Device-Notes/AsuswrtMerlin/","title":"Asuswrt-Merlin","text":"<p>To use Wireless Sensors on AsuswrtMerlin, an agent of sorts is required. The purpose of the agent is to execute on the client (AsuswrtMerlin) side, to ensure that the needed Wireless Sensor information is returned for SNMP queries (from LibreNMS).</p>"},{"location":"Support/Device-Notes/AsuswrtMerlin/#installation","title":"Installation","text":""},{"location":"Support/Device-Notes/AsuswrtMerlin/#asuswrtmerlin","title":"AsuswrtMerlin","text":"<p>Two items are required on the AsuswrtMerlin side - scripts to generate the necessary information (for SNMP replies), and an SNMP extend configuration update (to return the information vs. the expected query).</p> <p>1: Install the scripts:</p> <p>Copy the scripts from librenms-agent/snmp/Openwrt - preferably inside /etc/librenms on AsuswrtMerlin (and add this directory to /etc/sysupgrade.conf, to survive firmware updates).</p> <p>The only file that needs to be edited is wlInterfaces.txt, which is a mapping from the wireless interfaces, to the desired display name in LibreNMS. For example, <pre><code>wlan0,wl-2.4G\nwlan1,wl-5.0G\n</code></pre></p> <p>2: Update the AsuswrtMerlin SNMP configuration, adding extend support for the Wireless Sensor queries:</p> <p><code>vi /etc/config/snmpd</code>, adding the following entries (assuming the scripts are installed in /etc/librenms, and are executable), and update the network interfaces as needed to match the hardware,</p> <pre><code>config extend\n        option name     interfaces\n        option prog     \"/bin/cat /etc/librenms/wlInterfaces.txt\"\nconfig extend\n        option name     clients-wlan0\n        option prog     \"/etc/librenms/wlClients.sh wlan0\"\nconfig extend\n        option name     clients-wlan1\n        option prog     \"/etc/librenms/wlClients.sh wlan1\"\nconfig extend\n        option name     clients-wlan\n        option prog     \"/etc/librenms/wlClients.sh\"\nconfig extend\n        option name     frequency-wlan0\n        option prog     \"/etc/librenms/wlFrequency.sh wlan0\"\nconfig extend\n        option name     frequency-wlan1\n        option prog     \"/etc/librenms/wlFrequency.sh wlan1\"\nconfig extend\n        option name     rate-tx-wlan0-min\n        option prog     \"/etc/librenms/wlRate.sh wlan0 tx min\"\nconfig extend\n        option name     rate-tx-wlan0-avg\n        option prog     \"/etc/librenms/wlRate.sh wlan0 tx avg\"\nconfig extend\n        option name     rate-tx-wlan0-max\n        option prog     \"/etc/librenms/wlRate.sh wlan0 tx max\"\nconfig extend\n        option name     rate-tx-wlan1-min\n        option prog     \"/etc/librenms/wlRate.sh wlan1 tx min\"\nconfig extend\n        option name     rate-tx-wlan1-avg\n        option prog     \"/etc/librenms/wlRate.sh wlan1 tx avg\"\nconfig extend\n        option name     rate-tx-wlan1-max\n        option prog     \"/etc/librenms/wlRate.sh wlan1 tx max\"\nconfig extend\n        option name     rate-rx-wlan0-min\n        option prog     \"/etc/librenms/wlRate.sh wlan0 rx min\"\nconfig extend\n        option name     rate-rx-wlan0-avg\n        option prog     \"/etc/librenms/wlRate.sh wlan0 rx avg\"\nconfig extend\n        option name     rate-rx-wlan0-max\n        option prog     \"/etc/librenms/wlRate.sh wlan0 rx max\"\nconfig extend\n        option name     rate-rx-wlan1-min\n        option prog     \"/etc/librenms/wlRate.sh wlan1 rx min\"\nconfig extend\n        option name     rate-rx-wlan1-avg\n        option prog     \"/etc/librenms/wlRate.sh wlan1 rx avg\"\nconfig extend\n        option name     rate-rx-wlan1-max\n        option prog     \"/etc/librenms/wlRate.sh wlan1 rx max\"\nconfig extend\n        option name     noise-floor-wlan0\n        option prog     \"/etc/librenms/wlNoiseFloor.sh wlan0\"\nconfig extend\n        option name     noise-floor-wlan1\n        option prog     \"/etc/librenms/wlNoiseFloor.sh wlan1\"\nconfig extend\n        option name     snr-wlan0-min\n        option prog     \"/etc/librenms/wlSNR.sh wlan0 min\"\nconfig extend\n        option name     snr-wlan0-avg\n        option prog     \"/etc/librenms/wlSNR.sh wlan0 avg\"\nconfig extend\n        option name     snr-wlan0-max\n        option prog     \"/etc/librenms/wlSNR.sh wlan0 max\"\nconfig extend\n        option name     snr-wlan1-min\n        option prog     \"/etc/librenms/wlSNR.sh wlan1 min\"\nconfig extend\n        option name     snr-wlan1-avg\n        option prog     \"/etc/librenms/wlSNR.sh wlan1 avg\"\nconfig extend\n        option name     snr-wlan1-max\n        option prog     \"/etc/librenms/wlSNR.sh wlan1 max\"\n</code></pre> <p>NOTE, any of the scripts above can be tested simply by running the corresponding command.</p> <p>NOTE, to check the output data from any of these extensions, on the LibreNMS machine, run (for example),</p> <p><code>snmpwalk -v 2c -c public -Osqnv &lt;openwrt-host&gt; 'NET-SNMP-EXTEND-MIB::nsExtendOutputFull.\"frequency-wlan0\"'</code></p> <p>NOTE, on the LibreNMS machine, ensure that snmp-mibs-downloader is installed.</p> <p>NOTE, on the AsuswrtMerlin machine, ensure that distro is installed (i.e. that the OS is correctly detected!).</p> <p>3: Restart the snmp service on AsuswrtMerlin:</p> <p><code>service snmpd restart</code></p> <p>And then wait for discovery and polling on LibreNMS!</p>"},{"location":"Support/Device-Notes/Carel-pCOweb-Devices/","title":"Carel pCOweb Devices","text":"<p>The pCOWeb card is used to interface the pCO system to networks that use the HVAC protocols based on the Ethernet physical standard such as SNMP. The problem with this card is that the implementation is based on the final manufacturer of the HVAC (Heating, Ventilation and Air Conditioning) and not based on a standard given by Carel. So each pCOweb card has a different configuration that needs a different MIB depending on the manufacturers implementation.</p> <p>The main problem is that LibreNMS will by default discover this card as pCOweb and not as your real manufacturer like it should. A solution was found to bypass this issue, but it's LibreNMS independent and you need to first configure your pCOWeb through the admin interface.</p>"},{"location":"Support/Device-Notes/Carel-pCOweb-Devices/#accessing-the-pcoweb-card","title":"Accessing the pCOWeb card","text":"<p>Log on to the configuration page of the pCOWeb card. The pCOWeb interface is not always found when accessing the ip directly but rather a subdirectory. If you cant directly reach the configuration page try <code>&lt;ip address&gt;/config</code>. The default username and password is <code>admin/fadmin</code>. Modern browsers require you to enter this 2 or 3 times.</p>"},{"location":"Support/Device-Notes/Carel-pCOweb-Devices/#configuring-the-pcoweb-card-snmp-for-librenms","title":"Configuring the pCOweb card SNMP for LibreNMS","text":"<p>First you need to configure your SNMP card using the admin interface. An SNMP tab in the configuration menu leaves you the choice to choose a System OID and a Enterprise OID. This is a little tricky but based on this information we defined a \"standard\" for all implementation of Carel products with LibreNMS.</p> <p></p> <p>The base Carel OID is 1.3.6.1.4.1.9839. To this OID we will add the final manufacturer Enterprise OID. You can find all enterprise OID following this link. This will allow us to create a specific support for this device. Librenms uses this value to detect which HVAC device is connected to the pCOWeb card.</p> <p>Example for the Rittal IT Chiller that uses a pCOweb card:</p> <ol> <li>Base Carel OID : 1.3.6.1.4.1.9839</li> <li>Rittal (the manufacturer) base enterprise OID : 2606</li> <li>Adding value to identify this device in LibreNMS : 1</li> <li>Complete System OID for a Rittal Chiller using a Carel pCOweb card: 1.3.6.1.4.1.9839.2606.1</li> <li>Use 9839 as Enterprise OID</li> </ol> <p>The way this works is that the pCOWeb card pretends to be another device. In reality the pCOWeb card just inserts the \"enterprise OID\" in place of the vendor id in the OID.</p> <p>In the table below you can find the values needed for devices which are already supported.</p>"},{"location":"Support/Device-Notes/Carel-pCOweb-Devices/#supported-devices","title":"Supported devices","text":"<p>LibreNMS is ready for the devices listed in this table. You only need to configure your pCOweb card with the accorded System OID and Enterprise OID:</p> Manufacturer Description System OID Enterprise OID Rittal IT Chiller 1.3.6.1.4.1.9839.2606.1 9839 Rittal LCP DX 3311 1.3.6.1.4.1.9839.2606.3311 9839.2606"},{"location":"Support/Device-Notes/Carel-pCOweb-Devices/#unsupported-devices","title":"Unsupported devices","text":"<p>After constructing the correct System OID for your SNMP card, you can start the LibreNMS new OS implementation and use this new OID as sysObjectID for the YAML definition file.</p>"},{"location":"Support/Device-Notes/Fortigate/","title":"Fortigate","text":"<p>To gather Port IP info &amp; routing info for Fortigates, disable the append-index feature.  This feature appends VDOM to the index, breaking standard MIBs. <pre><code>config system snmp sysinfo\n    set append-index disable\nend\n</code></pre> https://docs.fortinet.com/document/fortigate/7.2.0/new-features/742119/enabling-the-index-extension-7-2-8</p>"},{"location":"Support/Device-Notes/Openwrt/","title":"OpenWRT","text":"<p>To use Wireless Sensors on Openwrt, an agent of sorts is required. The purpose of the agent is to execute on the client (Openwrt) side, to ensure that the needed Wireless Sensor information is returned for SNMP queries (from LibreNMS).</p>"},{"location":"Support/Device-Notes/Openwrt/#installation","title":"Installation","text":""},{"location":"Support/Device-Notes/Openwrt/#openwrt","title":"Openwrt","text":"<p>Two items are required on the Openwrt side - scripts to generate the necessary information (for SNMP replies), and an SNMP extend configuration update (to return the information vs. the expected query).</p> <p>1: Install the scripts:</p> <p>Copy the scripts from librenms-agent repository - preferably inside /etc/librenms on Openwrt (and add this directory to /etc/sysupgrade.conf, to survive firmware updates): <pre><code>wget -O /etc/librenms/wlClients.sh https://raw.githubusercontent.com/librenms/librenms-agent/master/snmp/Openwrt/wlClients.sh\nwget -O /etc/librenms/wlFrequency.sh https://raw.githubusercontent.com/librenms/librenms-agent/master/snmp/Openwrt/wlFrequency.sh\nwget -O /etc/librenms/wlInterfaces.txt https://raw.githubusercontent.com/librenms/librenms-agent/master/snmp/Openwrt/wlInterfaces.txt\nwget -O /etc/librenms/wlNoiseFloor.sh https://raw.githubusercontent.com/librenms/librenms-agent/master/snmp/Openwrt/wlNoiseFloor.sh\nwget -O /etc/librenms/wlRate.sh https://raw.githubusercontent.com/librenms/librenms-agent/master/snmp/Openwrt/wlRate.sh\nwget -O /etc/librenms/wlSNR.sh https://raw.githubusercontent.com/librenms/librenms-agent/master/snmp/Openwrt/wlSNR.sh\nwget -O /etc/librenms/distro https://raw.githubusercontent.com/librenms/librenms-agent/master/snmp/distro\nchmod +x /etc/librenms/*.sh\nchmod +x /etc/librenms/distro\n</code></pre></p> <p>The only file that needs to be edited is wlInterfaces.txt, which is a mapping from the wireless interfaces, to the desired display name in LibreNMS. For example, <pre><code>wlan0,wl-2.4G\nwlan1,wl-5.0G\n</code></pre></p> <p>2: Update the Openwrt SNMP configuration, adding extend support for the OS detection and the Wireless Sensor queries:</p> <p><code>vi /etc/config/snmpd</code>, adding the following entries (assuming the scripts are installed in /etc/librenms, and are executable), and update the network interfaces as needed to match the hardware,</p> <pre><code>config extend\n        option name distro\n        option prog '/etc/librenms/distro'\nconfig extend\n        option name hardware\n        option prog '/bin/cat'\n        option args '/sys/firmware/devicetree/base/model'\nconfig extend\n        option name     interfaces\n        option prog     \"/bin/cat /etc/librenms/wlInterfaces.txt\"\nconfig extend\n        option name     clients-wlan0\n        option prog     \"/etc/librenms/wlClients.sh wlan0\"\nconfig extend\n        option name     clients-wlan1\n        option prog     \"/etc/librenms/wlClients.sh wlan1\"\nconfig extend\n        option name     clients-wlan\n        option prog     \"/etc/librenms/wlClients.sh\"\nconfig extend\n        option name     frequency-wlan0\n        option prog     \"/etc/librenms/wlFrequency.sh wlan0\"\nconfig extend\n        option name     frequency-wlan1\n        option prog     \"/etc/librenms/wlFrequency.sh wlan1\"\nconfig extend\n        option name     rate-tx-wlan0-min\n        option prog     \"/etc/librenms/wlRate.sh wlan0 tx min\"\nconfig extend\n        option name     rate-tx-wlan0-avg\n        option prog     \"/etc/librenms/wlRate.sh wlan0 tx avg\"\nconfig extend\n        option name     rate-tx-wlan0-max\n        option prog     \"/etc/librenms/wlRate.sh wlan0 tx max\"\nconfig extend\n        option name     rate-tx-wlan1-min\n        option prog     \"/etc/librenms/wlRate.sh wlan1 tx min\"\nconfig extend\n        option name     rate-tx-wlan1-avg\n        option prog     \"/etc/librenms/wlRate.sh wlan1 tx avg\"\nconfig extend\n        option name     rate-tx-wlan1-max\n        option prog     \"/etc/librenms/wlRate.sh wlan1 tx max\"\nconfig extend\n        option name     rate-rx-wlan0-min\n        option prog     \"/etc/librenms/wlRate.sh wlan0 rx min\"\nconfig extend\n        option name     rate-rx-wlan0-avg\n        option prog     \"/etc/librenms/wlRate.sh wlan0 rx avg\"\nconfig extend\n        option name     rate-rx-wlan0-max\n        option prog     \"/etc/librenms/wlRate.sh wlan0 rx max\"\nconfig extend\n        option name     rate-rx-wlan1-min\n        option prog     \"/etc/librenms/wlRate.sh wlan1 rx min\"\nconfig extend\n        option name     rate-rx-wlan1-avg\n        option prog     \"/etc/librenms/wlRate.sh wlan1 rx avg\"\nconfig extend\n        option name     rate-rx-wlan1-max\n        option prog     \"/etc/librenms/wlRate.sh wlan1 rx max\"\nconfig extend\n        option name     noise-floor-wlan0\n        option prog     \"/etc/librenms/wlNoiseFloor.sh wlan0\"\nconfig extend\n        option name     noise-floor-wlan1\n        option prog     \"/etc/librenms/wlNoiseFloor.sh wlan1\"\nconfig extend\n        option name     snr-wlan0-min\n        option prog     \"/etc/librenms/wlSNR.sh wlan0 min\"\nconfig extend\n        option name     snr-wlan0-avg\n        option prog     \"/etc/librenms/wlSNR.sh wlan0 avg\"\nconfig extend\n        option name     snr-wlan0-max\n        option prog     \"/etc/librenms/wlSNR.sh wlan0 max\"\nconfig extend\n        option name     snr-wlan1-min\n        option prog     \"/etc/librenms/wlSNR.sh wlan1 min\"\nconfig extend\n        option name     snr-wlan1-avg\n        option prog     \"/etc/librenms/wlSNR.sh wlan1 avg\"\nconfig extend\n        option name     snr-wlan1-max\n        option prog     \"/etc/librenms/wlSNR.sh wlan1 max\"\n</code></pre> <p>NOTE, any of the scripts above can be tested simply by running the corresponding command.</p> <p>NOTE, to check the output data from any of these extensions, on the LibreNMS machine, run (for example),</p> <p><code>snmpwalk -v 2c -c public -Osqnv &lt;openwrt-host&gt; 'NET-SNMP-EXTEND-MIB::nsExtendOutputFull.\"frequency-wlan0\"'</code></p> <p>NOTE, on the LibreNMS machine, ensure that snmp-mibs-downloader is installed.</p> <p>NOTE, on the AsuswrtMerlin machine, ensure that distro is installed (i.e. that the OS is correctly detected!).</p> <p>3: Restart the snmp service on Openwrt:</p> <p><code>service snmpd restart</code></p> <p>And then wait for discovery and polling on LibreNMS!</p>"},{"location":"Support/Device-Notes/Routeros/","title":"RouterOS","text":"<p>This agent script will allow LibreNMS to run a script on a Mikrotik / RouterOS device to gather the vlan information from both /interface/vlan/ and /interface/bridge/vlan/</p>"},{"location":"Support/Device-Notes/Routeros/#installation","title":"Installation","text":"<ul> <li>Go to https://github.com/librenms/librenms-agent/tree/master/snmp/Routeros</li> <li>Copy and paste the contents of LNMS_vlans.scr file into a script within a RouterOS device.  Name this script LNMS_vlans. (This is NOT the same thing as creating a txt file and importing it into the Files section of the device)</li> <li>If you're unsure how to create the script.  Download the LNMS_vlans.scr file.  Rename to remove the .scr extension.  Copy this file onto all the Mikrotik devices you want to monitor.</li> <li>Open a Terminal / CLI on each tik and run this.  <code>{ :global txtContent [/file get LNMS_vlans contents]; /system/script/add name=LNMS_vlans owner=admin policy=ftp,reboot,read,write,policy,test,password,sniff,sensitive,romon source=$txtContent ;}</code>  This will import the contents of that txt file into a script named LNMS_vlans</li> <li>Enable an SNMP community that has both READ and WRITE capabilities. This is important, otherwise, LibreNMS will not be able to run the above script. It is recommended to use SNMP v3 for this. </li> <li>Discover / Force rediscover your Mikrotik devices. After discovery has been completed the vlans menu should appear within LibreNMS for the device.</li> </ul>"},{"location":"Support/Device-Notes/Routeros/#important-note","title":"*** IMPORTANT NOTE ***","text":"<p>It is strongly recommended that SNMP service only be allowed to be communicated on a very limited set of IP addresses that LibreNMS and related systems will be coming from. (usually /32 address for each) because the write permission could allow an attack on a device. (such as dropping all firewall filters or changing the admin credentials) </p>"},{"location":"Support/Device-Notes/Routeros/#theory-of-operation","title":"Theory of operation:","text":"<p>Mikrotik vlan discovery plugin using the ability of ROS to \"fire up\" a script through SNMP.</p> <p>At first, LibreNMS check for the existence of the script, and if it is present, it will start the LNMS_vlans script. </p> <p>The script will gather information from: - /interface/bridge/vlan for tagged ports inside bridge - /interface/bridge/vlan for currently untagged ports inside bridge - /interface/bridge/port for ports PVID (untagged) inside bridge - /interface/vlan for vlan interfaces</p> <p>after the information is gathered, it is transmitted to LibreNMS over SNMP</p> <p>protocol is: type,vlanId,ifName  <p>i.e:  T,254,ether1 is translated to Tagged vlan 254 on port ether1</p> <p>U,100,wlan2 is translated to Untagged vlan 100 on port wlan2</p>"}]}